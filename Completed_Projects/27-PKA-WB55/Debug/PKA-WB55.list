
PKA-WB55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000190  20000004  08004188  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004b0  20000194  08004318  00020194  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000644  08004318  00020644  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017043  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002985  00000000  00000000  00037207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c0  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001618  00000000  00000000  0003b250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000213ae  00000000  00000000  0003c868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012e69  00000000  00000000  0005dc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d5ac6  00000000  00000000  00070a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00146545  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006030  00000000  00000000  00146598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000194 	.word	0x20000194
 8000158:	00000000 	.word	0x00000000
 800015c:	0800406c 	.word	0x0800406c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000198 	.word	0x20000198
 8000178:	0800406c 	.word	0x0800406c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000484:	f023 0218 	bic.w	r2, r3, #24
 8000488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4313      	orrs	r3, r2
 8000490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c4:	68fb      	ldr	r3, [r7, #12]
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fb65 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f853 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f981 	bl	80007e8 <MX_GPIO_Init>
  MX_PKA_Init();
 80004e6:	f000 f8f5 	bl	80006d4 <MX_PKA_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f907 	bl	80006fc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004ee:	f000 f953 	bl	8000798 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  //encryption
  in.expSize=sizeof(publicExponent);
 80004f2:	2304      	movs	r3, #4
 80004f4:	607b      	str	r3, [r7, #4]
  in.OpSize=sizeof(modulus);
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	60bb      	str	r3, [r7, #8]
  in.pExp=publicExponent;
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <main+0x98>)
 80004fc:	60fb      	str	r3, [r7, #12]
  in.pMod=modulus;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <main+0x9c>)
 8000500:	617b      	str	r3, [r7, #20]
  in.pOp1=plaintext;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <main+0xa0>)
 8000504:	613b      	str	r3, [r7, #16]
if (HAL_PKA_ModExp(&hpka, &in, 1000) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800050c:	4619      	mov	r1, r3
 800050e:	481a      	ldr	r0, [pc, #104]	; (8000578 <main+0xa4>)
 8000510:	f000 ff79 	bl	8001406 <HAL_PKA_ModExp>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <main+0x4a>
{
	Error_Handler();
 800051a:	f000 f9ad 	bl	8000878 <Error_Handler>
}

HAL_PKA_ModExp_GetResult(&hpka, encrypted_data);
 800051e:	4917      	ldr	r1, [pc, #92]	; (800057c <main+0xa8>)
 8000520:	4815      	ldr	r0, [pc, #84]	; (8000578 <main+0xa4>)
 8000522:	f000 ff84 	bl	800142e <HAL_PKA_ModExp_GetResult>

MX_GPIO_Init();
 8000526:	f000 f95f 	bl	80007e8 <MX_GPIO_Init>
  MX_PKA_Init();
 800052a:	f000 f8d3 	bl	80006d4 <MX_PKA_Init>
  MX_USART1_UART_Init();
 800052e:	f000 f8e5 	bl	80006fc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000532:	f000 f931 	bl	8000798 <MX_USB_PCD_Init>

  //decryption
  in.expSize=sizeof(privateExponent);
 8000536:	2380      	movs	r3, #128	; 0x80
 8000538:	607b      	str	r3, [r7, #4]
  in.OpSize=sizeof(modulus);
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	60bb      	str	r3, [r7, #8]
  in.pExp=privateExponent;
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <main+0xac>)
 8000540:	60fb      	str	r3, [r7, #12]
  in.pMod=modulus;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <main+0x9c>)
 8000544:	617b      	str	r3, [r7, #20]
  in.pOp1=encrypted_data;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <main+0xa8>)
 8000548:	613b      	str	r3, [r7, #16]
if (HAL_PKA_ModExp(&hpka, &in, 5000) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000550:	4619      	mov	r1, r3
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <main+0xa4>)
 8000554:	f000 ff57 	bl	8001406 <HAL_PKA_ModExp>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <main+0x8e>
{
	Error_Handler();
 800055e:	f000 f98b 	bl	8000878 <Error_Handler>
}

HAL_PKA_ModExp_GetResult(&hpka, decrypted_data);
 8000562:	4908      	ldr	r1, [pc, #32]	; (8000584 <main+0xb0>)
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <main+0xa4>)
 8000566:	f000 ff62 	bl	800142e <HAL_PKA_ModExp_GetResult>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x96>
 800056c:	20000084 	.word	0x20000084
 8000570:	20000004 	.word	0x20000004
 8000574:	20000108 	.word	0x20000108
 8000578:	20000340 	.word	0x20000340
 800057c:	200002c0 	.word	0x200002c0
 8000580:	20000088 	.word	0x20000088
 8000584:	200001b0 	.word	0x200001b0

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0ae      	sub	sp, #184	; 0xb8
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000592:	2248      	movs	r2, #72	; 0x48
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fd60 	bl	800405c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
 80005ac:	615a      	str	r2, [r3, #20]
 80005ae:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2250      	movs	r2, #80	; 0x50
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fd50 	bl	800405c <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80005bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005ca:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80005cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	f023 0303 	bic.w	r3, r3, #3
 80005d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e0:	f001 f9b0 	bl	8001944 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff ff45 	bl	8000474 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ea:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemClock_Config+0x148>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005f2:	4a37      	ldr	r2, [pc, #220]	; (80006d0 <SystemClock_Config+0x148>)
 80005f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <SystemClock_Config+0x148>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000606:	2327      	movs	r3, #39	; 0x27
 8000608:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000618:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000626:	2300      	movs	r3, #0
 8000628:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800062c:	2360      	movs	r3, #96	; 0x60
 800062e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000632:	2300      	movs	r3, #0
 8000634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fd15 	bl	800206c <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000648:	f000 f916 	bl	8000878 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800064c:	236f      	movs	r3, #111	; 0x6f
 800064e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000650:	2302      	movs	r3, #2
 8000652:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000668:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800066c:	2101      	movs	r1, #1
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f888 	bl	8002784 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800067a:	f000 f8fd 	bl	8000878 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 800067e:	f242 1301 	movw	r3, #8449	; 0x2101
 8000682:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000684:	2318      	movs	r3, #24
 8000686:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800068c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800068e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000692:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000694:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000698:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800069a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800069e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80006aa:	2300      	movs	r3, #0
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fcb5 	bl	8003024 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80006c0:	f000 f8da 	bl	8000878 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c4:	f002 fe24 	bl	8003310 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c8:	bf00      	nop
 80006ca:	37b8      	adds	r7, #184	; 0xb8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58000400 	.word	0x58000400

080006d4 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_PKA_Init+0x20>)
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <MX_PKA_Init+0x24>)
 80006dc:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_PKA_Init+0x20>)
 80006e0:	f000 fe63 	bl	80013aa <HAL_PKA_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 80006ea:	f000 f8c5 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000340 	.word	0x20000340
 80006f8:	58002000 	.word	0x58002000

080006fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_USART1_UART_Init+0x94>)
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <MX_USART1_UART_Init+0x98>)
 8000704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_USART1_UART_Init+0x94>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_USART1_UART_Init+0x94>)
 8000710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000714:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_USART1_UART_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_USART1_UART_Init+0x94>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_USART1_UART_Init+0x94>)
 8000724:	220c      	movs	r2, #12
 8000726:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_USART1_UART_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_USART1_UART_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_USART1_UART_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_USART1_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_USART1_UART_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <MX_USART1_UART_Init+0x94>)
 8000748:	f002 ff19 	bl	800357e <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000752:	f000 f891 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000756:	2100      	movs	r1, #0
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <MX_USART1_UART_Init+0x94>)
 800075a:	f003 fb55 	bl	8003e08 <HAL_UARTEx_SetTxFifoThreshold>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000764:	f000 f888 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	4809      	ldr	r0, [pc, #36]	; (8000790 <MX_USART1_UART_Init+0x94>)
 800076c:	f003 fb8a 	bl	8003e84 <HAL_UARTEx_SetRxFifoThreshold>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000776:	f000 f87f 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART1_UART_Init+0x94>)
 800077c:	f003 fb0b 	bl	8003d96 <HAL_UARTEx_DisableFifoMode>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000786:	f000 f877 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000230 	.word	0x20000230
 8000794:	40013800 	.word	0x40013800

08000798 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USB_PCD_Init+0x48>)
 800079e:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <MX_USB_PCD_Init+0x4c>)
 80007a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USB_PCD_Init+0x48>)
 80007a4:	2208      	movs	r2, #8
 80007a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_USB_PCD_Init+0x48>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USB_PCD_Init+0x48>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_USB_PCD_Init+0x48>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USB_PCD_Init+0x48>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_USB_PCD_Init+0x48>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USB_PCD_Init+0x48>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_USB_PCD_Init+0x48>)
 80007ce:	f000 fcdd 	bl	800118c <HAL_PCD_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007d8:	f000 f84e 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000034c 	.word	0x2000034c
 80007e4:	40006800 	.word	0x40006800

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	2004      	movs	r0, #4
 80007fe:	f7ff fe4f 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2002      	movs	r0, #2
 8000804:	f7ff fe4c 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff fe49 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2008      	movs	r0, #8
 8000810:	f7ff fe46 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2123      	movs	r1, #35	; 0x23
 8000818:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_GPIO_Init+0x84>)
 800081a:	f000 fc9f 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081e:	2310      	movs	r3, #16
 8000820:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4810      	ldr	r0, [pc, #64]	; (8000870 <MX_GPIO_Init+0x88>)
 8000830:	f000 fb24 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000834:	2323      	movs	r3, #35	; 0x23
 8000836:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4619      	mov	r1, r3
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <MX_GPIO_Init+0x84>)
 800084a:	f000 fb17 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800084e:	2303      	movs	r3, #3
 8000850:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4619      	mov	r1, r3
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_GPIO_Init+0x8c>)
 8000860:	f000 fb0c 	bl	8000e7c <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	48000400 	.word	0x48000400
 8000870:	48000800 	.word	0x48000800
 8000874:	48000c00 	.word	0x48000c00

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>

08000882 <LL_AHB2_GRP1_EnableClock>:
{
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4313      	orrs	r3, r2
 8000898:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80008cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d8:	68fb      	ldr	r3, [r7, #12]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b085      	sub	sp, #20
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000902:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4013      	ands	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000924:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4313      	orrs	r3, r2
 800092e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000934:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093c:	68fb      	ldr	r3, [r7, #12]
}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a05      	ldr	r2, [pc, #20]	; (800097c <HAL_PKA_MspInit+0x24>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d103      	bne.n	8000972 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800096a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800096e:	f7ff ffa1 	bl	80008b4 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	58002000 	.word	0x58002000

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_UART_MspInit+0x58>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d116      	bne.n	80009d0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009a6:	f7ff ffb7 	bl	8000918 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2002      	movs	r0, #2
 80009ac:	f7ff ff69 	bl	8000882 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80009b0:	23c0      	movs	r3, #192	; 0xc0
 80009b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009c0:	2307      	movs	r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <HAL_UART_MspInit+0x5c>)
 80009cc:	f000 fa56 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40013800 	.word	0x40013800
 80009dc:	48000400 	.word	0x48000400

080009e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_PCD_MspInit+0x5c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d118      	bne.n	8000a34 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2001      	movs	r0, #1
 8000a04:	f7ff ff3d 	bl	8000882 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f000 fa28 	bl	8000e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a2c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000a30:	f7ff ff59 	bl	80008e6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40006800 	.word	0x40006800

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f8e6 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000a98:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <SystemInit+0x98>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <SystemInit+0x98>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000abc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ac0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <SystemInit+0x9c>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ade:	f023 0305 	bic.w	r3, r3, #5
 8000ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000af2:	f023 0301 	bic.w	r3, r3, #1
 8000af6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000afe:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <SystemInit+0xa0>)
 8000b00:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <SystemInit+0xa0>)
 8000b08:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	faf6fefb 	.word	0xfaf6fefb
 8000b34:	22041000 	.word	0x22041000

08000b38 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000b38:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3c:	3304      	adds	r3, #4

08000b3e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b40:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000b42:	d3f9      	bcc.n	8000b38 <CopyDataInit>
  bx lr
 8000b44:	4770      	bx	lr

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000b46:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000b48:	3004      	adds	r0, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000b4a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>
  bx lr
 8000b4e:	4770      	bx	lr

08000b50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b54:	f7ff ff9e 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <LoopForever+0x8>)
 8000b5a:	490c      	ldr	r1, [pc, #48]	; (8000b8c <LoopForever+0xc>)
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <LoopForever+0x10>)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f7ff ffed 	bl	8000b3e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <LoopForever+0x14>)
 8000b66:	490c      	ldr	r1, [pc, #48]	; (8000b98 <LoopForever+0x18>)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f7ff ffee 	bl	8000b4a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000b6e:	480b      	ldr	r0, [pc, #44]	; (8000b9c <LoopForever+0x1c>)
 8000b70:	490b      	ldr	r1, [pc, #44]	; (8000ba0 <LoopForever+0x20>)
 8000b72:	2300      	movs	r3, #0
 8000b74:	f7ff ffe9 	bl	8000b4a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b78:	f003 fa4c 	bl	8004014 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000b7c:	f7ff fcaa 	bl	80004d4 <main>

08000b80 <LoopForever>:

LoopForever:
  b LoopForever
 8000b80:	e7fe      	b.n	8000b80 <LoopForever>
 8000b82:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000b84:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000b88:	20000004 	.word	0x20000004
 8000b8c:	20000194 	.word	0x20000194
 8000b90:	08004188 	.word	0x08004188
  INIT_BSS _sbss, _ebss
 8000b94:	20000194 	.word	0x20000194
 8000b98:	20000644 	.word	0x20000644
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000b9c:	20030000 	.word	0x20030000
 8000ba0:	20030000 	.word	0x20030000

08000ba4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_Init+0x3c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <HAL_Init+0x3c>)
 8000bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 f92a 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 f80f 	bl	8000be8 <HAL_InitTick>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	e001      	b.n	8000bda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd6:	f7ff feb8 	bl	800094a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	58004000 	.word	0x58004000

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_InitTick+0x6c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d024      	beq.n	8000c46 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bfc:	f001 ff6e 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 8000c00:	4602      	mov	r2, r0
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_InitTick+0x6c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4619      	mov	r1, r3
 8000c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f924 	bl	8000e62 <HAL_SYSTICK_Config>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10f      	bne.n	8000c40 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b0f      	cmp	r3, #15
 8000c24:	d809      	bhi.n	8000c3a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c26:	2200      	movs	r2, #0
 8000c28:	6879      	ldr	r1, [r7, #4]
 8000c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2e:	f000 f8fe 	bl	8000e2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c32:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <HAL_InitTick+0x70>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e007      	b.n	8000c4a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
 8000c3e:	e004      	b.n	8000c4a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e001      	b.n	8000c4a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000190 	.word	0x20000190
 8000c58:	2000018c 	.word	0x2000018c

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000190 	.word	0x20000190
 8000c80:	20000640 	.word	0x20000640

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000640 	.word	0x20000640

08000c9c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTickPrio+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2000018c 	.word	0x2000018c

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f7ff ff8e 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff47 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff5e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff90 	bl	8000d6c <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5f 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffb2 	bl	8000dd4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	e14c      	b.n	8001126 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 813e 	beq.w	8001120 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d005      	beq.n	8000ebc <HAL_GPIO_Init+0x40>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d130      	bne.n	8000f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 0201 	and.w	r2, r3, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d017      	beq.n	8000f5a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d123      	bne.n	8000fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	6939      	ldr	r1, [r7, #16]
 8000faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0203 	and.w	r2, r3, #3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8098 	beq.w	8001120 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff0:	4a54      	ldr	r2, [pc, #336]	; (8001144 <HAL_GPIO_Init+0x2c8>)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800101a:	d019      	beq.n	8001050 <HAL_GPIO_Init+0x1d4>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <HAL_GPIO_Init+0x2cc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d013      	beq.n	800104c <HAL_GPIO_Init+0x1d0>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a49      	ldr	r2, [pc, #292]	; (800114c <HAL_GPIO_Init+0x2d0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1cc>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a48      	ldr	r2, [pc, #288]	; (8001150 <HAL_GPIO_Init+0x2d4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1c8>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a47      	ldr	r2, [pc, #284]	; (8001154 <HAL_GPIO_Init+0x2d8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1c4>
 800103c:	2304      	movs	r3, #4
 800103e:	e008      	b.n	8001052 <HAL_GPIO_Init+0x1d6>
 8001040:	2307      	movs	r3, #7
 8001042:	e006      	b.n	8001052 <HAL_GPIO_Init+0x1d6>
 8001044:	2303      	movs	r3, #3
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x1d6>
 8001048:	2302      	movs	r3, #2
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x1d6>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x1d6>
 8001050:	2300      	movs	r3, #0
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001062:	4938      	ldr	r1, [pc, #224]	; (8001144 <HAL_GPIO_Init+0x2c8>)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <HAL_GPIO_Init+0x2dc>)
 8001072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001096:	4a30      	ldr	r2, [pc, #192]	; (8001158 <HAL_GPIO_Init+0x2dc>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800109e:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <HAL_GPIO_Init+0x2dc>)
 80010a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c4:	4a24      	ldr	r2, [pc, #144]	; (8001158 <HAL_GPIO_Init+0x2dc>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <HAL_GPIO_Init+0x2dc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_GPIO_Init+0x2dc>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_GPIO_Init+0x2dc>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <HAL_GPIO_Init+0x2dc>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	f47f aeab 	bne.w	8000e8c <HAL_GPIO_Init+0x10>
  }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40010000 	.word	0x40010000
 8001148:	48000400 	.word	0x48000400
 800114c:	48000800 	.word	0x48000800
 8001150:	48000c00 	.word	0x48000c00
 8001154:	48001000 	.word	0x48001000
 8001158:	58000800 	.word	0x58000800

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001178:	e002      	b.n	8001180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	b08b      	sub	sp, #44	; 0x2c
 8001190:	af06      	add	r7, sp, #24
 8001192:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0d7      	b.n	800134e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d106      	bne.n	80011b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fc14 	bl	80009e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2203      	movs	r2, #3
 80011bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fee9 	bl	8003f9c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e04c      	b.n	800126a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	3301      	adds	r3, #1
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	b298      	uxth	r0, r3
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	3336      	adds	r3, #54	; 0x36
 800120e:	4602      	mov	r2, r0
 8001210:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	440b      	add	r3, r1
 8001222:	3303      	adds	r3, #3
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	3338      	adds	r3, #56	; 0x38
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	333c      	adds	r3, #60	; 0x3c
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	3340      	adds	r3, #64	; 0x40
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	3301      	adds	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3ad      	bcc.n	80011d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e044      	b.n	8001304 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	f203 1369 	addw	r3, r3, #361	; 0x169
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	440b      	add	r3, r1
 80012b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d3b5      	bcc.n	800127a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	687e      	ldr	r6, [r7, #4]
 8001316:	466d      	mov	r5, sp
 8001318:	f106 0410 	add.w	r4, r6, #16
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	602b      	str	r3, [r5, #0]
 8001324:	1d33      	adds	r3, r6, #4
 8001326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f002 fe52 	bl	8003fd2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d102      	bne.n	800134c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f805 	bl	8001356 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001356 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800137a:	b29b      	uxth	r3, r3
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	b29a      	uxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800138e:	b29b      	uxth	r3, r3
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	b29a      	uxth	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01d      	beq.n	80013f8 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	791b      	ldrb	r3, [r3, #4]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fac6 	bl	8000958 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 80013e8:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	711a      	strb	r2, [r3, #4]
 80013f6:	e001      	b.n	80013fc <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_PKA_ModExp>:
  * @param  in Input information
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_ModExp(PKA_HandleTypeDef *hpka, PKA_ModExpInTypeDef *in, uint32_t Timeout)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
  /* Set input parameter in PKA RAM */
  PKA_ModExp_Set(hpka, in);
 8001412:	68b9      	ldr	r1, [r7, #8]
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 fa32 	bl	800187e <PKA_ModExp_Set>

  /* Start the operation */
  return PKA_Process(hpka, PKA_MODE_MODULAR_EXP, Timeout);
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	2100      	movs	r1, #0
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 f9c1 	bl	80017a6 <PKA_Process>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_PKA_ModExp_GetResult>:
  * @param  hpka PKA handle
  * @param  pRes Output buffer
  * @retval HAL status
  */
void HAL_PKA_ModExp_GetResult(PKA_HandleTypeDef *hpka, uint8_t *pRes)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
  uint32_t size;

  /* Indicate to the user the final size */
  size = (hpka->Instance->RAM[PKA_MODULAR_EXP_IN_OP_NB_BITS] + 7UL) / 8UL;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001440:	3307      	adds	r3, #7
 8001442:	08db      	lsrs	r3, r3, #3
 8001444:	60fb      	str	r3, [r7, #12]

  /* Move the result to appropriate location (indicated in out parameter) */
  PKA_Memcpy_u32_to_u8(pRes, &hpka->Instance->RAM[PKA_MODULAR_EXP_OUT_SM_ALGO_ACC1], size);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4619      	mov	r1, r3
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f000 f867 	bl	8001526 <PKA_Memcpy_u32_to_u8>
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <PKA_PollEndOfOperation>:
  * @param  Timeout Timeout duration in millisecond.
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_PollEndOfOperation(PKA_HandleTypeDef *hpka, uint32_t Timeout, uint32_t Tickstart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  /* Wait for the end of operation or timeout */
  while ((hpka->Instance->SR & PKA_SR_PROCENDF) == 0UL)
 800146c:	e010      	b.n	8001490 <PKA_PollEndOfOperation+0x30>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001474:	d00c      	beq.n	8001490 <PKA_PollEndOfOperation+0x30>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0UL))
 8001476:	f7ff fc05 	bl	8000c84 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	429a      	cmp	r2, r3
 8001484:	d302      	bcc.n	800148c <PKA_PollEndOfOperation+0x2c>
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <PKA_PollEndOfOperation+0x30>
      {
        return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e007      	b.n	80014a0 <PKA_PollEndOfOperation+0x40>
  while ((hpka->Instance->SR & PKA_SR_PROCENDF) == 0UL)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0e7      	beq.n	800146e <PKA_PollEndOfOperation+0xe>
      }
    }
  }
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <PKA_CheckError>:
  * @param  hpka PKA handle
  * @param  mode PKA operating mode
  * @retval error code
  */
uint32_t PKA_CheckError(PKA_HandleTypeDef *hpka, uint32_t mode)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t err = HAL_PKA_ERROR_NONE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Check RAMERR error */
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_RAMERR) == SET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014c4:	d103      	bne.n	80014ce <PKA_CheckError+0x26>
  {
    err |= HAL_PKA_ERROR_RAMERR;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  /* Check ADDRERR error */
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_ADDRERR) == SET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014dc:	d103      	bne.n	80014e6 <PKA_CheckError+0x3e>
  {
    err |= HAL_PKA_ERROR_ADDRERR;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2b24      	cmp	r3, #36	; 0x24
 80014ea:	d109      	bne.n	8001500 <PKA_CheckError+0x58>
  {
#define EDCSA_SIGN_NOERROR 0UL
    /* If error output result is different from no error, ecsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != EDCSA_SIGN_NOERROR)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8d3 3ee8 	ldr.w	r3, [r3, #3816]	; 0xee8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <PKA_CheckError+0x58>
    {
      err |= HAL_PKA_ERROR_OPERATION;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return err;
 8001500:	68fb      	ldr	r3, [r7, #12]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PKA_GetBitSize_u8>:
/**
  * @brief  Get number of bits inside an array of u8.
  * @param  byteNumber Number of u8 inside the array
  */
uint32_t PKA_GetBitSize_u8(uint32_t byteNumber)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* Convert from number of uint8_t in an array to the associated number of bits in this array */
  return byteNumber * 8UL;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	00db      	lsls	r3, r3, #3
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <PKA_Memcpy_u32_to_u8>:
  * @param  src Pointer to source
  * @param  n Number of uint8_t to copy
  * @retval dst
  */
void PKA_Memcpy_u32_to_u8(uint8_t dst[], __IO const uint32_t src[], size_t n)
{
 8001526:	b480      	push	{r7}
 8001528:	b087      	sub	sp, #28
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
  if (dst != NULL)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 808a 	beq.w	800164e <PKA_Memcpy_u32_to_u8+0x128>
  {
    if (src != NULL)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8086 	beq.w	800164e <PKA_Memcpy_u32_to_u8+0x128>
    {
      uint32_t index_uint32_t = 0UL; /* This index is used outside of the loop */
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]

      for (; index_uint32_t < (n / 4UL); index_uint32_t++)
 8001546:	e036      	b.n	80015b6 <PKA_Memcpy_u32_to_u8+0x90>
      {
        /* Avoid casting from uint8_t* to uint32_t* by copying 4 uint8_t in a row */
        /* Apply __REV equivalent */
        uint32_t index_uint8_t = n - 4UL - (index_uint32_t * 4UL);
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	3b04      	subs	r3, #4
 8001552:	613b      	str	r3, [r7, #16]
        dst[index_uint8_t + 3UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	4413      	add	r3, r2
 800155c:	6819      	ldr	r1, [r3, #0]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	3303      	adds	r3, #3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4413      	add	r3, r2
 8001566:	b2ca      	uxtb	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
        dst[index_uint8_t + 2UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	4413      	add	r3, r2
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0a19      	lsrs	r1, r3, #8
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3302      	adds	r3, #2
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4413      	add	r3, r2
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
        dst[index_uint8_t + 1UL] = (uint8_t)((src[index_uint32_t] & 0x00FF0000U) >> 16UL);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	4413      	add	r3, r2
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0c19      	lsrs	r1, r3, #16
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3301      	adds	r3, #1
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4413      	add	r3, r2
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
        dst[index_uint8_t + 0UL] = (uint8_t)((src[index_uint32_t] & 0xFF000000U) >> 24UL);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0e19      	lsrs	r1, r3, #24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4413      	add	r3, r2
 80015ac:	b2ca      	uxtb	r2, r1
 80015ae:	701a      	strb	r2, [r3, #0]
      for (; index_uint32_t < (n / 4UL); index_uint32_t++)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d3c3      	bcc.n	8001548 <PKA_Memcpy_u32_to_u8+0x22>
      }

      /* Manage the buffers not aligned on uint32_t */
      if ((n % 4UL) == 1UL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <PKA_Memcpy_u32_to_u8+0xb6>
      {
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4413      	add	r3, r2
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	701a      	strb	r2, [r3, #0]
      {
        /* The last element is already handle in the loop */
      }
    }
  }
}
 80015da:	e038      	b.n	800164e <PKA_Memcpy_u32_to_u8+0x128>
      else if ((n % 4UL) == 2UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d112      	bne.n	800160c <PKA_Memcpy_u32_to_u8+0xe6>
        dst[1UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	4413      	add	r3, r2
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3301      	adds	r3, #1
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	701a      	strb	r2, [r3, #0]
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	b2da      	uxtb	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	e020      	b.n	800164e <PKA_Memcpy_u32_to_u8+0x128>
      else if ((n % 4UL) == 3UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b03      	cmp	r3, #3
 8001614:	d11b      	bne.n	800164e <PKA_Memcpy_u32_to_u8+0x128>
        dst[2UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	4413      	add	r3, r2
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3302      	adds	r3, #2
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	701a      	strb	r2, [r3, #0]
        dst[1UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	4413      	add	r3, r2
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	0a1a      	lsrs	r2, r3, #8
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x00FF0000U) >> 16UL);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	4413      	add	r3, r2
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	b2da      	uxtb	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	701a      	strb	r2, [r3, #0]
}
 800164e:	bf00      	nop
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <PKA_Memcpy_u8_to_u32>:
  * @param  src Pointer to source
  * @param  n Number of uint8_t to copy (must be multiple of 4)
  * @retval dst
  */
void PKA_Memcpy_u8_to_u32(__IO uint32_t dst[], const uint8_t src[], size_t n)
{
 800165a:	b480      	push	{r7}
 800165c:	b087      	sub	sp, #28
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
  if (dst != NULL)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8096 	beq.w	800179a <PKA_Memcpy_u8_to_u32+0x140>
  {
    if (src != NULL)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 8092 	beq.w	800179a <PKA_Memcpy_u8_to_u32+0x140>
    {
      uint32_t index = 0UL; /* This index is used outside of the loop */
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]

      for (; index < (n / 4UL); index++)
 800167a:	e030      	b.n	80016de <PKA_Memcpy_u8_to_u32+0x84>
      {
        /* Apply the equivalent of __REV from uint8_t to uint32_t */
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	3b01      	subs	r3, #1
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	4413      	add	r3, r2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	3b02      	subs	r3, #2
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	ea41 0203 	orr.w	r2, r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	1acb      	subs	r3, r1, r3
 80016ac:	3b03      	subs	r3, #3
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	440b      	add	r3, r1
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	ea42 0103 	orr.w	r1, r2, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	3b04      	subs	r3, #4
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	061a      	lsls	r2, r3, #24
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	4403      	add	r3, r0
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
 80016d4:	430a      	orrs	r2, r1
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 80016d6:	601a      	str	r2, [r3, #0]
      for (; index < (n / 4UL); index++)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d3c9      	bcc.n	800167c <PKA_Memcpy_u8_to_u32+0x22>
      }

      /* Manage the buffers not aligned on uint32_t */
      if ((n % 4UL) == 1UL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10e      	bne.n	8001710 <PKA_Memcpy_u8_to_u32+0xb6>
      {
        dst[index] = (uint32_t)src[(n - (index * 4UL) - 1UL)];
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	4413      	add	r3, r2
 8001700:	7819      	ldrb	r1, [r3, #0]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	460a      	mov	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
      {
        /* The last element is already handle in the loop */
      }
    }
  }
}
 800170e:	e044      	b.n	800179a <PKA_Memcpy_u8_to_u32+0x140>
      else if ((n % 4UL) == 2UL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d118      	bne.n	800174c <PKA_Memcpy_u8_to_u32+0xf2>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	4413      	add	r3, r2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	3b02      	subs	r3, #2
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	021a      	lsls	r2, r3, #8
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	440b      	add	r3, r1
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 8001746:	4302      	orrs	r2, r0
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	e026      	b.n	800179a <PKA_Memcpy_u8_to_u32+0x140>
      else if ((n % 4UL) == 3UL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b03      	cmp	r3, #3
 8001754:	d121      	bne.n	800179a <PKA_Memcpy_u8_to_u32+0x140>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	3b02      	subs	r3, #2
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	4319      	orrs	r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	3b03      	subs	r3, #3
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	041a      	lsls	r2, r3, #16
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	4403      	add	r3, r0
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 8001796:	430a      	orrs	r2, r1
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <PKA_Process>:
  * @param  mode PKA operation
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_Process(PKA_HandleTypeDef *hpka, uint32_t mode, uint32_t Timeout)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;

  if (hpka->State == HAL_PKA_STATE_READY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	791b      	ldrb	r3, [r3, #4]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d157      	bne.n	8001870 <PKA_Process+0xca>
  {
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2202      	movs	r2, #2
 80017c4:	711a      	strb	r2, [r3, #4]

    /* Clear any pending error */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017cc:	f7ff fa5a 	bl	8000c84 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

    /* Set the mode and deactivate the interrupts */
    MODIFY_REG(hpka->Instance->CR, PKA_CR_MODE | PKA_CR_PROCENDIE | PKA_CR_RAMERRIE | PKA_CR_ADDRERRIE, mode << PKA_CR_MODE_Pos);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f423 13d1 	bic.w	r3, r3, #1712128	; 0x1a2000
 80017dc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	0211      	lsls	r1, r2, #8
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6013      	str	r3, [r2, #0]

    /* Start the computation */
    hpka->Instance->CR |= PKA_CR_START;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0202 	orr.w	r2, r2, #2
 80017fa:	601a      	str	r2, [r3, #0]

    /* Wait for the end of operation or timeout */
    if (PKA_PollEndOfOperation(hpka, Timeout, tickstart) != HAL_OK)
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff fe2d 	bl	8001460 <PKA_PollEndOfOperation>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d015      	beq.n	8001838 <PKA_Process+0x92>
    {
      /* Abort any ongoing operation */
      CLEAR_BIT(hpka->Instance->CR, PKA_CR_EN);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

      hpka->ErrorCode |= HAL_PKA_ERROR_TIMEOUT;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f043 0204 	orr.w	r2, r3, #4
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	609a      	str	r2, [r3, #8]

      /* Make ready for the next operation */
      SET_BIT(hpka->Instance->CR, PKA_CR_EN);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
    }

    /* Check error */
    hpka->ErrorCode |= PKA_CheckError(hpka, mode);
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f7ff fe34 	bl	80014a8 <PKA_CheckError>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	431a      	orrs	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	609a      	str	r2, [r3, #8]

    /* Clear all flags */
    hpka->Instance->CLRFR |= (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 800185a:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	711a      	strb	r2, [r3, #4]

    /* Manage the result based on encountered errors */
    if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <PKA_Process+0xce>
    {
      err = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
 800186e:	e001      	b.n	8001874 <PKA_Process+0xce>
    }
  }
  else
  {
    err = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	75fb      	strb	r3, [r7, #23]
  }
  return err;
 8001874:	7dfb      	ldrb	r3, [r7, #23]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <PKA_ModExp_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_ModExp_Set(PKA_HandleTypeDef *hpka, PKA_ModExpInTypeDef *in)
{
 800187e:	b590      	push	{r4, r7, lr}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  /* Get the number of bit per operand */
  hpka->Instance->RAM[PKA_MODULAR_EXP_IN_OP_NB_BITS] = PKA_GetBitSize_u8(in->OpSize);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681c      	ldr	r4, [r3, #0]
 8001890:	4610      	mov	r0, r2
 8001892:	f7ff fe3c 	bl	800150e <PKA_GetBitSize_u8>
 8001896:	4603      	mov	r3, r0
 8001898:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404

  /* Get the number of bit of the exponent */
  hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXP_NB_BITS] = PKA_GetBitSize_u8(in->expSize);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681c      	ldr	r4, [r3, #0]
 80018a4:	4610      	mov	r0, r2
 80018a6:	f7ff fe32 	bl	800150e <PKA_GetBitSize_u8>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400

  /* Move the input parameters pOp1 to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXPONENT_BASE], in->pOp1, in->OpSize);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f603 2044 	addw	r0, r3, #2628	; 0xa44
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68d9      	ldr	r1, [r3, #12]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	461a      	mov	r2, r3
 80018c2:	f7ff feca 	bl	800165a <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_EXPONENT_BASE + (in->OpSize / 4UL));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	6852      	ldr	r2, [r2, #4]
 80018ce:	0892      	lsrs	r2, r2, #2
 80018d0:	f202 1291 	addw	r2, r2, #401	; 0x191
 80018d4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80018d8:	2100      	movs	r1, #0
 80018da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Move the exponent to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXPONENT], in->pExp, in->expSize);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f503 603d 	add.w	r0, r3, #3024	; 0xbd0
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6899      	ldr	r1, [r3, #8]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	f7ff feb3 	bl	800165a <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_EXPONENT + (in->expSize / 4UL));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	0892      	lsrs	r2, r2, #2
 80018fe:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8001902:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001906:	2100      	movs	r1, #0
 8001908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Move the modulus to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_MODULUS], in->pMod, in->OpSize);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f603 505c 	addw	r0, r3, #3420	; 0xd5c
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6919      	ldr	r1, [r3, #16]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	461a      	mov	r2, r3
 800191e:	f7ff fe9c 	bl	800165a <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_MODULUS + (in->OpSize / 4UL));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	6852      	ldr	r2, [r2, #4]
 800192a:	0892      	lsrs	r2, r2, #2
 800192c:	f202 2257 	addw	r2, r2, #599	; 0x257
 8001930:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001934:	2100      	movs	r1, #0
 8001936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bd90      	pop	{r4, r7, pc}
	...

08001944 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	58000400 	.word	0x58000400

08001964 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <HAL_PWREx_GetVoltageRange+0x18>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	58000400 	.word	0x58000400

08001980 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001992:	d101      	bne.n	8001998 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_RCC_HSE_Enable>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_RCC_HSE_Disable>:
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_RCC_HSE_IsReady>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019f2:	d101      	bne.n	80019f8 <LL_RCC_HSE_IsReady+0x18>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <LL_RCC_HSE_IsReady+0x1a>
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_RCC_HSI_Enable>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_RCC_HSI_Disable>:
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_RCC_HSI_IsReady>:
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a52:	d101      	bne.n	8001a58 <LL_RCC_HSI_IsReady+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_RCC_HSI_IsReady+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_RCC_HSI48_Enable>:
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_RCC_HSI48_Disable>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_RCC_HSI48_IsReady>:
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d101      	bne.n	8001aea <LL_RCC_HSI48_IsReady+0x18>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_RCC_HSI48_IsReady+0x1a>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_LSE_Enable>:
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_RCC_LSE_Disable>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_RCC_LSE_EnableBypass>:
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_RCC_LSE_DisableBypass>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d101      	bne.n	8001b96 <LL_RCC_LSE_IsReady+0x18>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_RCC_LSE_IsReady+0x1a>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d101      	bne.n	8001bfe <LL_RCC_LSI1_IsReady+0x18>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <LL_RCC_LSI1_IsReady+0x1a>
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d101      	bne.n	8001c66 <LL_RCC_LSI2_IsReady+0x18>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <LL_RCC_LSI2_IsReady+0x1a>
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6013      	str	r3, [r2, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d101      	bne.n	8001cf2 <LL_RCC_MSI_IsReady+0x16>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <LL_RCC_MSI_IsReady+0x18>
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d36:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2bb0      	cmp	r3, #176	; 0xb0
 8001d3c:	d901      	bls.n	8001d42 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001d3e:	23b0      	movs	r3, #176	; 0xb0
 8001d40:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001d42:	687b      	ldr	r3, [r7, #4]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 0203 	bic.w	r2, r3, #3
 8001d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001df2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e1e:	f023 020f 	bic.w	r2, r3, #15
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f20:	6013      	str	r3, [r2, #0]
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f3e:	d101      	bne.n	8001f44 <LL_RCC_PLL_IsReady+0x18>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <LL_RCC_PLL_IsReady+0x1a>
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc4:	d101      	bne.n	8001fca <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fea:	d101      	bne.n	8001ff0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d101      	bne.n	8002016 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002034:	d101      	bne.n	800203a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002058:	d101      	bne.n	800205e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b08d      	sub	sp, #52	; 0x34
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e37e      	b.n	800277c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8092 	beq.w	80021b0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208c:	f7ff fe89 	bl	8001da2 <LL_RCC_GetSysClkSource>
 8002090:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002092:	f7ff ff82 	bl	8001f9a <LL_RCC_PLL_GetMainSource>
 8002096:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x3e>
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	d14c      	bne.n	800213e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d149      	bne.n	800213e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020aa:	f7ff fe17 	bl	8001cdc <LL_RCC_MSI_IsReady>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_OscConfig+0x54>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e35d      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020c4:	f7ff fe2f 	bl	8001d26 <LL_RCC_MSI_GetRange>
 80020c8:	4603      	mov	r3, r0
 80020ca:	429c      	cmp	r4, r3
 80020cc:	d914      	bls.n	80020f8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fd42 	bl	8002b5c <RCC_SetFlashLatencyFromMSIRange>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e34c      	b.n	800277c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fe09 	bl	8001cfe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fe2d 	bl	8001d50 <LL_RCC_MSI_SetCalibTrimming>
 80020f6:	e013      	b.n	8002120 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fdfe 	bl	8001cfe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fe22 	bl	8001d50 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fd23 	bl	8002b5c <RCC_SetFlashLatencyFromMSIRange>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e32d      	b.n	800277c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002120:	f000 fcdc 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 8002124:	4603      	mov	r3, r0
 8002126:	4ab3      	ldr	r2, [pc, #716]	; (80023f4 <HAL_RCC_OscConfig+0x388>)
 8002128:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800212a:	4bb3      	ldr	r3, [pc, #716]	; (80023f8 <HAL_RCC_OscConfig+0x38c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fd5a 	bl	8000be8 <HAL_InitTick>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d039      	beq.n	80021ae <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e31e      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01e      	beq.n	8002184 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002146:	f7ff fdab 	bl	8001ca0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800214a:	f7fe fd9b 	bl	8000c84 <HAL_GetTick>
 800214e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002152:	f7fe fd97 	bl	8000c84 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e30b      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002164:	f7ff fdba 	bl	8001cdc <LL_RCC_MSI_IsReady>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f1      	beq.n	8002152 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fdc3 	bl	8001cfe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fde7 	bl	8001d50 <LL_RCC_MSI_SetCalibTrimming>
 8002182:	e015      	b.n	80021b0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002184:	f7ff fd9b 	bl	8001cbe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002188:	f7fe fd7c 	bl	8000c84 <HAL_GetTick>
 800218c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002190:	f7fe fd78 	bl	8000c84 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e2ec      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80021a2:	f7ff fd9b 	bl	8001cdc <LL_RCC_MSI_IsReady>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f1      	bne.n	8002190 <HAL_RCC_OscConfig+0x124>
 80021ac:	e000      	b.n	80021b0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ae:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d04e      	beq.n	800225a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021bc:	f7ff fdf1 	bl	8001da2 <LL_RCC_GetSysClkSource>
 80021c0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c2:	f7ff feea 	bl	8001f9a <LL_RCC_PLL_GetMainSource>
 80021c6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x16e>
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	d10d      	bne.n	80021f0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d10a      	bne.n	80021f0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021da:	f7ff fc01 	bl	80019e0 <LL_RCC_HSE_IsReady>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d039      	beq.n	8002258 <HAL_RCC_OscConfig+0x1ec>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d135      	bne.n	8002258 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e2c5      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_OscConfig+0x194>
 80021fa:	f7ff fbd3 	bl	80019a4 <LL_RCC_HSE_Enable>
 80021fe:	e001      	b.n	8002204 <HAL_RCC_OscConfig+0x198>
 8002200:	f7ff fbdf 	bl	80019c2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fd3a 	bl	8000c84 <HAL_GetTick>
 8002210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe fd36 	bl	8000c84 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e2aa      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002226:	f7ff fbdb 	bl	80019e0 <LL_RCC_HSE_IsReady>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f1      	beq.n	8002214 <HAL_RCC_OscConfig+0x1a8>
 8002230:	e013      	b.n	800225a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fd27 	bl	8000c84 <HAL_GetTick>
 8002236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223a:	f7fe fd23 	bl	8000c84 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e297      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800224c:	f7ff fbc8 	bl	80019e0 <LL_RCC_HSE_IsReady>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f1      	bne.n	800223a <HAL_RCC_OscConfig+0x1ce>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d051      	beq.n	800230a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002266:	f7ff fd9c 	bl	8001da2 <LL_RCC_GetSysClkSource>
 800226a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800226c:	f7ff fe95 	bl	8001f9a <LL_RCC_PLL_GetMainSource>
 8002270:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b04      	cmp	r3, #4
 8002276:	d005      	beq.n	8002284 <HAL_RCC_OscConfig+0x218>
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b0c      	cmp	r3, #12
 800227c:	d113      	bne.n	80022a6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d110      	bne.n	80022a6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002284:	f7ff fbdc 	bl	8001a40 <LL_RCC_HSI_IsReady>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_RCC_OscConfig+0x22e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e270      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fbe0 	bl	8001a64 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a4:	e031      	b.n	800230a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d019      	beq.n	80022e2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ae:	f7ff fba9 	bl	8001a04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe fce7 	bl	8000c84 <HAL_GetTick>
 80022b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ba:	f7fe fce3 	bl	8000c84 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e257      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022cc:	f7ff fbb8 	bl	8001a40 <LL_RCC_HSI_IsReady>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f1      	beq.n	80022ba <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fbc2 	bl	8001a64 <LL_RCC_HSI_SetCalibTrimming>
 80022e0:	e013      	b.n	800230a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	f7ff fb9e 	bl	8001a22 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fccd 	bl	8000c84 <HAL_GetTick>
 80022ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fcc9 	bl	8000c84 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e23d      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002300:	f7ff fb9e 	bl	8001a40 <LL_RCC_HSI_IsReady>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f1      	bne.n	80022ee <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80a3 	beq.w	800246a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d076      	beq.n	800241a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d046      	beq.n	80023c6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002338:	f7ff fc55 	bl	8001be6 <LL_RCC_LSI1_IsReady>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d113      	bne.n	800236a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002342:	f7ff fc2e 	bl	8001ba2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002346:	f7fe fc9d 	bl	8000c84 <HAL_GetTick>
 800234a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800234e:	f7fe fc99 	bl	8000c84 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e20d      	b.n	800277c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002360:	f7ff fc41 	bl	8001be6 <LL_RCC_LSI1_IsReady>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f1      	beq.n	800234e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800236a:	f7ff fc4e 	bl	8001c0a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7fe fc89 	bl	8000c84 <HAL_GetTick>
 8002372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002376:	f7fe fc85 	bl	8000c84 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b03      	cmp	r3, #3
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e1f9      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002388:	f7ff fc61 	bl	8001c4e <LL_RCC_LSI2_IsReady>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f1      	beq.n	8002376 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fc6b 	bl	8001c72 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800239c:	f7ff fc12 	bl	8001bc4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fc70 	bl	8000c84 <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023a8:	f7fe fc6c 	bl	8000c84 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1e0      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023ba:	f7ff fc14 	bl	8001be6 <LL_RCC_LSI1_IsReady>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f1      	bne.n	80023a8 <HAL_RCC_OscConfig+0x33c>
 80023c4:	e051      	b.n	800246a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80023c6:	f7ff fbec 	bl	8001ba2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fc5b 	bl	8000c84 <HAL_GetTick>
 80023ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023d2:	f7fe fc57 	bl	8000c84 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1cb      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023e4:	f7ff fbff 	bl	8001be6 <LL_RCC_LSI1_IsReady>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f1      	beq.n	80023d2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80023ee:	f7ff fc1d 	bl	8001c2c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023f2:	e00c      	b.n	800240e <HAL_RCC_OscConfig+0x3a2>
 80023f4:	20000188 	.word	0x20000188
 80023f8:	2000018c 	.word	0x2000018c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023fc:	f7fe fc42 	bl	8000c84 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b03      	cmp	r3, #3
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e1b6      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800240e:	f7ff fc1e 	bl	8001c4e <LL_RCC_LSI2_IsReady>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f1      	bne.n	80023fc <HAL_RCC_OscConfig+0x390>
 8002418:	e027      	b.n	800246a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800241a:	f7ff fc07 	bl	8001c2c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7fe fc31 	bl	8000c84 <HAL_GetTick>
 8002422:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002426:	f7fe fc2d 	bl	8000c84 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b03      	cmp	r3, #3
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e1a1      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002438:	f7ff fc09 	bl	8001c4e <LL_RCC_LSI2_IsReady>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f1      	bne.n	8002426 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002442:	f7ff fbbf 	bl	8001bc4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe fc1d 	bl	8000c84 <HAL_GetTick>
 800244a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800244e:	f7fe fc19 	bl	8000c84 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e18d      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002460:	f7ff fbc1 	bl	8001be6 <LL_RCC_LSI1_IsReady>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f1      	bne.n	800244e <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d05b      	beq.n	800252e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002476:	4bb5      	ldr	r3, [pc, #724]	; (800274c <HAL_RCC_OscConfig+0x6e0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d114      	bne.n	80024ac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002482:	f7ff fa5f 	bl	8001944 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002486:	f7fe fbfd 	bl	8000c84 <HAL_GetTick>
 800248a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248e:	f7fe fbf9 	bl	8000c84 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e16d      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a0:	4baa      	ldr	r3, [pc, #680]	; (800274c <HAL_RCC_OscConfig+0x6e0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_OscConfig+0x44e>
 80024b4:	f7ff fb1f 	bl	8001af6 <LL_RCC_LSE_Enable>
 80024b8:	e00c      	b.n	80024d4 <HAL_RCC_OscConfig+0x468>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d104      	bne.n	80024cc <HAL_RCC_OscConfig+0x460>
 80024c2:	f7ff fb3a 	bl	8001b3a <LL_RCC_LSE_EnableBypass>
 80024c6:	f7ff fb16 	bl	8001af6 <LL_RCC_LSE_Enable>
 80024ca:	e003      	b.n	80024d4 <HAL_RCC_OscConfig+0x468>
 80024cc:	f7ff fb24 	bl	8001b18 <LL_RCC_LSE_Disable>
 80024d0:	f7ff fb44 	bl	8001b5c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d014      	beq.n	8002506 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe fbd2 	bl	8000c84 <HAL_GetTick>
 80024e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7fe fbce 	bl	8000c84 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e140      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80024fa:	f7ff fb40 	bl	8001b7e <LL_RCC_LSE_IsReady>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ef      	beq.n	80024e4 <HAL_RCC_OscConfig+0x478>
 8002504:	e013      	b.n	800252e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7fe fbbd 	bl	8000c84 <HAL_GetTick>
 800250a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fbb9 	bl	8000c84 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e12b      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002524:	f7ff fb2b 	bl	8001b7e <LL_RCC_LSE_IsReady>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ef      	bne.n	800250e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d02c      	beq.n	8002594 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	2b00      	cmp	r3, #0
 8002540:	d014      	beq.n	800256c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002542:	f7ff faa4 	bl	8001a8e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7fe fb9d 	bl	8000c84 <HAL_GetTick>
 800254a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800254e:	f7fe fb99 	bl	8000c84 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e10d      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002560:	f7ff fab7 	bl	8001ad2 <LL_RCC_HSI48_IsReady>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f1      	beq.n	800254e <HAL_RCC_OscConfig+0x4e2>
 800256a:	e013      	b.n	8002594 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800256c:	f7ff faa0 	bl	8001ab0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fb88 	bl	8000c84 <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002578:	f7fe fb84 	bl	8000c84 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0f8      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800258a:	f7ff faa2 	bl	8001ad2 <LL_RCC_HSI48_IsReady>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f1      	bne.n	8002578 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80ee 	beq.w	800277a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259e:	f7ff fc00 	bl	8001da2 <LL_RCC_GetSysClkSource>
 80025a2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80025a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	f040 80af 	bne.w	8002714 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d123      	bne.n	800260c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d114      	bne.n	800260c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d10d      	bne.n	800260c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d106      	bne.n	800260c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d05d      	beq.n	80026c8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d058      	beq.n	80026c4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0ab      	b.n	800277c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002624:	f7ff fc73 	bl	8001f0e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002628:	f7fe fb2c 	bl	8000c84 <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7fe fb28 	bl	8000c84 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e09c      	b.n	800277c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ef      	bne.n	8002630 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <HAL_RCC_OscConfig+0x6e4>)
 8002658:	4013      	ands	r3, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002668:	0212      	lsls	r2, r2, #8
 800266a:	4311      	orrs	r1, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002670:	4311      	orrs	r1, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800267c:	430a      	orrs	r2, r1
 800267e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002682:	4313      	orrs	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002686:	f7ff fc33 	bl	8001ef0 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800269a:	f7fe faf3 	bl	8000c84 <HAL_GetTick>
 800269e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe faef 	bl	8000c84 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e063      	b.n	800277c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0ef      	beq.n	80026a2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c2:	e05a      	b.n	800277a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e059      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d151      	bne.n	800277a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026d6:	f7ff fc0b 	bl	8001ef0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026ea:	f7fe facb 	bl	8000c84 <HAL_GetTick>
 80026ee:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe fac7 	bl	8000c84 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e03b      	b.n	800277c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0ef      	beq.n	80026f2 <HAL_RCC_OscConfig+0x686>
 8002712:	e032      	b.n	800277a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d02d      	beq.n	8002776 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	f7ff fbf8 	bl	8001f0e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800271e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002728:	f023 0303 	bic.w	r3, r3, #3
 800272c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002738:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800273c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002740:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe fa9f 	bl	8000c84 <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002748:	e00d      	b.n	8002766 <HAL_RCC_OscConfig+0x6fa>
 800274a:	bf00      	nop
 800274c:	58000400 	.word	0x58000400
 8002750:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe fa96 	bl	8000c84 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ef      	bne.n	8002754 <HAL_RCC_OscConfig+0x6e8>
 8002774:	e001      	b.n	800277a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3734      	adds	r7, #52	; 0x34
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}

08002784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e12d      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002798:	4b98      	ldr	r3, [pc, #608]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d91b      	bls.n	80027de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b95      	ldr	r3, [pc, #596]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	4993      	ldr	r1, [pc, #588]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b6:	f7fe fa65 	bl	8000c84 <HAL_GetTick>
 80027ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027be:	f7fe fa61 	bl	8000c84 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e111      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d0:	4b8a      	ldr	r3, [pc, #552]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d1ef      	bne.n	80027be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fae3 	bl	8001dba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fa46 	bl	8000c84 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027fc:	f7fe fa42 	bl	8000c84 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0f2      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800280e:	f7ff fbd0 	bl	8001fb2 <LL_RCC_IsActiveFlag_HPRE>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f1      	beq.n	80027fc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d016      	beq.n	8002852 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fada 	bl	8001de2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800282e:	f7fe fa29 	bl	8000c84 <HAL_GetTick>
 8002832:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002836:	f7fe fa25 	bl	8000c84 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0d5      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002848:	f7ff fbc5 	bl	8001fd6 <LL_RCC_IsActiveFlag_C2HPRE>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f1      	beq.n	8002836 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d016      	beq.n	800288c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fad3 	bl	8001e0e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002868:	f7fe fa0c 	bl	8000c84 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002870:	f7fe fa08 	bl	8000c84 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0b8      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002882:	f7ff fbbb 	bl	8001ffc <LL_RCC_IsActiveFlag_SHDHPRE>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f1      	beq.n	8002870 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d016      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff facd 	bl	8001e3c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028a2:	f7fe f9ef 	bl	8000c84 <HAL_GetTick>
 80028a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028aa:	f7fe f9eb 	bl	8000c84 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e09b      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028bc:	f7ff fbb1 	bl	8002022 <LL_RCC_IsActiveFlag_PPRE1>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f1      	beq.n	80028aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d017      	beq.n	8002902 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fac3 	bl	8001e64 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028de:	f7fe f9d1 	bl	8000c84 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028e6:	f7fe f9cd 	bl	8000c84 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e07d      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028f8:	f7ff fba5 	bl	8002046 <LL_RCC_IsActiveFlag_PPRE2>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f1      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d043      	beq.n	8002996 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d106      	bne.n	8002924 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002916:	f7ff f863 	bl	80019e0 <LL_RCC_HSE_IsReady>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d11e      	bne.n	800295e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e067      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d106      	bne.n	800293a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800292c:	f7ff fafe 	bl	8001f2c <LL_RCC_PLL_IsReady>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d113      	bne.n	800295e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e05c      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002942:	f7ff f9cb 	bl	8001cdc <LL_RCC_MSI_IsReady>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d108      	bne.n	800295e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e051      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002950:	f7ff f876 	bl	8001a40 <LL_RCC_HSI_IsReady>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e04a      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fa09 	bl	8001d7a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002968:	f7fe f98c 	bl	8000c84 <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	e00a      	b.n	8002986 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002970:	f7fe f988 	bl	8000c84 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e036      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	f7ff fa0c 	bl	8001da2 <LL_RCC_GetSysClkSource>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	429a      	cmp	r2, r3
 8002994:	d1ec      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d21b      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 0207 	bic.w	r2, r3, #7
 80029ac:	4913      	ldr	r1, [pc, #76]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b4:	f7fe f966 	bl	8000c84 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029bc:	f7fe f962 	bl	8000c84 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e012      	b.n	80029f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1ef      	bne.n	80029bc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029dc:	f000 f87e 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <HAL_RCC_ClockConfig+0x27c>)
 80029e4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80029e6:	f7fe f959 	bl	8000c9c <HAL_GetTickPrio>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe f8fb 	bl	8000be8 <HAL_InitTick>
 80029f2:	4603      	mov	r3, r0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	58004000 	.word	0x58004000
 8002a00:	20000188 	.word	0x20000188

08002a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0a:	f7ff f9ca 	bl	8001da2 <LL_RCC_GetSysClkSource>
 8002a0e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a16:	f7ff f986 	bl	8001d26 <LL_RCC_MSI_GetRange>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e04b      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e045      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d10a      	bne.n	8002a54 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a3e:	f7fe ff9f 	bl	8001980 <LL_RCC_HSE_IsEnabledDiv2>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a48:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e03a      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e037      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a54:	f7ff faa1 	bl	8001f9a <LL_RCC_PLL_GetMainSource>
 8002a58:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d003      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x64>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x6a>
 8002a66:	e00d      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a6a:	60bb      	str	r3, [r7, #8]
        break;
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a6e:	f7fe ff87 	bl	8001980 <LL_RCC_HSE_IsEnabledDiv2>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d102      	bne.n	8002a7e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a7a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a7c:	e00d      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a80:	60bb      	str	r3, [r7, #8]
        break;
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a84:	f7ff f94f 	bl	8001d26 <LL_RCC_MSI_GetRange>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a96:	60bb      	str	r3, [r7, #8]
        break;
 8002a98:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002a9a:	f7ff fa59 	bl	8001f50 <LL_RCC_PLL_GetN>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	fb03 f402 	mul.w	r4, r3, r2
 8002aa6:	f7ff fa6c 	bl	8001f82 <LL_RCC_PLL_GetDivider>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	3301      	adds	r3, #1
 8002ab0:	fbb4 f4f3 	udiv	r4, r4, r3
 8002ab4:	f7ff fa59 	bl	8001f6a <LL_RCC_PLL_GetR>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	0f5b      	lsrs	r3, r3, #29
 8002abc:	3301      	adds	r3, #1
 8002abe:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ac2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd90      	pop	{r4, r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	08004110 	.word	0x08004110
 8002ad4:	00f42400 	.word	0x00f42400
 8002ad8:	01e84800 	.word	0x01e84800

08002adc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002adc:	b598      	push	{r3, r4, r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ae0:	f7ff ff90 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	f7ff f9d1 	bl	8001e8c <LL_RCC_GetAHBPrescaler>
 8002aea:	4603      	mov	r3, r0
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x24>)
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd98      	pop	{r3, r4, r7, pc}
 8002b00:	080040b0 	.word	0x080040b0

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b598      	push	{r3, r4, r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b08:	f7ff ffe8 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	f7ff f9d7 	bl	8001ec0 <LL_RCC_GetAPB1Prescaler>
 8002b12:	4603      	mov	r3, r0
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd98      	pop	{r3, r4, r7, pc}
 8002b2c:	080040f0 	.word	0x080040f0

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b598      	push	{r3, r4, r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002b34:	f7ff ffd2 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 8002b38:	4604      	mov	r4, r0
 8002b3a:	f7ff f9cd 	bl	8001ed8 <LL_RCC_GetAPB2Prescaler>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	0adb      	lsrs	r3, r3, #11
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd98      	pop	{r3, r4, r7, pc}
 8002b58:	080040f0 	.word	0x080040f0

08002b5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2bb0      	cmp	r3, #176	; 0xb0
 8002b68:	d903      	bls.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e007      	b.n	8002b82 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b80:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002b82:	f7ff f98f 	bl	8001ea4 <LL_RCC_GetAHB4Prescaler>
 8002b86:	4603      	mov	r3, r0
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	0c9c      	lsrs	r4, r3, #18
 8002ba6:	f7fe fedd 	bl	8001964 <HAL_PWREx_GetVoltageRange>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4619      	mov	r1, r3
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f000 f80c 	bl	8002bcc <RCC_SetFlashLatency>
 8002bb4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd90      	pop	{r4, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	08004110 	.word	0x08004110
 8002bc4:	080040b0 	.word	0x080040b0
 8002bc8:	431bde83 	.word	0x431bde83

08002bcc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b093      	sub	sp, #76	; 0x4c
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <RCC_SetFlashLatency+0xf0>)
 8002bd8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002bdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002be2:	4a37      	ldr	r2, [pc, #220]	; (8002cc0 <RCC_SetFlashLatency+0xf4>)
 8002be4:	f107 031c 	add.w	r3, r7, #28
 8002be8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002bee:	4b35      	ldr	r3, [pc, #212]	; (8002cc4 <RCC_SetFlashLatency+0xf8>)
 8002bf0:	f107 040c 	add.w	r4, r7, #12
 8002bf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c04:	d11c      	bne.n	8002c40 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	643b      	str	r3, [r7, #64]	; 0x40
 8002c0a:	e015      	b.n	8002c38 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002c14:	4413      	add	r3, r2
 8002c16:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d808      	bhi.n	8002c32 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002c28:	4413      	add	r3, r2
 8002c2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c2e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c30:	e022      	b.n	8002c78 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c34:	3301      	adds	r3, #1
 8002c36:	643b      	str	r3, [r7, #64]	; 0x40
 8002c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d9e6      	bls.n	8002c0c <RCC_SetFlashLatency+0x40>
 8002c3e:	e01b      	b.n	8002c78 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c44:	e015      	b.n	8002c72 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002c4e:	4413      	add	r3, r2
 8002c50:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d808      	bhi.n	8002c6c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002c62:	4413      	add	r3, r2
 8002c64:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c68:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c6a:	e005      	b.n	8002c78 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6e:	3301      	adds	r3, #1
 8002c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d9e6      	bls.n	8002c46 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <RCC_SetFlashLatency+0xfc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 0207 	bic.w	r2, r3, #7
 8002c80:	4911      	ldr	r1, [pc, #68]	; (8002cc8 <RCC_SetFlashLatency+0xfc>)
 8002c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c88:	f7fd fffc 	bl	8000c84 <HAL_GetTick>
 8002c8c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c8e:	e008      	b.n	8002ca2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c90:	f7fd fff8 	bl	8000c84 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e007      	b.n	8002cb2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <RCC_SetFlashLatency+0xfc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1ef      	bne.n	8002c90 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	374c      	adds	r7, #76	; 0x4c
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd90      	pop	{r4, r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	08004084 	.word	0x08004084
 8002cc0:	08004094 	.word	0x08004094
 8002cc4:	080040a0 	.word	0x080040a0
 8002cc8:	58004000 	.word	0x58004000

08002ccc <LL_RCC_LSE_IsEnabled>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <LL_RCC_LSE_IsEnabled+0x18>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <LL_RCC_LSE_IsEnabled+0x1a>
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_RCC_LSE_IsReady>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d101      	bne.n	8002d08 <LL_RCC_LSE_IsReady+0x18>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <LL_RCC_LSE_IsReady+0x1a>
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_RCC_MSI_EnablePLLMode>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_RCC_SetRFWKPClockSource>:
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_RCC_SetSMPSClockSource>:
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	f023 0203 	bic.w	r2, r3, #3
 8002d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <LL_RCC_SetSMPSPrescaler>:
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_SetUSARTClockSource>:
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <LL_RCC_SetLPUARTClockSource>:
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_RCC_SetI2CClockSource>:
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	401a      	ands	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_SetLPTIMClockSource>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	0c1b      	lsrs	r3, r3, #16
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	43db      	mvns	r3, r3
 8002e58:	401a      	ands	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	041b      	lsls	r3, r3, #16
 8002e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_RCC_SetSAIClockSource>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_SetRNGClockSource>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002eb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_RCC_SetCLK48ClockSource>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ee0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_RCC_SetUSBClockSource>:
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ffe3 	bl	8002ecc <LL_RCC_SetCLK48ClockSource>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <LL_RCC_SetADCClockSource>:
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_SetRTCClockSource>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_RCC_GetRTCClockSource>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_RCC_ForceBackupDomainReset>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_RCC_PLLSAI1_Enable>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_PLLSAI1_Disable>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff4:	6013      	str	r3, [r2, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_RCC_PLLSAI1_IsReady>:
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800300e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003012:	d101      	bne.n	8003018 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003030:	2300      	movs	r3, #0
 8003032:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d034      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003048:	d021      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800304a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800304e:	d81b      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003050:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003054:	d01d      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003056:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800305a:	d815      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003064:	d110      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003076:	e00d      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f94d 	bl	800331c <RCCEx_PLLSAI1_ConfigNP>
 8003082:	4603      	mov	r3, r0
 8003084:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003086:	e005      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	77fb      	strb	r3, [r7, #31]
        break;
 800308c:	e002      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800308e:	bf00      	nop
 8003090:	e000      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003094:	7ffb      	ldrb	r3, [r7, #31]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fee8 	bl	8002e74 <LL_RCC_SetSAIClockSource>
 80030a4:	e001      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a6:	7ffb      	ldrb	r3, [r7, #31]
 80030a8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d046      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80030b6:	f7ff ff56 	bl	8002f66 <LL_RCC_GetRTCClockSource>
 80030ba:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d03c      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030c6:	f7fe fc3d 	bl	8001944 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff30 	bl	8002f3a <LL_RCC_SetRTCClockSource>
 80030da:	e02e      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80030dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80030e6:	f7ff ff4b 	bl	8002f80 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80030ea:	f7ff ff5a 	bl	8002fa2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80030fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003106:	f7ff fde1 	bl	8002ccc <LL_RCC_LSE_IsEnabled>
 800310a:	4603      	mov	r3, r0
 800310c:	2b01      	cmp	r3, #1
 800310e:	d114      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003110:	f7fd fdb8 	bl	8000c84 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003116:	e00b      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fd fdb4 	bl	8000c84 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d902      	bls.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	77fb      	strb	r3, [r7, #31]
              break;
 800312e:	e004      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003130:	f7ff fdde 	bl	8002cf0 <LL_RCC_LSE_IsReady>
 8003134:	4603      	mov	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d1ee      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800313a:	7ffb      	ldrb	r3, [r7, #31]
 800313c:	77bb      	strb	r3, [r7, #30]
 800313e:	e001      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003140:	7ffb      	ldrb	r3, [r7, #31]
 8003142:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d004      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fe2a 	bl	8002dae <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fe35 	bl	8002dda <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fe5d 	bl	8002e40 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fe52 	bl	8002e40 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fe2a 	bl	8002e06 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fe1f 	bl	8002e06 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d022      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fe8d 	bl	8002ef8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e6:	d107      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003200:	d10b      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f8e3 	bl	80033d2 <RCCEx_PLLSAI1_ConfigNQ>
 800320c:	4603      	mov	r3, r0
 800320e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003210:	7ffb      	ldrb	r3, [r7, #31]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003216:	7ffb      	ldrb	r3, [r7, #31]
 8003218:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003222:	2b00      	cmp	r3, #0
 8003224:	d02b      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d008      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003238:	d003      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	2b00      	cmp	r3, #0
 8003240:	d105      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fe2a 	bl	8002ea0 <LL_RCC_SetRNGClockSource>
 800324c:	e00a      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	2000      	movs	r0, #0
 800325a:	f7ff fe21 	bl	8002ea0 <LL_RCC_SetRNGClockSource>
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff fe34 	bl	8002ecc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800326c:	d107      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003278:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	2b00      	cmp	r3, #0
 8003288:	d022      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fe3d 	bl	8002f0e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329c:	d107      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032b6:	d10b      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f8e3 	bl	8003488 <RCCEx_PLLSAI1_ConfigNR>
 80032c2:	4603      	mov	r3, r0
 80032c4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80032c6:	7ffb      	ldrb	r3, [r7, #31]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80032cc:	7ffb      	ldrb	r3, [r7, #31]
 80032ce:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fd26 	bl	8002d32 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fd45 	bl	8002d86 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fd2c 	bl	8002d5e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003306:	7fbb      	ldrb	r3, [r7, #30]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003314:	f7ff fcfe 	bl	8002d14 <LL_RCC_MSI_EnablePLLMode>
}
 8003318:	bf00      	nop
 800331a:	bd80      	pop	{r7, pc}

0800331c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003328:	f7ff fe5b 	bl	8002fe2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800332c:	f7fd fcaa 	bl	8000c84 <HAL_GetTick>
 8003330:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003332:	e009      	b.n	8003348 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003334:	f7fd fca6 	bl	8000c84 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d902      	bls.n	8003348 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	73fb      	strb	r3, [r7, #15]
      break;
 8003346:	e004      	b.n	8003352 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003348:	f7ff fe5a 	bl	8003000 <LL_RCC_PLLSAI1_IsReady>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d137      	bne.n	80033c8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336c:	4313      	orrs	r3, r2
 800336e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003382:	4313      	orrs	r3, r2
 8003384:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003386:	f7ff fe1d 	bl	8002fc4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338a:	f7fd fc7b 	bl	8000c84 <HAL_GetTick>
 800338e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003390:	e009      	b.n	80033a6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003392:	f7fd fc77 	bl	8000c84 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d902      	bls.n	80033a6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	73fb      	strb	r3, [r7, #15]
        break;
 80033a4:	e004      	b.n	80033b0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033a6:	f7ff fe2b 	bl	8003000 <LL_RCC_PLLSAI1_IsReady>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d1f0      	bne.n	8003392 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c4:	4313      	orrs	r3, r2
 80033c6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033de:	f7ff fe00 	bl	8002fe2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033e2:	f7fd fc4f 	bl	8000c84 <HAL_GetTick>
 80033e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033e8:	e009      	b.n	80033fe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ea:	f7fd fc4b 	bl	8000c84 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d902      	bls.n	80033fe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	73fb      	strb	r3, [r7, #15]
      break;
 80033fc:	e004      	b.n	8003408 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033fe:	f7ff fdff 	bl	8003000 <LL_RCC_PLLSAI1_IsReady>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d137      	bne.n	800347e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800340e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003422:	4313      	orrs	r3, r2
 8003424:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003438:	4313      	orrs	r3, r2
 800343a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800343c:	f7ff fdc2 	bl	8002fc4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003440:	f7fd fc20 	bl	8000c84 <HAL_GetTick>
 8003444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003446:	e009      	b.n	800345c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003448:	f7fd fc1c 	bl	8000c84 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d902      	bls.n	800345c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	73fb      	strb	r3, [r7, #15]
        break;
 800345a:	e004      	b.n	8003466 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800345c:	f7ff fdd0 	bl	8003000 <LL_RCC_PLLSAI1_IsReady>
 8003460:	4603      	mov	r3, r0
 8003462:	2b01      	cmp	r3, #1
 8003464:	d1f0      	bne.n	8003448 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d108      	bne.n	800347e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800346c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800347a:	4313      	orrs	r3, r2
 800347c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003494:	f7ff fda5 	bl	8002fe2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003498:	f7fd fbf4 	bl	8000c84 <HAL_GetTick>
 800349c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800349e:	e009      	b.n	80034b4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a0:	f7fd fbf0 	bl	8000c84 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d902      	bls.n	80034b4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	73fb      	strb	r3, [r7, #15]
      break;
 80034b2:	e004      	b.n	80034be <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034b4:	f7ff fda4 	bl	8003000 <LL_RCC_PLLSAI1_IsReady>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d137      	bne.n	8003534 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d8:	4313      	orrs	r3, r2
 80034da:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ee:	4313      	orrs	r3, r2
 80034f0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80034f2:	f7ff fd67 	bl	8002fc4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f6:	f7fd fbc5 	bl	8000c84 <HAL_GetTick>
 80034fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034fc:	e009      	b.n	8003512 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034fe:	f7fd fbc1 	bl	8000c84 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d902      	bls.n	8003512 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	73fb      	strb	r3, [r7, #15]
        break;
 8003510:	e004      	b.n	800351c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003512:	f7ff fd75 	bl	8003000 <LL_RCC_PLLSAI1_IsReady>
 8003516:	4603      	mov	r3, r0
 8003518:	2b01      	cmp	r3, #1
 800351a:	d1f0      	bne.n	80034fe <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d108      	bne.n	8003534 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003530:	4313      	orrs	r3, r2
 8003532:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <LL_RCC_GetUSARTClockSource>:
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4013      	ands	r3, r2
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_RCC_GetLPUARTClockSource>:
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4013      	ands	r3, r2
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e042      	b.n	8003616 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd f9ec 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f82d 	bl	8003620 <UART_SetConfig>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e022      	b.n	8003616 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fa27 	bl	8003a2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 faae 	bl	8003b70 <UART_CheckIdleState>
 8003614:	4603      	mov	r3, r0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4313      	orrs	r3, r2
 8003642:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4ba3      	ldr	r3, [pc, #652]	; (80038d8 <UART_SetConfig+0x2b8>)
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	69f9      	ldr	r1, [r7, #28]
 8003654:	430b      	orrs	r3, r1
 8003656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a98      	ldr	r2, [pc, #608]	; (80038dc <UART_SetConfig+0x2bc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	4313      	orrs	r3, r2
 8003686:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003692:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	69f9      	ldr	r1, [r7, #28]
 800369c:	430b      	orrs	r3, r1
 800369e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f023 010f 	bic.w	r1, r3, #15
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a89      	ldr	r2, [pc, #548]	; (80038e0 <UART_SetConfig+0x2c0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d120      	bne.n	8003702 <UART_SetConfig+0xe2>
 80036c0:	2003      	movs	r0, #3
 80036c2:	f7ff ff3c 	bl	800353e <LL_RCC_GetUSARTClockSource>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d817      	bhi.n	80036fc <UART_SetConfig+0xdc>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <UART_SetConfig+0xb4>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036f1 	.word	0x080036f1
 80036dc:	080036eb 	.word	0x080036eb
 80036e0:	080036f7 	.word	0x080036f7
 80036e4:	2301      	movs	r3, #1
 80036e6:	76fb      	strb	r3, [r7, #27]
 80036e8:	e038      	b.n	800375c <UART_SetConfig+0x13c>
 80036ea:	2302      	movs	r3, #2
 80036ec:	76fb      	strb	r3, [r7, #27]
 80036ee:	e035      	b.n	800375c <UART_SetConfig+0x13c>
 80036f0:	2304      	movs	r3, #4
 80036f2:	76fb      	strb	r3, [r7, #27]
 80036f4:	e032      	b.n	800375c <UART_SetConfig+0x13c>
 80036f6:	2308      	movs	r3, #8
 80036f8:	76fb      	strb	r3, [r7, #27]
 80036fa:	e02f      	b.n	800375c <UART_SetConfig+0x13c>
 80036fc:	2310      	movs	r3, #16
 80036fe:	76fb      	strb	r3, [r7, #27]
 8003700:	e02c      	b.n	800375c <UART_SetConfig+0x13c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a75      	ldr	r2, [pc, #468]	; (80038dc <UART_SetConfig+0x2bc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d125      	bne.n	8003758 <UART_SetConfig+0x138>
 800370c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003710:	f7ff ff25 	bl	800355e <LL_RCC_GetLPUARTClockSource>
 8003714:	4603      	mov	r3, r0
 8003716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800371a:	d017      	beq.n	800374c <UART_SetConfig+0x12c>
 800371c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003720:	d817      	bhi.n	8003752 <UART_SetConfig+0x132>
 8003722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003726:	d00b      	beq.n	8003740 <UART_SetConfig+0x120>
 8003728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372c:	d811      	bhi.n	8003752 <UART_SetConfig+0x132>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <UART_SetConfig+0x11a>
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d006      	beq.n	8003746 <UART_SetConfig+0x126>
 8003738:	e00b      	b.n	8003752 <UART_SetConfig+0x132>
 800373a:	2300      	movs	r3, #0
 800373c:	76fb      	strb	r3, [r7, #27]
 800373e:	e00d      	b.n	800375c <UART_SetConfig+0x13c>
 8003740:	2302      	movs	r3, #2
 8003742:	76fb      	strb	r3, [r7, #27]
 8003744:	e00a      	b.n	800375c <UART_SetConfig+0x13c>
 8003746:	2304      	movs	r3, #4
 8003748:	76fb      	strb	r3, [r7, #27]
 800374a:	e007      	b.n	800375c <UART_SetConfig+0x13c>
 800374c:	2308      	movs	r3, #8
 800374e:	76fb      	strb	r3, [r7, #27]
 8003750:	e004      	b.n	800375c <UART_SetConfig+0x13c>
 8003752:	2310      	movs	r3, #16
 8003754:	76fb      	strb	r3, [r7, #27]
 8003756:	e001      	b.n	800375c <UART_SetConfig+0x13c>
 8003758:	2310      	movs	r3, #16
 800375a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a5e      	ldr	r2, [pc, #376]	; (80038dc <UART_SetConfig+0x2bc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	f040 808b 	bne.w	800387e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003768:	7efb      	ldrb	r3, [r7, #27]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d823      	bhi.n	80037b6 <UART_SetConfig+0x196>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <UART_SetConfig+0x154>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	08003799 	.word	0x08003799
 8003778:	080037b7 	.word	0x080037b7
 800377c:	080037a1 	.word	0x080037a1
 8003780:	080037b7 	.word	0x080037b7
 8003784:	080037a7 	.word	0x080037a7
 8003788:	080037b7 	.word	0x080037b7
 800378c:	080037b7 	.word	0x080037b7
 8003790:	080037b7 	.word	0x080037b7
 8003794:	080037af 	.word	0x080037af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003798:	f7ff f9b4 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 800379c:	6178      	str	r0, [r7, #20]
        break;
 800379e:	e00f      	b.n	80037c0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a0:	4b50      	ldr	r3, [pc, #320]	; (80038e4 <UART_SetConfig+0x2c4>)
 80037a2:	617b      	str	r3, [r7, #20]
        break;
 80037a4:	e00c      	b.n	80037c0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a6:	f7ff f92d 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80037aa:	6178      	str	r0, [r7, #20]
        break;
 80037ac:	e008      	b.n	80037c0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b2:	617b      	str	r3, [r7, #20]
        break;
 80037b4:	e004      	b.n	80037c0 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	76bb      	strb	r3, [r7, #26]
        break;
 80037be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 811a 	beq.w	80039fc <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	4a46      	ldr	r2, [pc, #280]	; (80038e8 <UART_SetConfig+0x2c8>)
 80037ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037d2:	461a      	mov	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037da:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d305      	bcc.n	80037f8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d902      	bls.n	80037fe <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	76bb      	strb	r3, [r7, #26]
 80037fc:	e0fe      	b.n	80039fc <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	4618      	mov	r0, r3
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	4a37      	ldr	r2, [pc, #220]	; (80038e8 <UART_SetConfig+0x2c8>)
 800380c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003810:	b29a      	uxth	r2, r3
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	f7fc fcb1 	bl	800017c <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	020b      	lsls	r3, r1, #8
 800382c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003830:	0202      	lsls	r2, r0, #8
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	6849      	ldr	r1, [r1, #4]
 8003836:	0849      	lsrs	r1, r1, #1
 8003838:	4608      	mov	r0, r1
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	1814      	adds	r4, r2, r0
 8003840:	eb43 0501 	adc.w	r5, r3, r1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	461a      	mov	r2, r3
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	4620      	mov	r0, r4
 8003850:	4629      	mov	r1, r5
 8003852:	f7fc fc93 	bl	800017c <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4613      	mov	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003864:	d308      	bcc.n	8003878 <UART_SetConfig+0x258>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386c:	d204      	bcs.n	8003878 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e0c1      	b.n	80039fc <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	76bb      	strb	r3, [r7, #26]
 800387c:	e0be      	b.n	80039fc <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003886:	d16a      	bne.n	800395e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003888:	7efb      	ldrb	r3, [r7, #27]
 800388a:	3b01      	subs	r3, #1
 800388c:	2b07      	cmp	r3, #7
 800388e:	d82d      	bhi.n	80038ec <UART_SetConfig+0x2cc>
 8003890:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <UART_SetConfig+0x278>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038b9 	.word	0x080038b9
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	080038ed 	.word	0x080038ed
 80038a4:	080038c7 	.word	0x080038c7
 80038a8:	080038ed 	.word	0x080038ed
 80038ac:	080038ed 	.word	0x080038ed
 80038b0:	080038ed 	.word	0x080038ed
 80038b4:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7ff f93a 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80038bc:	6178      	str	r0, [r7, #20]
        break;
 80038be:	e01a      	b.n	80038f6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <UART_SetConfig+0x2c4>)
 80038c2:	617b      	str	r3, [r7, #20]
        break;
 80038c4:	e017      	b.n	80038f6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7ff f89d 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80038ca:	6178      	str	r0, [r7, #20]
        break;
 80038cc:	e013      	b.n	80038f6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	617b      	str	r3, [r7, #20]
        break;
 80038d4:	e00f      	b.n	80038f6 <UART_SetConfig+0x2d6>
 80038d6:	bf00      	nop
 80038d8:	cfff69f3 	.word	0xcfff69f3
 80038dc:	40008000 	.word	0x40008000
 80038e0:	40013800 	.word	0x40013800
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	08004150 	.word	0x08004150
      default:
        pclk = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	76bb      	strb	r3, [r7, #26]
        break;
 80038f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d07f      	beq.n	80039fc <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	4a48      	ldr	r2, [pc, #288]	; (8003a24 <UART_SetConfig+0x404>)
 8003902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003906:	461a      	mov	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	fbb3 f3f2 	udiv	r3, r3, r2
 800390e:	005a      	lsls	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	441a      	add	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	b29b      	uxth	r3, r3
 8003922:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b0f      	cmp	r3, #15
 8003928:	d916      	bls.n	8003958 <UART_SetConfig+0x338>
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d212      	bcs.n	8003958 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f023 030f 	bic.w	r3, r3, #15
 800393a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	b29a      	uxth	r2, r3
 8003948:	89fb      	ldrh	r3, [r7, #14]
 800394a:	4313      	orrs	r3, r2
 800394c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	89fa      	ldrh	r2, [r7, #14]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	e051      	b.n	80039fc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	76bb      	strb	r3, [r7, #26]
 800395c:	e04e      	b.n	80039fc <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800395e:	7efb      	ldrb	r3, [r7, #27]
 8003960:	3b01      	subs	r3, #1
 8003962:	2b07      	cmp	r3, #7
 8003964:	d821      	bhi.n	80039aa <UART_SetConfig+0x38a>
 8003966:	a201      	add	r2, pc, #4	; (adr r2, 800396c <UART_SetConfig+0x34c>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	0800398d 	.word	0x0800398d
 8003970:	08003995 	.word	0x08003995
 8003974:	080039ab 	.word	0x080039ab
 8003978:	0800399b 	.word	0x0800399b
 800397c:	080039ab 	.word	0x080039ab
 8003980:	080039ab 	.word	0x080039ab
 8003984:	080039ab 	.word	0x080039ab
 8003988:	080039a3 	.word	0x080039a3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800398c:	f7ff f8d0 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8003990:	6178      	str	r0, [r7, #20]
        break;
 8003992:	e00f      	b.n	80039b4 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <UART_SetConfig+0x408>)
 8003996:	617b      	str	r3, [r7, #20]
        break;
 8003998:	e00c      	b.n	80039b4 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800399a:	f7ff f833 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 800399e:	6178      	str	r0, [r7, #20]
        break;
 80039a0:	e008      	b.n	80039b4 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a6:	617b      	str	r3, [r7, #20]
        break;
 80039a8:	e004      	b.n	80039b4 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	76bb      	strb	r3, [r7, #26]
        break;
 80039b2:	bf00      	nop
    }

    if (pclk != 0U)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d020      	beq.n	80039fc <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <UART_SetConfig+0x404>)
 80039c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c4:	461a      	mov	r2, r3
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	441a      	add	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	b29b      	uxth	r3, r3
 80039de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	d908      	bls.n	80039f8 <UART_SetConfig+0x3d8>
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d204      	bcs.n	80039f8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	e001      	b.n	80039fc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a18:	7ebb      	ldrb	r3, [r7, #26]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bdb0      	pop	{r4, r5, r7, pc}
 8003a22:	bf00      	nop
 8003a24:	08004150 	.word	0x08004150
 8003a28:	00f42400 	.word	0x00f42400

08003a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01a      	beq.n	8003b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2a:	d10a      	bne.n	8003b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
  }
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b80:	f7fd f880 	bl	8000c84 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d10e      	bne.n	8003bb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f82f 	bl	8003c06 <UART_WaitOnFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e025      	b.n	8003bfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d10e      	bne.n	8003bde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f819 	bl	8003c06 <UART_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e00f      	b.n	8003bfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b09c      	sub	sp, #112	; 0x70
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4613      	mov	r3, r2
 8003c14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c16:	e0a9      	b.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	f000 80a5 	beq.w	8003d6c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fd f82f 	bl	8000c84 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d140      	bne.n	8003cba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c4c:	667b      	str	r3, [r7, #100]	; 0x64
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	663b      	str	r3, [r7, #96]	; 0x60
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3308      	adds	r3, #8
 8003c88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e5      	bne.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e069      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d051      	beq.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d149      	bne.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
 8003d02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e6      	bne.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3308      	adds	r3, #8
 8003d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	613b      	str	r3, [r7, #16]
   return(result);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3308      	adds	r3, #8
 8003d32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d34:	623a      	str	r2, [r7, #32]
 8003d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	69f9      	ldr	r1, [r7, #28]
 8003d3a:	6a3a      	ldr	r2, [r7, #32]
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e5      	bne.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e010      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	f43f af46 	beq.w	8003c18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3770      	adds	r7, #112	; 0x70
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_UARTEx_DisableFifoMode+0x16>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e027      	b.n	8003dfc <HAL_UARTEx_DisableFifoMode+0x66>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003dda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e02d      	b.n	8003e7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2224      	movs	r2, #36	; 0x24
 8003e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f84f 	bl	8003f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e02d      	b.n	8003ef8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	; 0x24
 8003ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f811 	bl	8003f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d108      	bne.n	8003f22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f20:	e031      	b.n	8003f86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f22:	2308      	movs	r3, #8
 8003f24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f26:	2308      	movs	r3, #8
 8003f28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	0e5b      	lsrs	r3, r3, #25
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	0f5b      	lsrs	r3, r3, #29
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f4a:	7bbb      	ldrb	r3, [r7, #14]
 8003f4c:	7b3a      	ldrb	r2, [r7, #12]
 8003f4e:	4911      	ldr	r1, [pc, #68]	; (8003f94 <UARTEx_SetNbDataToProcess+0x94>)
 8003f50:	5c8a      	ldrb	r2, [r1, r2]
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f56:	7b3a      	ldrb	r2, [r7, #12]
 8003f58:	490f      	ldr	r1, [pc, #60]	; (8003f98 <UARTEx_SetNbDataToProcess+0x98>)
 8003f5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	7b7a      	ldrb	r2, [r7, #13]
 8003f6c:	4909      	ldr	r1, [pc, #36]	; (8003f94 <UARTEx_SetNbDataToProcess+0x94>)
 8003f6e:	5c8a      	ldrb	r2, [r1, r2]
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f74:	7b7a      	ldrb	r2, [r7, #13]
 8003f76:	4908      	ldr	r1, [pc, #32]	; (8003f98 <UARTEx_SetNbDataToProcess+0x98>)
 8003f78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	08004168 	.word	0x08004168
 8003f98:	08004170 	.word	0x08004170

08003f9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fa4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003fa8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	4013      	ands	r3, r2
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	f107 0014 	add.w	r0, r7, #20
 8003fe0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	b004      	add	sp, #16
 8004012:	4770      	bx	lr

08004014 <__libc_init_array>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4d0d      	ldr	r5, [pc, #52]	; (800404c <__libc_init_array+0x38>)
 8004018:	4c0d      	ldr	r4, [pc, #52]	; (8004050 <__libc_init_array+0x3c>)
 800401a:	1b64      	subs	r4, r4, r5
 800401c:	10a4      	asrs	r4, r4, #2
 800401e:	2600      	movs	r6, #0
 8004020:	42a6      	cmp	r6, r4
 8004022:	d109      	bne.n	8004038 <__libc_init_array+0x24>
 8004024:	4d0b      	ldr	r5, [pc, #44]	; (8004054 <__libc_init_array+0x40>)
 8004026:	4c0c      	ldr	r4, [pc, #48]	; (8004058 <__libc_init_array+0x44>)
 8004028:	f000 f820 	bl	800406c <_init>
 800402c:	1b64      	subs	r4, r4, r5
 800402e:	10a4      	asrs	r4, r4, #2
 8004030:	2600      	movs	r6, #0
 8004032:	42a6      	cmp	r6, r4
 8004034:	d105      	bne.n	8004042 <__libc_init_array+0x2e>
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	f855 3b04 	ldr.w	r3, [r5], #4
 800403c:	4798      	blx	r3
 800403e:	3601      	adds	r6, #1
 8004040:	e7ee      	b.n	8004020 <__libc_init_array+0xc>
 8004042:	f855 3b04 	ldr.w	r3, [r5], #4
 8004046:	4798      	blx	r3
 8004048:	3601      	adds	r6, #1
 800404a:	e7f2      	b.n	8004032 <__libc_init_array+0x1e>
 800404c:	08004180 	.word	0x08004180
 8004050:	08004180 	.word	0x08004180
 8004054:	08004180 	.word	0x08004180
 8004058:	08004184 	.word	0x08004184

0800405c <memset>:
 800405c:	4402      	add	r2, r0
 800405e:	4603      	mov	r3, r0
 8004060:	4293      	cmp	r3, r2
 8004062:	d100      	bne.n	8004066 <memset+0xa>
 8004064:	4770      	bx	lr
 8004066:	f803 1b01 	strb.w	r1, [r3], #1
 800406a:	e7f9      	b.n	8004060 <memset+0x4>

0800406c <_init>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	bf00      	nop
 8004070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004072:	bc08      	pop	{r3}
 8004074:	469e      	mov	lr, r3
 8004076:	4770      	bx	lr

08004078 <_fini>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr
