
AES-WB55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c28  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004ea8  08004ea8  00014ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000004  08004eb8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000430  20000020  08004ed4  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000450  08004ed4  00020450  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016f95  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002981  00000000  00000000  00036fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015a0  00000000  00000000  00039968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014b8  00000000  00000000  0003af08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021590  00000000  00000000  0003c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001496b  00000000  00000000  0005d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d5d7f  00000000  00000000  000722bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0014803a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005afc  00000000  00000000  00148090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	08004d4c 	.word	0x08004d4c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	08004d4c 	.word	0x08004d4c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000484:	f023 0218 	bic.w	r2, r3, #24
 8000488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4313      	orrs	r3, r2
 8000490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c4:	68fb      	ldr	r3, [r7, #12]
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fb5f 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f851 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f993 	bl	800080c <MX_GPIO_Init>
  MX_AES1_Init();
 80004e6:	f000 f8f3 	bl	80006d0 <MX_AES1_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f919 	bl	8000720 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004ee:	f000 f965 	bl	80007bc <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_SYSTICK_Config(0xFFFFFFFF);
 80004f2:	f04f 30ff 	mov.w	r0, #4294967295
 80004f6:	f000 fcae 	bl	8000e56 <HAL_SYSTICK_Config>
  TIME_MEASURE_START;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <main+0x90>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <main+0x94>)
 8000500:	6013      	str	r3, [r2, #0]
  HAL_CRYP_Encrypt(&hcryp1, input_data, 4, encrypted_data, 1000);
 8000502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <main+0x98>)
 800050a:	2204      	movs	r2, #4
 800050c:	4918      	ldr	r1, [pc, #96]	; (8000570 <main+0x9c>)
 800050e:	4819      	ldr	r0, [pc, #100]	; (8000574 <main+0xa0>)
 8000510:	f000 fce8 	bl	8000ee4 <HAL_CRYP_Encrypt>
  TIME_MEASURE_STOP;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <main+0x90>)
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	4a17      	ldr	r2, [pc, #92]	; (8000578 <main+0xa4>)
 800051a:	6013      	str	r3, [r2, #0]
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <main+0x94>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <main+0xa4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	4a15      	ldr	r2, [pc, #84]	; (800057c <main+0xa8>)
 8000528:	6013      	str	r3, [r2, #0]

  HAL_SYSTICK_Config(0xFFFFFFFF);
 800052a:	f04f 30ff 	mov.w	r0, #4294967295
 800052e:	f000 fc92 	bl	8000e56 <HAL_SYSTICK_Config>
  TIME_MEASURE_START;
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <main+0x90>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <main+0x94>)
 8000538:	6013      	str	r3, [r2, #0]
  HAL_CRYP_Decrypt(&hcryp1, encrypted_data, 4, decrypted_data, 1000);
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <main+0xac>)
 8000542:	2204      	movs	r2, #4
 8000544:	4909      	ldr	r1, [pc, #36]	; (800056c <main+0x98>)
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0xa0>)
 8000548:	f000 fd66 	bl	8001018 <HAL_CRYP_Decrypt>
  TIME_MEASURE_STOP;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <main+0x90>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <main+0xa4>)
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <main+0x94>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <main+0xa4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <main+0xa8>)
 8000560:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x8e>
 8000564:	e000e010 	.word	0xe000e010
 8000568:	20000150 	.word	0x20000150
 800056c:	20000140 	.word	0x20000140
 8000570:	20000004 	.word	0x20000004
 8000574:	200000e0 	.word	0x200000e0
 8000578:	20000154 	.word	0x20000154
 800057c:	2000004c 	.word	0x2000004c
 8000580:	2000003c 	.word	0x2000003c

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0ae      	sub	sp, #184	; 0xb8
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800058e:	2248      	movs	r2, #72	; 0x48
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fbd2 	bl	8004d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]
 80005aa:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2250      	movs	r2, #80	; 0x50
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fbc2 	bl	8004d3c <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80005b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005c6:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	f023 0303 	bic.w	r3, r3, #3
 80005d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005dc:	f002 f822 	bl	8002624 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff ff47 	bl	8000474 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <SystemClock_Config+0x148>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005ee:	4a37      	ldr	r2, [pc, #220]	; (80006cc <SystemClock_Config+0x148>)
 80005f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	4b35      	ldr	r3, [pc, #212]	; (80006cc <SystemClock_Config+0x148>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000602:	2327      	movs	r3, #39	; 0x27
 8000604:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000614:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2340      	movs	r3, #64	; 0x40
 800061e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000622:	2300      	movs	r3, #0
 8000624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000628:	2360      	movs	r3, #96	; 0x60
 800062a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fb87 	bl	8002d4c <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000644:	f000 f92a 	bl	800089c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000648:	236f      	movs	r3, #111	; 0x6f
 800064a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800064c:	2302      	movs	r3, #2
 800064e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fefa 	bl	8003464 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000676:	f000 f911 	bl	800089c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 800067a:	f242 1301 	movw	r3, #8449	; 0x2101
 800067e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000680:	2318      	movs	r3, #24
 8000682:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000688:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800068a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800068e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000690:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000694:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800069a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80006a6:	2300      	movs	r3, #0
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fb27 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80006bc:	f000 f8ee 	bl	800089c <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c0:	f003 fc96 	bl	8003ff0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c4:	bf00      	nop
 80006c6:	37b8      	adds	r7, #184	; 0xb8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58000400 	.word	0x58000400

080006d0 <MX_AES1_Init>:
  * @brief AES1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END AES1_Init 0 */

  /* USER CODE BEGIN AES1_Init 1 */

  /* USER CODE END AES1_Init 1 */
  hcryp1.Instance = AES1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_AES1_Init+0x44>)
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <MX_AES1_Init+0x48>)
 80006d8:	601a      	str	r2, [r3, #0]
  hcryp1.Init.DataType = CRYP_DATATYPE_32B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_AES1_Init+0x44>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hcryp1.Init.KeySize = CRYP_KEYSIZE_256B;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_AES1_Init+0x44>)
 80006e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006e6:	609a      	str	r2, [r3, #8]
  hcryp1.Init.pKey = (uint32_t *)pKeyAES1;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_AES1_Init+0x44>)
 80006ea:	4a0c      	ldr	r2, [pc, #48]	; (800071c <MX_AES1_Init+0x4c>)
 80006ec:	60da      	str	r2, [r3, #12]
  hcryp1.Init.Algorithm = CRYP_AES_ECB;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_AES1_Init+0x44>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hcryp1.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_AES1_Init+0x44>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp1.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_AES1_Init+0x44>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_AES1_Init+0x44>)
 8000702:	f000 fbb4 	bl	8000e6e <HAL_CRYP_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_AES1_Init+0x40>
  {
    Error_Handler();
 800070c:	f000 f8c6 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN AES1_Init 2 */

  /* USER CODE END AES1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000e0 	.word	0x200000e0
 8000718:	50060000 	.word	0x50060000
 800071c:	08004dc0 	.word	0x08004dc0

08000720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <MX_USART1_UART_Init+0x98>)
 8000728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072a:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000738:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000748:	220c      	movs	r2, #12
 800074a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800076c:	f003 fd77 	bl	800425e <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000776:	f000 f891 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800077e:	f004 f9b3 	bl	8004ae8 <HAL_UARTEx_SetTxFifoThreshold>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000788:	f000 f888 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	4809      	ldr	r0, [pc, #36]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000790:	f004 f9e8 	bl	8004b64 <HAL_UARTEx_SetRxFifoThreshold>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800079a:	f000 f87f 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 80007a0:	f004 f969 	bl	8004a76 <HAL_UARTEx_DisableFifoMode>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80007aa:	f000 f877 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000050 	.word	0x20000050
 80007b8:	40013800 	.word	0x40013800

080007bc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <MX_USB_PCD_Init+0x4c>)
 80007c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007c8:	2208      	movs	r2, #8
 80007ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007f2:	f001 fe07 	bl	8002404 <HAL_PCD_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007fc:	f000 f84e 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000158 	.word	0x20000158
 8000808:	40006800 	.word	0x40006800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	2004      	movs	r0, #4
 8000822:	f7ff fe3d 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2002      	movs	r0, #2
 8000828:	f7ff fe3a 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fe37 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2008      	movs	r0, #8
 8000834:	f7ff fe34 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2123      	movs	r1, #35	; 0x23
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <MX_GPIO_Init+0x84>)
 800083e:	f001 fdc9 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	2310      	movs	r3, #16
 8000844:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4810      	ldr	r0, [pc, #64]	; (8000894 <MX_GPIO_Init+0x88>)
 8000854:	f001 fc4e 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000858:	2323      	movs	r3, #35	; 0x23
 800085a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <MX_GPIO_Init+0x84>)
 800086e:	f001 fc41 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000872:	2303      	movs	r3, #3
 8000874:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000884:	f001 fc36 	bl	80020f4 <HAL_GPIO_Init>

}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48000400 	.word	0x48000400
 8000894:	48000800 	.word	0x48000800
 8000898:	48000c00 	.word	0x48000c00

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>

080008a6 <LL_AHB2_GRP1_EnableClock>:
{
 80008a6:	b480      	push	{r7}
 80008a8:	b085      	sub	sp, #20
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4013      	ands	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008fc:	68fb      	ldr	r3, [r7, #12]
}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800090a:	b480      	push	{r7}
 800090c:	b085      	sub	sp, #20
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000916:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4313      	orrs	r3, r2
 8000920:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000926:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4013      	ands	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <HAL_CRYP_MspInit+0x24>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d103      	bne.n	8000966 <HAL_CRYP_MspInit+0x1a>
  {
  /* USER CODE BEGIN AES1_MspInit 0 */

  /* USER CODE END AES1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES1_CLK_ENABLE();
 800095e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000962:	f7ff ffa0 	bl	80008a6 <LL_AHB2_GRP1_EnableClock>
  /* USER CODE BEGIN AES1_MspInit 1 */

  /* USER CODE END AES1_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	50060000 	.word	0x50060000

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_UART_MspInit+0x58>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d116      	bne.n	80009c4 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000996:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800099a:	f7ff ffb6 	bl	800090a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2002      	movs	r0, #2
 80009a0:	f7ff ff81 	bl	80008a6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80009a4:	23c0      	movs	r3, #192	; 0xc0
 80009a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b4:	2307      	movs	r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <HAL_UART_MspInit+0x5c>)
 80009c0:	f001 fb98 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40013800 	.word	0x40013800
 80009d0:	48000400 	.word	0x48000400

080009d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_PCD_MspInit+0x5c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d118      	bne.n	8000a28 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff ff55 	bl	80008a6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a0e:	230a      	movs	r3, #10
 8000a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f001 fb6a 	bl	80020f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a20:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000a24:	f7ff ff58 	bl	80008d8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40006800 	.word	0x40006800

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8e6 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <SystemInit+0x98>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <SystemInit+0x98>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ab4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <SystemInit+0x9c>)
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ad2:	f023 0305 	bic.w	r3, r3, #5
 8000ad6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <SystemInit+0xa0>)
 8000af4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <SystemInit+0xa0>)
 8000afc:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	faf6fefb 	.word	0xfaf6fefb
 8000b28:	22041000 	.word	0x22041000

08000b2c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000b2c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b30:	3304      	adds	r3, #4

08000b32 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b32:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b34:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000b36:	d3f9      	bcc.n	8000b2c <CopyDataInit>
  bx lr
 8000b38:	4770      	bx	lr

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000b3a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000b3c:	3004      	adds	r0, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000b3e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>
  bx lr
 8000b42:	4770      	bx	lr

08000b44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000b46:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b48:	f7ff ff9e 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <LoopForever+0x8>)
 8000b4e:	490c      	ldr	r1, [pc, #48]	; (8000b80 <LoopForever+0xc>)
 8000b50:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <LoopForever+0x10>)
 8000b52:	2300      	movs	r3, #0
 8000b54:	f7ff ffed 	bl	8000b32 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <LoopForever+0x14>)
 8000b5a:	490c      	ldr	r1, [pc, #48]	; (8000b8c <LoopForever+0x18>)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f7ff ffee 	bl	8000b3e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000b62:	480b      	ldr	r0, [pc, #44]	; (8000b90 <LoopForever+0x1c>)
 8000b64:	490b      	ldr	r1, [pc, #44]	; (8000b94 <LoopForever+0x20>)
 8000b66:	2300      	movs	r3, #0
 8000b68:	f7ff ffe9 	bl	8000b3e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b6c:	f004 f8c2 	bl	8004cf4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000b70:	f7ff fcb0 	bl	80004d4 <main>

08000b74 <LoopForever>:

LoopForever:
  b LoopForever
 8000b74:	e7fe      	b.n	8000b74 <LoopForever>
 8000b76:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000b78:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	20000020 	.word	0x20000020
 8000b84:	08004eb8 	.word	0x08004eb8
  INIT_BSS _sbss, _ebss
 8000b88:	20000020 	.word	0x20000020
 8000b8c:	20000450 	.word	0x20000450
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000b90:	20030000 	.word	0x20030000
 8000b94:	20030000 	.word	0x20030000

08000b98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_Init+0x3c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <HAL_Init+0x3c>)
 8000bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	f000 f92a 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 f80f 	bl	8000bdc <HAL_InitTick>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d002      	beq.n	8000bca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	e001      	b.n	8000bce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bca:	f7ff feb7 	bl	800093c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	58004000 	.word	0x58004000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_InitTick+0x6c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d024      	beq.n	8000c3a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bf0:	f002 fde4 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_InitTick+0x6c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c00:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f924 	bl	8000e56 <HAL_SYSTICK_Config>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10f      	bne.n	8000c34 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b0f      	cmp	r3, #15
 8000c18:	d809      	bhi.n	8000c2e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c22:	f000 f8fe 	bl	8000e22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c26:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <HAL_InitTick+0x70>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e007      	b.n	8000c3e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e004      	b.n	8000c3e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e001      	b.n	8000c3e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000001c 	.word	0x2000001c
 8000c4c:	20000018 	.word	0x20000018

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	2000001c 	.word	0x2000001c
 8000c74:	2000044c 	.word	0x2000044c

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000044c 	.word	0x2000044c

08000c90 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTickPrio+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000018 	.word	0x20000018

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff47 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff5e 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff90 	bl	8000d60 <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5f 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffb2 	bl	8000dc8 <SysTick_Config>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e02d      	b.n	8000edc <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d106      	bne.n	8000e9a <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fd59 	bl	800094c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 8000ea4:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6851      	ldr	r1, [r2, #4]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6892      	ldr	r2, [r2, #8]
 8000eb0:	4311      	orrs	r1, r2
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6952      	ldr	r2, [r2, #20]
 8000eb6:	4311      	orrs	r1, r2
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d17c      	bne.n	8000ffa <HAL_CRYP_Encrypt+0x116>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d101      	bne.n	8000f16 <HAL_CRYP_Encrypt+0x32>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e07a      	b.n	800100c <HAL_CRYP_Encrypt+0x128>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d106      	bne.n	8000f4e <HAL_CRYP_Encrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8000f4c:	e003      	b.n	8000f56 <HAL_CRYP_Encrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0218 	bic.w	r2, r2, #24
 8000f64:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b29      	ldr	r3, [pc, #164]	; (8001014 <HAL_CRYP_Encrypt+0x130>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]

    switch (algo)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f78:	d023      	beq.n	8000fc2 <HAL_CRYP_Encrypt+0xde>
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f80:	d826      	bhi.n	8000fd0 <HAL_CRYP_Encrypt+0xec>
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	2b60      	cmp	r3, #96	; 0x60
 8000f86:	d015      	beq.n	8000fb4 <HAL_CRYP_Encrypt+0xd0>
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b60      	cmp	r3, #96	; 0x60
 8000f8c:	d820      	bhi.n	8000fd0 <HAL_CRYP_Encrypt+0xec>
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	2b40      	cmp	r3, #64	; 0x40
 8000f92:	d008      	beq.n	8000fa6 <HAL_CRYP_Encrypt+0xc2>
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	2b40      	cmp	r3, #64	; 0x40
 8000f98:	d81a      	bhi.n	8000fd0 <HAL_CRYP_Encrypt+0xec>
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <HAL_CRYP_Encrypt+0xc2>
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	2b20      	cmp	r3, #32
 8000fa4:	d114      	bne.n	8000fd0 <HAL_CRYP_Encrypt+0xec>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 8000fa6:	6a39      	ldr	r1, [r7, #32]
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f000 f8db 	bl	8001164 <CRYP_AES_Encrypt>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	75fb      	strb	r3, [r7, #23]
        break;
 8000fb2:	e016      	b.n	8000fe2 <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 8000fb4:	6a39      	ldr	r1, [r7, #32]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 fb46 	bl	8001648 <CRYP_AESGCM_Process>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	75fb      	strb	r3, [r7, #23]
        break;
 8000fc0:	e00f      	b.n	8000fe2 <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8000fc2:	6a39      	ldr	r1, [r7, #32]
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f000 fce9 	bl	800199c <CRYP_AESCCM_Process>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	75fb      	strb	r3, [r7, #23]
        break;
 8000fce:	e008      	b.n	8000fe2 <HAL_CRYP_Encrypt+0xfe>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd4:	f043 0220 	orr.w	r2, r3, #32
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	75fb      	strb	r3, [r7, #23]
        break;
 8000fe0:	bf00      	nop
    }

    if (status == HAL_OK)
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d110      	bne.n	800100a <HAL_CRYP_Encrypt+0x126>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000ff8:	e007      	b.n	800100a <HAL_CRYP_Encrypt+0x126>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ffe:	f043 0208 	orr.w	r2, r3, #8
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800100a:	7dfb      	ldrb	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	00010060 	.word	0x00010060

08001018 <HAL_CRYP_Decrypt>:
  * @param  Output Pointer to the output buffer(plaintext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d17e      	bne.n	8001132 <HAL_CRYP_Decrypt+0x11a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2202      	movs	r2, #2
 8001038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_CRYP_Decrypt+0x32>
 8001046:	2302      	movs	r3, #2
 8001048:	e07c      	b.n	8001144 <HAL_CRYP_Decrypt+0x12c>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <HAL_CRYP_Decrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	b29a      	uxth	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8001080:	e003      	b.n	800108a <HAL_CRYP_Decrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	88fa      	ldrh	r2, [r7, #6]
 8001086:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 0218 	bic.w	r2, r3, #24
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0210 	orr.w	r2, r2, #16
 800109c:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b29      	ldr	r3, [pc, #164]	; (800114c <HAL_CRYP_Decrypt+0x134>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]

    switch (algo)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b0:	d023      	beq.n	80010fa <HAL_CRYP_Decrypt+0xe2>
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d826      	bhi.n	8001108 <HAL_CRYP_Decrypt+0xf0>
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	2b60      	cmp	r3, #96	; 0x60
 80010be:	d015      	beq.n	80010ec <HAL_CRYP_Decrypt+0xd4>
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b60      	cmp	r3, #96	; 0x60
 80010c4:	d820      	bhi.n	8001108 <HAL_CRYP_Decrypt+0xf0>
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	2b40      	cmp	r3, #64	; 0x40
 80010ca:	d008      	beq.n	80010de <HAL_CRYP_Decrypt+0xc6>
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	2b40      	cmp	r3, #64	; 0x40
 80010d0:	d81a      	bhi.n	8001108 <HAL_CRYP_Decrypt+0xf0>
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <HAL_CRYP_Decrypt+0xc6>
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	2b20      	cmp	r3, #32
 80010dc:	d114      	bne.n	8001108 <HAL_CRYP_Decrypt+0xf0>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 80010de:	6a39      	ldr	r1, [r7, #32]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 f8b8 	bl	8001256 <CRYP_AES_Decrypt>
 80010e6:	4603      	mov	r3, r0
 80010e8:	75fb      	strb	r3, [r7, #23]
        break;
 80010ea:	e016      	b.n	800111a <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80010ec:	6a39      	ldr	r1, [r7, #32]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 faaa 	bl	8001648 <CRYP_AESGCM_Process>
 80010f4:	4603      	mov	r3, r0
 80010f6:	75fb      	strb	r3, [r7, #23]
        break;
 80010f8:	e00f      	b.n	800111a <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 80010fa:	6a39      	ldr	r1, [r7, #32]
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 fc4d 	bl	800199c <CRYP_AESCCM_Process>
 8001102:	4603      	mov	r3, r0
 8001104:	75fb      	strb	r3, [r7, #23]
        break;
 8001106:	e008      	b.n	800111a <HAL_CRYP_Decrypt+0x102>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110c:	f043 0220 	orr.w	r2, r3, #32
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	75fb      	strb	r3, [r7, #23]
        break;
 8001118:	bf00      	nop
    }

    if (status == HAL_OK)
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d110      	bne.n	8001142 <HAL_CRYP_Decrypt+0x12a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001130:	e007      	b.n	8001142 <HAL_CRYP_Decrypt+0x12a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001136:	f043 0208 	orr.w	r2, r3, #8
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	00010060 	.word	0x00010060

08001150 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800116e:	2301      	movs	r3, #1
 8001170:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	2b01      	cmp	r3, #1
 8001178:	d109      	bne.n	800118e <CRYP_AES_Encrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	2b01      	cmp	r3, #1
 8001180:	d102      	bne.n	8001188 <CRYP_AES_Encrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	e002      	b.n	800118e <CRYP_AES_Encrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d121      	bne.n	80011d8 <CRYP_AES_Encrypt+0x74>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4619      	mov	r1, r3
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f9f1 	bl	8001582 <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d017      	beq.n	80011d8 <CRYP_AES_Encrypt+0x74>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6852      	ldr	r2, [r2, #4]
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6892      	ldr	r2, [r2, #8]
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68d2      	ldr	r2, [r2, #12]
 80011d6:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2202      	movs	r2, #2
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 0201 	orr.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80011f2:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011fa:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80011fc:	e00a      	b.n	8001214 <CRYP_AES_Encrypt+0xb0>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f904 	bl	800140e <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800120a:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001212:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	b29b      	uxth	r3, r3
 800121e:	89fa      	ldrh	r2, [r7, #14]
 8001220:	429a      	cmp	r2, r3
 8001222:	d207      	bcs.n	8001234 <CRYP_AES_Encrypt+0xd0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	b29b      	uxth	r3, r3
 800122e:	89ba      	ldrh	r2, [r7, #12]
 8001230:	429a      	cmp	r2, r3
 8001232:	d3e4      	bcc.n	80011fe <CRYP_AES_Encrypt+0x9a>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
*/
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8001260:	2301      	movs	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001268:	2b01      	cmp	r3, #1
 800126a:	d109      	bne.n	8001280 <CRYP_AES_Decrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <CRYP_AES_Decrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	e002      	b.n	8001280 <CRYP_AES_Decrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2b01      	cmp	r3, #1
 8001284:	f040 8084 	bne.w	8001390 <CRYP_AES_Decrypt+0x13a>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	2b40      	cmp	r3, #64	; 0x40
 800128e:	d05d      	beq.n	800134c <CRYP_AES_Decrypt+0xf6>
    {
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001296:	2b00      	cmp	r3, #0
 8001298:	d149      	bne.n	800132e <CRYP_AES_Decrypt+0xd8>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 0218 	bic.w	r2, r3, #24
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0208 	orr.w	r2, r2, #8
 80012ac:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	4619      	mov	r1, r3
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f964 	bl	8001582 <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 feeb 	bl	80020a8 <CRYP_WaitOnCCFlag>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d017      	beq.n	8001308 <CRYP_AES_Decrypt+0xb2>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	f043 0210 	orr.w	r2, r3, #16
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e07e      	b.n	8001406 <CRYP_AES_Decrypt+0x1b0>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001316:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 0218 	bic.w	r2, r3, #24
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0210 	orr.w	r2, r2, #16
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e014      	b.n	8001358 <CRYP_AES_Decrypt+0x102>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	4619      	mov	r1, r3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f924 	bl	8001582 <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0218 	orr.w	r2, r2, #24
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e005      	b.n	8001358 <CRYP_AES_Decrypt+0x102>
      }
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f915 	bl	8001582 <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d017      	beq.n	8001390 <CRYP_AES_Decrypt+0x13a>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6852      	ldr	r2, [r2, #4]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6892      	ldr	r2, [r2, #8]
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68d2      	ldr	r2, [r2, #12]
 800138e:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013aa:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013b2:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80013b4:	e00a      	b.n	80013cc <CRYP_AES_Decrypt+0x176>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f828 	bl	800140e <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013c2:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ca:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	89fa      	ldrh	r2, [r7, #14]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <CRYP_AES_Decrypt+0x196>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	89ba      	ldrh	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d3e4      	bcc.n	80013b6 <CRYP_AES_Decrypt+0x160>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b088      	sub	sp, #32
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001420:	b29b      	uxth	r3, r3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	441a      	add	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001432:	b29b      	uxth	r3, r3
 8001434:	3301      	adds	r3, #1
 8001436:	b29a      	uxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001444:	b29b      	uxth	r3, r3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	441a      	add	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001456:	b29b      	uxth	r3, r3
 8001458:	3301      	adds	r3, #1
 800145a:	b29a      	uxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001468:	b29b      	uxth	r3, r3
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	441a      	add	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800147a:	b29b      	uxth	r3, r3
 800147c:	3301      	adds	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800148c:	b29b      	uxth	r3, r3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	441a      	add	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3301      	adds	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fdfc 	bl	80020a8 <CRYP_WaitOnCCFlag>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d018      	beq.n	80014e8 <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ca:	f043 0210 	orr.w	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fe34 	bl	8001150 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014f6:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e00c      	b.n	8001518 <CRYP_AES_ProcessData+0x10a>
  {
    temp[i] = hcryp->Instance->DOUTR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	f107 0120 	add.w	r1, r7, #32
 800150c:	440b      	add	r3, r1
 800150e:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d9ef      	bls.n	80014fe <CRYP_AES_ProcessData+0xf0>
  }
  i= 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8001522:	e01b      	b.n	800155c <CRYP_AES_ProcessData+0x14e>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800152e:	b29b      	uxth	r3, r3
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	441a      	add	r2, r3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	f107 0120 	add.w	r1, r7, #32
 800153c:	440b      	add	r3, r1
 800153e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001542:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800154a:	b29b      	uxth	r3, r3
 800154c:	3301      	adds	r3, #1
 800154e:	b29a      	uxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    i++;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001562:	b29b      	uxth	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800156c:	3303      	adds	r3, #3
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d202      	bcs.n	800157a <CRYP_AES_ProcessData+0x16c>
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d9d4      	bls.n	8001524 <CRYP_AES_ProcessData+0x116>
  }
}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d050      	beq.n	8001636 <CRYP_SetKey+0xb4>
  {
    switch (KeySize)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d034      	beq.n	8001604 <CRYP_SetKey+0x82>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015a0:	d14b      	bne.n	800163a <CRYP_SetKey+0xb8>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6852      	ldr	r2, [r2, #4]
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6892      	ldr	r2, [r2, #8]
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68d2      	ldr	r2, [r2, #12]
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6912      	ldr	r2, [r2, #16]
 80015dc:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6952      	ldr	r2, [r2, #20]
 80015e8:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6992      	ldr	r2, [r2, #24]
 80015f4:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	69d2      	ldr	r2, [r2, #28]
 8001600:	611a      	str	r2, [r3, #16]
        break;
 8001602:	e01b      	b.n	800163c <CRYP_SetKey+0xba>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6852      	ldr	r2, [r2, #4]
 800161a:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6892      	ldr	r2, [r2, #8]
 8001626:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68d2      	ldr	r2, [r2, #12]
 8001632:	611a      	str	r2, [r3, #16]

        break;
 8001634:	e002      	b.n	800163c <CRYP_SetKey+0xba>
      default:
        break;
    }
  }
 8001636:	bf00      	nop
 8001638:	e000      	b.n	800163c <CRYP_SetKey+0xba>
        break;
 800163a:	bf00      	nop
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	; 0x38
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	b29b      	uxth	r3, r3
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800165e:	2301      	movs	r3, #1
 8001660:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	2b01      	cmp	r3, #1
 8001668:	d118      	bne.n	800169c <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	2b01      	cmp	r3, #1
 8001670:	d10a      	bne.n	8001688 <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8001680:	441a      	add	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	65da      	str	r2, [r3, #92]	; 0x5c
 8001686:	e00f      	b.n	80016a8 <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	65da      	str	r2, [r3, #92]	; 0x5c
 800169a:	e005      	b.n	80016a8 <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d16d      	bne.n	800178a <CRYP_AESGCM_Process+0x142>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80016c2:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ff59 	bl	8001582 <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6852      	ldr	r2, [r2, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6892      	ldr	r2, [r2, #8]
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68d2      	ldr	r2, [r2, #12]
 80016fe:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fcc8 	bl	80020a8 <CRYP_WaitOnCCFlag>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00f      	beq.n	800173e <CRYP_AESGCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	f043 0210 	orr.w	r2, r3, #16
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e12a      	b.n	8001994 <CRYP_AESGCM_Process+0x34c>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800174c:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 800174e:	6839      	ldr	r1, [r7, #0]
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fad3 	bl	8001cfc <CRYP_GCMCCM_SetHeaderPhase>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <CRYP_AESGCM_Process+0x118>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e119      	b.n	8001994 <CRYP_AESGCM_Process+0x34c>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001778:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001788:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	b29b      	uxth	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <CRYP_AESGCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 800179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179c:	f023 0303 	bic.w	r3, r3, #3
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a2:	f7ff fa69 	bl	8000c78 <HAL_GetTick>
 80017a6:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80017ba:	e033      	b.n	8001824 <CRYP_AESGCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fe25 	bl	800140e <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ca:	d022      	beq.n	8001812 <CRYP_AESGCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017cc:	f7ff fa54 	bl	8000c78 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d302      	bcc.n	80017e2 <CRYP_AESGCM_Process+0x19a>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d117      	bne.n	8001812 <CRYP_AESGCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	f043 0210 	orr.w	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0c0      	b.n	8001994 <CRYP_AESGCM_Process+0x34c>
      }
    }
    incount = hcryp->CrypInCount;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001816:	b29b      	uxth	r3, r3
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001820:	b29b      	uxth	r3, r3
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	429a      	cmp	r2, r3
 800182a:	d203      	bcs.n	8001834 <CRYP_AESGCM_Process+0x1ec>
 800182c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001830:	429a      	cmp	r2, r3
 8001832:	d3c3      	bcc.n	80017bc <CRYP_AESGCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	b29b      	uxth	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a6 	beq.w	8001992 <CRYP_AESGCM_Process+0x34a>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	b29b      	uxth	r3, r3
 8001850:	3301      	adds	r3, #1
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0318 	and.w	r3, r3, #24
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10a      	bne.n	8001882 <CRYP_AESGCM_Process+0x23a>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	051a      	lsls	r2, r3, #20
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <CRYP_AESGCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f1c3 0310 	rsb	r3, r3, #16
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001896:	e005      	b.n	80018a4 <CRYP_AESGCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	f1c3 0310 	rsb	r3, r3, #16
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3301      	adds	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
 80018a8:	e014      	b.n	80018d4 <CRYP_AESGCM_Process+0x28c>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	441a      	add	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 80018ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d0:	3301      	adds	r3, #1
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
 80018d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	429a      	cmp	r2, r3
 80018da:	d3e6      	bcc.n	80018aa <CRYP_AESGCM_Process+0x262>
    }
    while (index < 4U)
 80018dc:	e006      	b.n	80018ec <CRYP_AESGCM_Process+0x2a4>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
      index++;
 80018e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e8:	3301      	adds	r3, #1
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 80018ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d9f5      	bls.n	80018de <CRYP_AESGCM_Process+0x296>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fbd7 	bl	80020a8 <CRYP_WaitOnCCFlag>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00a      	beq.n	8001916 <CRYP_AESGCM_Process+0x2ce>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fc1d 	bl	8001150 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001924:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8001926:	2300      	movs	r3, #0
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
 800192a:	e00c      	b.n	8001946 <CRYP_AESGCM_Process+0x2fe>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800193a:	440b      	add	r3, r1
 800193c:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 8001940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001942:	3301      	adds	r3, #1
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	2b03      	cmp	r3, #3
 800194a:	d9ef      	bls.n	800192c <CRYP_AESGCM_Process+0x2e4>
    }
    for (index = 0U; index < lastwordsize; index++)
 800194c:	2300      	movs	r3, #0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
 8001950:	e01b      	b.n	800198a <CRYP_AESGCM_Process+0x342>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800195c:	b29b      	uxth	r3, r3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	441a      	add	r2, r3
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800196a:	440b      	add	r3, r1
 800196c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001970:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001978:	b29b      	uxth	r3, r3
 800197a:	3301      	adds	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 8001984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001986:	3301      	adds	r3, #1
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
 800198a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800198c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198e:	429a      	cmp	r2, r3
 8001990:	d3df      	bcc.n	8001952 <CRYP_AESGCM_Process+0x30a>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3738      	adds	r7, #56	; 0x38
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80019b2:	2301      	movs	r3, #1
 80019b4:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d118      	bne.n	80019f0 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d10a      	bne.n	80019dc <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80019d4:	441a      	add	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80019da:	e00f      	b.n	80019fc <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80019e8:	461a      	mov	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ee:	e005      	b.n	80019fc <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d16d      	bne.n	8001ade <CRYP_AESCCM_Process+0x142>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8001a16:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fdaf 	bl	8001582 <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1a      	ldr	r2, [r3, #32]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6852      	ldr	r2, [r2, #4]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1a      	ldr	r2, [r3, #32]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6892      	ldr	r2, [r2, #8]
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1a      	ldr	r2, [r3, #32]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68d2      	ldr	r2, [r2, #12]
 8001a52:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fb1e 	bl	80020a8 <CRYP_WaitOnCCFlag>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00f      	beq.n	8001a92 <CRYP_AESCCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a76:	f043 0210 	orr.w	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e12f      	b.n	8001cf2 <CRYP_AESCCM_Process+0x356>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa0:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8001aa2:	6839      	ldr	r1, [r7, #0]
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f929 	bl	8001cfc <CRYP_GCMCCM_SetHeaderPhase>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <CRYP_AESCCM_Process+0x118>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e11e      	b.n	8001cf2 <CRYP_AESCCM_Process+0x356>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001acc:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001adc:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <CRYP_AESCCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8001aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af0:	f023 0303 	bic.w	r3, r3, #3
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8001af6:	f7ff f8bf 	bl	8000c78 <HAL_GetTick>
 8001afa:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001b0e:	e033      	b.n	8001b78 <CRYP_AESCCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001b10:	6839      	ldr	r1, [r7, #0]
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fc7b 	bl	800140e <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1e:	d022      	beq.n	8001b66 <CRYP_AESCCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 8001b20:	f7ff f8aa 	bl	8000c78 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d302      	bcc.n	8001b36 <CRYP_AESCCM_Process+0x19a>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d117      	bne.n	8001b66 <CRYP_AESCCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	f043 0210 	orr.w	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0c5      	b.n	8001cf2 <CRYP_AESCCM_Process+0x356>
      }
    }
    incount = hcryp->CrypInCount;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d203      	bcs.n	8001b88 <CRYP_AESCCM_Process+0x1ec>
 8001b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d3c3      	bcc.n	8001b10 <CRYP_AESCCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80ab 	beq.w	8001cf0 <CRYP_AESCCM_Process+0x354>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0318 	and.w	r3, r3, #24
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d10a      	bne.n	8001bd6 <CRYP_AESCCM_Process+0x23a>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	051a      	lsls	r2, r3, #20
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <CRYP_AESCCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f1c3 0310 	rsb	r3, r3, #16
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bea:	e005      	b.n	8001bf8 <CRYP_AESCCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f1c3 0310 	rsb	r3, r3, #16
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8001bfc:	e014      	b.n	8001c28 <CRYP_AESCCM_Process+0x28c>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	441a      	add	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8001c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c24:	3301      	adds	r3, #1
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
 8001c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d3e6      	bcc.n	8001bfe <CRYP_AESCCM_Process+0x262>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8001c30:	e006      	b.n	8001c40 <CRYP_AESCCM_Process+0x2a4>
    {
      hcryp->Instance->DINR  = 0U;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 8001c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d9f5      	bls.n	8001c32 <CRYP_AESCCM_Process+0x296>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fa2d 	bl	80020a8 <CRYP_WaitOnCCFlag>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00f      	beq.n	8001c74 <CRYP_AESCCM_Process+0x2d8>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	f043 0210 	orr.w	r2, r3, #16
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e03e      	b.n	8001cf2 <CRYP_AESCCM_Process+0x356>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c82:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
 8001c88:	e00c      	b.n	8001ca4 <CRYP_AESCCM_Process+0x308>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c98:	440b      	add	r3, r1
 8001c9a:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d9ef      	bls.n	8001c8a <CRYP_AESCCM_Process+0x2ee>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
 8001cae:	e01b      	b.n	8001ce8 <CRYP_AESCCM_Process+0x34c>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	441a      	add	r2, r3
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001cc8:	440b      	add	r3, r1
 8001cca:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001cce:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d3df      	bcc.n	8001cb0 <CRYP_AESCCM_Process+0x314>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3738      	adds	r7, #56	; 0x38
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b092      	sub	sp, #72	; 0x48
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8001d06:	4b8c      	ldr	r3, [pc, #560]	; (8001f38 <CRYP_GCMCCM_SetHeaderPhase+0x23c>)
 8001d08:	f107 040c 	add.w	r4, r7, #12
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d104      	bne.n	8001d30 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8001d2e:	e002      	b.n	8001d36 <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 8001d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 8193 	beq.w	8002064 <CRYP_GCMCCM_SetHeaderPhase+0x368>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d50:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8001d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d17a      	bne.n	8001e62 <CRYP_GCMCCM_SetHeaderPhase+0x166>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d70:	e071      	b.n	8001e56 <CRYP_GCMCCM_SetHeaderPhase+0x15a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	441a      	add	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	441a      	add	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	441a      	add	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	441a      	add	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001e02:	6839      	ldr	r1, [r7, #0]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f94f 	bl	80020a8 <CRYP_WaitOnCCFlag>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d017      	beq.n	8001e40 <CRYP_GCMCCM_SetHeaderPhase+0x144>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	f043 0210 	orr.w	r2, r3, #16
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e12f      	b.n	80020a0 <CRYP_GCMCCM_SetHeaderPhase+0x3a4>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e4e:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8001e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e52:	3304      	adds	r3, #4
 8001e54:	647b      	str	r3, [r7, #68]	; 0x44
 8001e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d388      	bcc.n	8001d72 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8001e60:	e11d      	b.n	800209e <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8001e62:	2300      	movs	r3, #0
 8001e64:	647b      	str	r3, [r7, #68]	; 0x44
 8001e66:	e074      	b.n	8001f52 <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	441a      	add	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699a      	ldr	r2, [r3, #24]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	441a      	add	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699a      	ldr	r2, [r3, #24]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	441a      	add	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	441a      	add	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8d4 	bl	80020a8 <CRYP_WaitOnCCFlag>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01a      	beq.n	8001f3c <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0b4      	b.n	80020a0 <CRYP_GCMCCM_SetHeaderPhase+0x3a4>
 8001f36:	bf00      	nop
 8001f38:	08004d64 	.word	0x08004d64
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f4a:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8001f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f4e:	3304      	adds	r3, #4
 8001f50:	647b      	str	r3, [r7, #68]	; 0x44
 8001f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d384      	bcc.n	8001e68 <CRYP_GCMCCM_SetHeaderPhase+0x16c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
 8001f62:	e014      	b.n	8001f8e <CRYP_GCMCCM_SetHeaderPhase+0x292>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699a      	ldr	r2, [r3, #24]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	441a      	add	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8001f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d3e3      	bcc.n	8001f64 <CRYP_GCMCCM_SetHeaderPhase+0x268>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 8001f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10b      	bne.n	8001fbe <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8001fa6:	e006      	b.n	8001fb6 <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8001fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 8001fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d9f5      	bls.n	8001fa8 <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 8001fbc:	e02a      	b.n	8002014 <CRYP_GCMCCM_SetHeaderPhase+0x318>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	005a      	lsls	r2, r3, #1
 8001fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fec:	4013      	ands	r3, r2
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ff6:	609a      	str	r2, [r3, #8]
         loopcounter++;
 8001ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 8001ffe:	e006      	b.n	800200e <CRYP_GCMCCM_SetHeaderPhase+0x312>
         {
           hcryp->Instance->DINR = 0x0U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
           loopcounter++;
 8002008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200a:	3301      	adds	r3, #1
 800200c:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 800200e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002010:	2b03      	cmp	r3, #3
 8002012:	d9f5      	bls.n	8002000 <CRYP_GCMCCM_SetHeaderPhase+0x304>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f846 	bl	80020a8 <CRYP_WaitOnCCFlag>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d017      	beq.n	8002052 <CRYP_GCMCCM_SetHeaderPhase+0x356>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e026      	b.n	80020a0 <CRYP_GCMCCM_SetHeaderPhase+0x3a4>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e01c      	b.n	800209e <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0106 	bic.w	r1, r3, #6
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800208c:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3748      	adds	r7, #72	; 0x48
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bdb0      	pop	{r4, r5, r7, pc}

080020a8 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80020b2:	f7fe fde1 	bl	8000c78 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80020b8:	e010      	b.n	80020dc <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d00c      	beq.n	80020dc <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7fe fdd9 	bl	8000c78 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <CRYP_WaitOnCCFlag+0x30>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e007      	b.n	80020ec <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0e7      	beq.n	80020ba <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002102:	e14c      	b.n	800239e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 813e 	beq.w	8002398 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d005      	beq.n	8002134 <HAL_GPIO_Init+0x40>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d130      	bne.n	8002196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800216a:	2201      	movs	r2, #1
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f003 0201 	and.w	r2, r3, #1
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d017      	beq.n	80021d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d123      	bne.n	8002226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3208      	adds	r2, #8
 8002220:	6939      	ldr	r1, [r7, #16]
 8002222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0203 	and.w	r2, r3, #3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8098 	beq.w	8002398 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002268:	4a54      	ldr	r2, [pc, #336]	; (80023bc <HAL_GPIO_Init+0x2c8>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002292:	d019      	beq.n	80022c8 <HAL_GPIO_Init+0x1d4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a4a      	ldr	r2, [pc, #296]	; (80023c0 <HAL_GPIO_Init+0x2cc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d013      	beq.n	80022c4 <HAL_GPIO_Init+0x1d0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a49      	ldr	r2, [pc, #292]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00d      	beq.n	80022c0 <HAL_GPIO_Init+0x1cc>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a48      	ldr	r2, [pc, #288]	; (80023c8 <HAL_GPIO_Init+0x2d4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <HAL_GPIO_Init+0x1c8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a47      	ldr	r2, [pc, #284]	; (80023cc <HAL_GPIO_Init+0x2d8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_GPIO_Init+0x1c4>
 80022b4:	2304      	movs	r3, #4
 80022b6:	e008      	b.n	80022ca <HAL_GPIO_Init+0x1d6>
 80022b8:	2307      	movs	r3, #7
 80022ba:	e006      	b.n	80022ca <HAL_GPIO_Init+0x1d6>
 80022bc:	2303      	movs	r3, #3
 80022be:	e004      	b.n	80022ca <HAL_GPIO_Init+0x1d6>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e002      	b.n	80022ca <HAL_GPIO_Init+0x1d6>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_GPIO_Init+0x1d6>
 80022c8:	2300      	movs	r3, #0
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	f002 0203 	and.w	r2, r2, #3
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	4093      	lsls	r3, r2
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022da:	4938      	ldr	r1, [pc, #224]	; (80023bc <HAL_GPIO_Init+0x2c8>)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022e8:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <HAL_GPIO_Init+0x2dc>)
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800230e:	4a30      	ldr	r2, [pc, #192]	; (80023d0 <HAL_GPIO_Init+0x2dc>)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002316:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <HAL_GPIO_Init+0x2dc>)
 8002318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800233c:	4a24      	ldr	r2, [pc, #144]	; (80023d0 <HAL_GPIO_Init+0x2dc>)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002344:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <HAL_GPIO_Init+0x2dc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002368:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <HAL_GPIO_Init+0x2dc>)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_GPIO_Init+0x2dc>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002392:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_GPIO_Init+0x2dc>)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f47f aeab 	bne.w	8002104 <HAL_GPIO_Init+0x10>
  }
}
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40010000 	.word	0x40010000
 80023c0:	48000400 	.word	0x48000400
 80023c4:	48000800 	.word	0x48000800
 80023c8:	48000c00 	.word	0x48000c00
 80023cc:	48001000 	.word	0x48001000
 80023d0:	58000800 	.word	0x58000800

080023d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e4:	787b      	ldrb	r3, [r7, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002406:	b08b      	sub	sp, #44	; 0x2c
 8002408:	af06      	add	r7, sp, #24
 800240a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0d7      	b.n	80025c6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fad2 	bl	80009d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2203      	movs	r2, #3
 8002434:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f002 fc1d 	bl	8004c7c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e04c      	b.n	80024e2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	3301      	adds	r3, #1
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	b298      	uxth	r0, r3
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	3336      	adds	r3, #54	; 0x36
 8002486:	4602      	mov	r2, r0
 8002488:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	3303      	adds	r3, #3
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3338      	adds	r3, #56	; 0x38
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	333c      	adds	r3, #60	; 0x3c
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	440b      	add	r3, r1
 80024d6:	3340      	adds	r3, #64	; 0x40
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	3301      	adds	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d3ad      	bcc.n	8002448 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e044      	b.n	800257c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	440b      	add	r3, r1
 800252c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	440b      	add	r3, r1
 800256e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	3301      	adds	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	429a      	cmp	r2, r3
 8002584:	d3b5      	bcc.n	80024f2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	687e      	ldr	r6, [r7, #4]
 800258e:	466d      	mov	r5, sp
 8002590:	f106 0410 	add.w	r4, r6, #16
 8002594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	602b      	str	r3, [r5, #0]
 800259c:	1d33      	adds	r3, r6, #4
 800259e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a0:	6838      	ldr	r0, [r7, #0]
 80025a2:	f002 fb86 	bl	8004cb2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d102      	bne.n	80025c4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f805 	bl	80025ce <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002606:	b29b      	uxth	r3, r3
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	58000400 	.word	0x58000400

08002644 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_PWREx_GetVoltageRange+0x18>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	58000400 	.word	0x58000400

08002660 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002672:	d101      	bne.n	8002678 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_RCC_HSE_Enable>:
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <LL_RCC_HSE_Disable>:
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_RCC_HSE_IsReady>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026d2:	d101      	bne.n	80026d8 <LL_RCC_HSE_IsReady+0x18>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <LL_RCC_HSE_IsReady+0x1a>
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_RCC_HSI_Enable>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_RCC_HSI_Disable>:
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_RCC_HSI_IsReady>:
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002732:	d101      	bne.n	8002738 <LL_RCC_HSI_IsReady+0x18>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <LL_RCC_HSI_IsReady+0x1a>
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800274c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_RCC_HSI48_Enable>:
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_RCC_HSI48_Disable>:
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002798:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800279c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_HSI48_IsReady>:
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d101      	bne.n	80027ca <LL_RCC_HSI48_IsReady+0x18>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_RCC_HSI48_IsReady+0x1a>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_LSE_Enable>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_RCC_LSE_Disable>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_RCC_LSE_EnableBypass>:
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002826:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_RCC_LSE_DisableBypass>:
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	d101      	bne.n	8002876 <LL_RCC_LSE_IsReady+0x18>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <LL_RCC_LSE_IsReady+0x1a>
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800288e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d101      	bne.n	80028de <LL_RCC_LSI1_IsReady+0x18>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_RCC_LSI1_IsReady+0x1a>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b08      	cmp	r3, #8
 8002940:	d101      	bne.n	8002946 <LL_RCC_LSI2_IsReady+0x18>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_RCC_LSI2_IsReady+0x1a>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002962:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	6013      	str	r3, [r2, #0]
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d101      	bne.n	80029d2 <LL_RCC_MSI_IsReady+0x16>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <LL_RCC_MSI_IsReady+0x18>
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a16:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2bb0      	cmp	r3, #176	; 0xb0
 8002a1c:	d901      	bls.n	8002a22 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002a1e:	23b0      	movs	r3, #176	; 0xb0
 8002a20:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002a22:	687b      	ldr	r3, [r7, #4]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f023 0203 	bic.w	r2, r3, #3
 8002a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ace:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ad2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002afe:	f023 020f 	bic.w	r2, r3, #15
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c00:	6013      	str	r3, [r2, #0]
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c1e:	d101      	bne.n	8002c24 <LL_RCC_PLL_IsReady+0x18>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <LL_RCC_PLL_IsReady+0x1a>
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0303 	and.w	r3, r3, #3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca4:	d101      	bne.n	8002caa <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cca:	d101      	bne.n	8002cd0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d101      	bne.n	8002cf6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d14:	d101      	bne.n	8002d1a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d38:	d101      	bne.n	8002d3e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b08d      	sub	sp, #52	; 0x34
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e37e      	b.n	800345c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8092 	beq.w	8002e90 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6c:	f7ff fe89 	bl	8002a82 <LL_RCC_GetSysClkSource>
 8002d70:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d72:	f7ff ff82 	bl	8002c7a <LL_RCC_PLL_GetMainSource>
 8002d76:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_RCC_OscConfig+0x3e>
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d14c      	bne.n	8002e1e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d149      	bne.n	8002e1e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d8a:	f7ff fe17 	bl	80029bc <LL_RCC_MSI_IsReady>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_OscConfig+0x54>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e35d      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002da4:	f7ff fe2f 	bl	8002a06 <LL_RCC_MSI_GetRange>
 8002da8:	4603      	mov	r3, r0
 8002daa:	429c      	cmp	r4, r3
 8002dac:	d914      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fd42 	bl	800383c <RCC_SetFlashLatencyFromMSIRange>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e34c      	b.n	800345c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fe09 	bl	80029de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fe2d 	bl	8002a30 <LL_RCC_MSI_SetCalibTrimming>
 8002dd6:	e013      	b.n	8002e00 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fdfe 	bl	80029de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fe22 	bl	8002a30 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fd23 	bl	800383c <RCC_SetFlashLatencyFromMSIRange>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e32d      	b.n	800345c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e00:	f000 fcdc 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4ab3      	ldr	r2, [pc, #716]	; (80030d4 <HAL_RCC_OscConfig+0x388>)
 8002e08:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e0a:	4bb3      	ldr	r3, [pc, #716]	; (80030d8 <HAL_RCC_OscConfig+0x38c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fee4 	bl	8000bdc <HAL_InitTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d039      	beq.n	8002e8e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e31e      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01e      	beq.n	8002e64 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e26:	f7ff fdab 	bl	8002980 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e2a:	f7fd ff25 	bl	8000c78 <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e32:	f7fd ff21 	bl	8000c78 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e30b      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e44:	f7ff fdba 	bl	80029bc <LL_RCC_MSI_IsReady>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f1      	beq.n	8002e32 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fdc3 	bl	80029de <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fde7 	bl	8002a30 <LL_RCC_MSI_SetCalibTrimming>
 8002e62:	e015      	b.n	8002e90 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e64:	f7ff fd9b 	bl	800299e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e68:	f7fd ff06 	bl	8000c78 <HAL_GetTick>
 8002e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e70:	f7fd ff02 	bl	8000c78 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e2ec      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e82:	f7ff fd9b 	bl	80029bc <LL_RCC_MSI_IsReady>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f1      	bne.n	8002e70 <HAL_RCC_OscConfig+0x124>
 8002e8c:	e000      	b.n	8002e90 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e8e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d04e      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e9c:	f7ff fdf1 	bl	8002a82 <LL_RCC_GetSysClkSource>
 8002ea0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea2:	f7ff feea 	bl	8002c7a <LL_RCC_PLL_GetMainSource>
 8002ea6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x16e>
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	2b0c      	cmp	r3, #12
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eba:	f7ff fc01 	bl	80026c0 <LL_RCC_HSE_IsReady>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d039      	beq.n	8002f38 <HAL_RCC_OscConfig+0x1ec>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d135      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e2c5      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed8:	d102      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x194>
 8002eda:	f7ff fbd3 	bl	8002684 <LL_RCC_HSE_Enable>
 8002ede:	e001      	b.n	8002ee4 <HAL_RCC_OscConfig+0x198>
 8002ee0:	f7ff fbdf 	bl	80026a2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d012      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fd fec4 	bl	8000c78 <HAL_GetTick>
 8002ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fd fec0 	bl	8000c78 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e2aa      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f06:	f7ff fbdb 	bl	80026c0 <LL_RCC_HSE_IsReady>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f1      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x1a8>
 8002f10:	e013      	b.n	8002f3a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f12:	f7fd feb1 	bl	8000c78 <HAL_GetTick>
 8002f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1a:	f7fd fead 	bl	8000c78 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b64      	cmp	r3, #100	; 0x64
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e297      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f2c:	f7ff fbc8 	bl	80026c0 <LL_RCC_HSE_IsReady>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f1      	bne.n	8002f1a <HAL_RCC_OscConfig+0x1ce>
 8002f36:	e000      	b.n	8002f3a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f38:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d051      	beq.n	8002fea <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f46:	f7ff fd9c 	bl	8002a82 <LL_RCC_GetSysClkSource>
 8002f4a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4c:	f7ff fe95 	bl	8002c7a <LL_RCC_PLL_GetMainSource>
 8002f50:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_OscConfig+0x218>
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d113      	bne.n	8002f86 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d110      	bne.n	8002f86 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f64:	f7ff fbdc 	bl	8002720 <LL_RCC_HSI_IsReady>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x22e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e270      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fbe0 	bl	8002744 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f84:	e031      	b.n	8002fea <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d019      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8e:	f7ff fba9 	bl	80026e4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fd fe71 	bl	8000c78 <HAL_GetTick>
 8002f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fd fe6d 	bl	8000c78 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e257      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002fac:	f7ff fbb8 	bl	8002720 <LL_RCC_HSI_IsReady>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f1      	beq.n	8002f9a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fbc2 	bl	8002744 <LL_RCC_HSI_SetCalibTrimming>
 8002fc0:	e013      	b.n	8002fea <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	f7ff fb9e 	bl	8002702 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fd fe57 	bl	8000c78 <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fce:	f7fd fe53 	bl	8000c78 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e23d      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fe0:	f7ff fb9e 	bl	8002720 <LL_RCC_HSI_IsReady>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f1      	bne.n	8002fce <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80a3 	beq.w	800314a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d076      	beq.n	80030fa <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d046      	beq.n	80030a6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003018:	f7ff fc55 	bl	80028c6 <LL_RCC_LSI1_IsReady>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d113      	bne.n	800304a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003022:	f7ff fc2e 	bl	8002882 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003026:	f7fd fe27 	bl	8000c78 <HAL_GetTick>
 800302a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800302e:	f7fd fe23 	bl	8000c78 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e20d      	b.n	800345c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003040:	f7ff fc41 	bl	80028c6 <LL_RCC_LSI1_IsReady>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f1      	beq.n	800302e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800304a:	f7ff fc4e 	bl	80028ea <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fd fe13 	bl	8000c78 <HAL_GetTick>
 8003052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003056:	f7fd fe0f 	bl	8000c78 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b03      	cmp	r3, #3
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e1f9      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003068:	f7ff fc61 	bl	800292e <LL_RCC_LSI2_IsReady>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f1      	beq.n	8003056 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fc6b 	bl	8002952 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800307c:	f7ff fc12 	bl	80028a4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fd fdfa 	bl	8000c78 <HAL_GetTick>
 8003084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003088:	f7fd fdf6 	bl	8000c78 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1e0      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800309a:	f7ff fc14 	bl	80028c6 <LL_RCC_LSI1_IsReady>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f1      	bne.n	8003088 <HAL_RCC_OscConfig+0x33c>
 80030a4:	e051      	b.n	800314a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80030a6:	f7ff fbec 	bl	8002882 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fd fde5 	bl	8000c78 <HAL_GetTick>
 80030ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030b2:	f7fd fde1 	bl	8000c78 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e1cb      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80030c4:	f7ff fbff 	bl	80028c6 <LL_RCC_LSI1_IsReady>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f1      	beq.n	80030b2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80030ce:	f7ff fc1d 	bl	800290c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030d2:	e00c      	b.n	80030ee <HAL_RCC_OscConfig+0x3a2>
 80030d4:	20000014 	.word	0x20000014
 80030d8:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030dc:	f7fd fdcc 	bl	8000c78 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1b6      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030ee:	f7ff fc1e 	bl	800292e <LL_RCC_LSI2_IsReady>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f1      	bne.n	80030dc <HAL_RCC_OscConfig+0x390>
 80030f8:	e027      	b.n	800314a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80030fa:	f7ff fc07 	bl	800290c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7fd fdbb 	bl	8000c78 <HAL_GetTick>
 8003102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003106:	f7fd fdb7 	bl	8000c78 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b03      	cmp	r3, #3
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1a1      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003118:	f7ff fc09 	bl	800292e <LL_RCC_LSI2_IsReady>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f1      	bne.n	8003106 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003122:	f7ff fbbf 	bl	80028a4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fd fda7 	bl	8000c78 <HAL_GetTick>
 800312a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800312e:	f7fd fda3 	bl	8000c78 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e18d      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003140:	f7ff fbc1 	bl	80028c6 <LL_RCC_LSI1_IsReady>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f1      	bne.n	800312e <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d05b      	beq.n	800320e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003156:	4bb5      	ldr	r3, [pc, #724]	; (800342c <HAL_RCC_OscConfig+0x6e0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d114      	bne.n	800318c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003162:	f7ff fa5f 	bl	8002624 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003166:	f7fd fd87 	bl	8000c78 <HAL_GetTick>
 800316a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316e:	f7fd fd83 	bl	8000c78 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e16d      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003180:	4baa      	ldr	r3, [pc, #680]	; (800342c <HAL_RCC_OscConfig+0x6e0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d102      	bne.n	800319a <HAL_RCC_OscConfig+0x44e>
 8003194:	f7ff fb1f 	bl	80027d6 <LL_RCC_LSE_Enable>
 8003198:	e00c      	b.n	80031b4 <HAL_RCC_OscConfig+0x468>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d104      	bne.n	80031ac <HAL_RCC_OscConfig+0x460>
 80031a2:	f7ff fb3a 	bl	800281a <LL_RCC_LSE_EnableBypass>
 80031a6:	f7ff fb16 	bl	80027d6 <LL_RCC_LSE_Enable>
 80031aa:	e003      	b.n	80031b4 <HAL_RCC_OscConfig+0x468>
 80031ac:	f7ff fb24 	bl	80027f8 <LL_RCC_LSE_Disable>
 80031b0:	f7ff fb44 	bl	800283c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d014      	beq.n	80031e6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031bc:	f7fd fd5c 	bl	8000c78 <HAL_GetTick>
 80031c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031c2:	e00a      	b.n	80031da <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7fd fd58 	bl	8000c78 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e140      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031da:	f7ff fb40 	bl	800285e <LL_RCC_LSE_IsReady>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ef      	beq.n	80031c4 <HAL_RCC_OscConfig+0x478>
 80031e4:	e013      	b.n	800320e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fd fd47 	bl	8000c78 <HAL_GetTick>
 80031ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fd fd43 	bl	8000c78 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e12b      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003204:	f7ff fb2b 	bl	800285e <LL_RCC_LSE_IsReady>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ef      	bne.n	80031ee <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d02c      	beq.n	8003274 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003222:	f7ff faa4 	bl	800276e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7fd fd27 	bl	8000c78 <HAL_GetTick>
 800322a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800322e:	f7fd fd23 	bl	8000c78 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e10d      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003240:	f7ff fab7 	bl	80027b2 <LL_RCC_HSI48_IsReady>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f1      	beq.n	800322e <HAL_RCC_OscConfig+0x4e2>
 800324a:	e013      	b.n	8003274 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800324c:	f7ff faa0 	bl	8002790 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fd fd12 	bl	8000c78 <HAL_GetTick>
 8003254:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003258:	f7fd fd0e 	bl	8000c78 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e0f8      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800326a:	f7ff faa2 	bl	80027b2 <LL_RCC_HSI48_IsReady>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f1      	bne.n	8003258 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80ee 	beq.w	800345a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327e:	f7ff fc00 	bl	8002a82 <LL_RCC_GetSysClkSource>
 8003282:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	2b02      	cmp	r3, #2
 8003292:	f040 80af 	bne.w	80033f4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0203 	and.w	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d123      	bne.n	80032ec <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d11c      	bne.n	80032ec <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d114      	bne.n	80032ec <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d10d      	bne.n	80032ec <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d106      	bne.n	80032ec <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d05d      	beq.n	80033a8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d058      	beq.n	80033a4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0ab      	b.n	800345c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003304:	f7ff fc73 	bl	8002bee <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003308:	f7fd fcb6 	bl	8000c78 <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fd fcb2 	bl	8000c78 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e09c      	b.n	800345c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ef      	bne.n	8003310 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <HAL_RCC_OscConfig+0x6e4>)
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003348:	0212      	lsls	r2, r2, #8
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003350:	4311      	orrs	r1, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003356:	4311      	orrs	r1, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800335c:	430a      	orrs	r2, r1
 800335e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003362:	4313      	orrs	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003366:	f7ff fc33 	bl	8002bd0 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800337a:	f7fd fc7d 	bl	8000c78 <HAL_GetTick>
 800337e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd fc79 	bl	8000c78 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e063      	b.n	800345c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0ef      	beq.n	8003382 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a2:	e05a      	b.n	800345a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e059      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d151      	bne.n	800345a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b6:	f7ff fc0b 	bl	8002bd0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033ca:	f7fd fc55 	bl	8000c78 <HAL_GetTick>
 80033ce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fd fc51 	bl	8000c78 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e03b      	b.n	800345c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ef      	beq.n	80033d2 <HAL_RCC_OscConfig+0x686>
 80033f2:	e032      	b.n	800345a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d02d      	beq.n	8003456 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	f7ff fbf8 	bl	8002bee <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80033fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003408:	f023 0303 	bic.w	r3, r3, #3
 800340c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800340e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003418:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800341c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003420:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fd fc29 	bl	8000c78 <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003428:	e00d      	b.n	8003446 <HAL_RCC_OscConfig+0x6fa>
 800342a:	bf00      	nop
 800342c:	58000400 	.word	0x58000400
 8003430:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fd fc20 	bl	8000c78 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ef      	bne.n	8003434 <HAL_RCC_OscConfig+0x6e8>
 8003454:	e001      	b.n	800345a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3734      	adds	r7, #52	; 0x34
 8003460:	46bd      	mov	sp, r7
 8003462:	bd90      	pop	{r4, r7, pc}

08003464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e12d      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003478:	4b98      	ldr	r3, [pc, #608]	; (80036dc <HAL_RCC_ClockConfig+0x278>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d91b      	bls.n	80034be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b95      	ldr	r3, [pc, #596]	; (80036dc <HAL_RCC_ClockConfig+0x278>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 0207 	bic.w	r2, r3, #7
 800348e:	4993      	ldr	r1, [pc, #588]	; (80036dc <HAL_RCC_ClockConfig+0x278>)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003496:	f7fd fbef 	bl	8000c78 <HAL_GetTick>
 800349a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800349e:	f7fd fbeb 	bl	8000c78 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e111      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b0:	4b8a      	ldr	r3, [pc, #552]	; (80036dc <HAL_RCC_ClockConfig+0x278>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d1ef      	bne.n	800349e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fae3 	bl	8002a9a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fbd0 	bl	8000c78 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034dc:	f7fd fbcc 	bl	8000c78 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0f2      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034ee:	f7ff fbd0 	bl	8002c92 <LL_RCC_IsActiveFlag_HPRE>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f1      	beq.n	80034dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d016      	beq.n	8003532 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fada 	bl	8002ac2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800350e:	f7fd fbb3 	bl	8000c78 <HAL_GetTick>
 8003512:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003516:	f7fd fbaf 	bl	8000c78 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0d5      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003528:	f7ff fbc5 	bl	8002cb6 <LL_RCC_IsActiveFlag_C2HPRE>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f1      	beq.n	8003516 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fad3 	bl	8002aee <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003548:	f7fd fb96 	bl	8000c78 <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003550:	f7fd fb92 	bl	8000c78 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e0b8      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003562:	f7ff fbbb 	bl	8002cdc <LL_RCC_IsActiveFlag_SHDHPRE>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f1      	beq.n	8003550 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d016      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff facd 	bl	8002b1c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003582:	f7fd fb79 	bl	8000c78 <HAL_GetTick>
 8003586:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800358a:	f7fd fb75 	bl	8000c78 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e09b      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800359c:	f7ff fbb1 	bl	8002d02 <LL_RCC_IsActiveFlag_PPRE1>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f1      	beq.n	800358a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d017      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fac3 	bl	8002b44 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035be:	f7fd fb5b 	bl	8000c78 <HAL_GetTick>
 80035c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035c6:	f7fd fb57 	bl	8000c78 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e07d      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035d8:	f7ff fba5 	bl	8002d26 <LL_RCC_IsActiveFlag_PPRE2>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f1      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d043      	beq.n	8003676 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d106      	bne.n	8003604 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035f6:	f7ff f863 	bl	80026c0 <LL_RCC_HSE_IsReady>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d11e      	bne.n	800363e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e067      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d106      	bne.n	800361a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800360c:	f7ff fafe 	bl	8002c0c <LL_RCC_PLL_IsReady>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d113      	bne.n	800363e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e05c      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003622:	f7ff f9cb 	bl	80029bc <LL_RCC_MSI_IsReady>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d108      	bne.n	800363e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e051      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003630:	f7ff f876 	bl	8002720 <LL_RCC_HSI_IsReady>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e04a      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fa09 	bl	8002a5a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003648:	f7fd fb16 	bl	8000c78 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fd fb12 	bl	8000c78 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e036      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	f7ff fa0c 	bl	8002a82 <LL_RCC_GetSysClkSource>
 800366a:	4602      	mov	r2, r0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	429a      	cmp	r2, r3
 8003674:	d1ec      	bne.n	8003650 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003676:	4b19      	ldr	r3, [pc, #100]	; (80036dc <HAL_RCC_ClockConfig+0x278>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d21b      	bcs.n	80036bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003684:	4b15      	ldr	r3, [pc, #84]	; (80036dc <HAL_RCC_ClockConfig+0x278>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 0207 	bic.w	r2, r3, #7
 800368c:	4913      	ldr	r1, [pc, #76]	; (80036dc <HAL_RCC_ClockConfig+0x278>)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fd faf0 	bl	8000c78 <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	e008      	b.n	80036ae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800369c:	f7fd faec 	bl	8000c78 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e012      	b.n	80036d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_ClockConfig+0x278>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d1ef      	bne.n	800369c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036bc:	f000 f87e 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_RCC_ClockConfig+0x27c>)
 80036c4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80036c6:	f7fd fae3 	bl	8000c90 <HAL_GetTickPrio>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fa85 	bl	8000bdc <HAL_InitTick>
 80036d2:	4603      	mov	r3, r0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	58004000 	.word	0x58004000
 80036e0:	20000014 	.word	0x20000014

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ea:	f7ff f9ca 	bl	8002a82 <LL_RCC_GetSysClkSource>
 80036ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80036f6:	f7ff f986 	bl	8002a06 <LL_RCC_MSI_GetRange>
 80036fa:	4603      	mov	r3, r0
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	e04b      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b04      	cmp	r3, #4
 8003710:	d102      	bne.n	8003718 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e045      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b08      	cmp	r3, #8
 800371c:	d10a      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800371e:	f7fe ff9f 	bl	8002660 <LL_RCC_HSE_IsEnabledDiv2>
 8003722:	4603      	mov	r3, r0
 8003724:	2b01      	cmp	r3, #1
 8003726:	d102      	bne.n	800372e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003728:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e03a      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e037      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003734:	f7ff faa1 	bl	8002c7a <LL_RCC_PLL_GetMainSource>
 8003738:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d003      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x64>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b03      	cmp	r3, #3
 8003744:	d003      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x6a>
 8003746:	e00d      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800374a:	60bb      	str	r3, [r7, #8]
        break;
 800374c:	e015      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800374e:	f7fe ff87 	bl	8002660 <LL_RCC_HSE_IsEnabledDiv2>
 8003752:	4603      	mov	r3, r0
 8003754:	2b01      	cmp	r3, #1
 8003756:	d102      	bne.n	800375e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800375a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800375c:	e00d      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003760:	60bb      	str	r3, [r7, #8]
        break;
 8003762:	e00a      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003764:	f7ff f94f 	bl	8002a06 <LL_RCC_MSI_GetRange>
 8003768:	4603      	mov	r3, r0
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003776:	60bb      	str	r3, [r7, #8]
        break;
 8003778:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800377a:	f7ff fa59 	bl	8002c30 <LL_RCC_PLL_GetN>
 800377e:	4602      	mov	r2, r0
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	fb03 f402 	mul.w	r4, r3, r2
 8003786:	f7ff fa6c 	bl	8002c62 <LL_RCC_PLL_GetDivider>
 800378a:	4603      	mov	r3, r0
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	3301      	adds	r3, #1
 8003790:	fbb4 f4f3 	udiv	r4, r4, r3
 8003794:	f7ff fa59 	bl	8002c4a <LL_RCC_PLL_GetR>
 8003798:	4603      	mov	r3, r0
 800379a:	0f5b      	lsrs	r3, r3, #29
 800379c:	3301      	adds	r3, #1
 800379e:	fbb4 f3f3 	udiv	r3, r4, r3
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80037a4:	68fb      	ldr	r3, [r7, #12]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd90      	pop	{r4, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	08004e40 	.word	0x08004e40
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	01e84800 	.word	0x01e84800

080037bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037bc:	b598      	push	{r3, r4, r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037c0:	f7ff ff90 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80037c4:	4604      	mov	r4, r0
 80037c6:	f7ff f9d1 	bl	8002b6c <LL_RCC_GetAHBPrescaler>
 80037ca:	4603      	mov	r3, r0
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	4a03      	ldr	r2, [pc, #12]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80037d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd98      	pop	{r3, r4, r7, pc}
 80037e0:	08004de0 	.word	0x08004de0

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b598      	push	{r3, r4, r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037e8:	f7ff ffe8 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 80037ec:	4604      	mov	r4, r0
 80037ee:	f7ff f9d7 	bl	8002ba0 <LL_RCC_GetAPB1Prescaler>
 80037f2:	4603      	mov	r3, r0
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_RCC_GetPCLK1Freq+0x28>)
 80037fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd98      	pop	{r3, r4, r7, pc}
 800380c:	08004e20 	.word	0x08004e20

08003810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003810:	b598      	push	{r3, r4, r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003814:	f7ff ffd2 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8003818:	4604      	mov	r4, r0
 800381a:	f7ff f9cd 	bl	8002bb8 <LL_RCC_GetAPB2Prescaler>
 800381e:	4603      	mov	r3, r0
 8003820:	0adb      	lsrs	r3, r3, #11
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd98      	pop	{r3, r4, r7, pc}
 8003838:	08004e20 	.word	0x08004e20

0800383c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2bb0      	cmp	r3, #176	; 0xb0
 8003848:	d903      	bls.n	8003852 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e007      	b.n	8003862 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800385c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003860:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003862:	f7ff f98f 	bl	8002b84 <LL_RCC_GetAHB4Prescaler>
 8003866:	4603      	mov	r3, r0
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	fbb2 f3f3 	udiv	r3, r2, r3
 800387a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	0c9c      	lsrs	r4, r3, #18
 8003886:	f7fe fedd 	bl	8002644 <HAL_PWREx_GetVoltageRange>
 800388a:	4603      	mov	r3, r0
 800388c:	4619      	mov	r1, r3
 800388e:	4620      	mov	r0, r4
 8003890:	f000 f80c 	bl	80038ac <RCC_SetFlashLatency>
 8003894:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	bd90      	pop	{r4, r7, pc}
 800389e:	bf00      	nop
 80038a0:	08004e40 	.word	0x08004e40
 80038a4:	08004de0 	.word	0x08004de0
 80038a8:	431bde83 	.word	0x431bde83

080038ac <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b093      	sub	sp, #76	; 0x4c
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80038b6:	4b39      	ldr	r3, [pc, #228]	; (800399c <RCC_SetFlashLatency+0xf0>)
 80038b8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80038bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80038c2:	4a37      	ldr	r2, [pc, #220]	; (80039a0 <RCC_SetFlashLatency+0xf4>)
 80038c4:	f107 031c 	add.w	r3, r7, #28
 80038c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80038ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80038ce:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <RCC_SetFlashLatency+0xf8>)
 80038d0:	f107 040c 	add.w	r4, r7, #12
 80038d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038da:	2300      	movs	r3, #0
 80038dc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e4:	d11c      	bne.n	8003920 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	643b      	str	r3, [r7, #64]	; 0x40
 80038ea:	e015      	b.n	8003918 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038f4:	4413      	add	r3, r2
 80038f6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d808      	bhi.n	8003912 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003908:	4413      	add	r3, r2
 800390a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800390e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003910:	e022      	b.n	8003958 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003914:	3301      	adds	r3, #1
 8003916:	643b      	str	r3, [r7, #64]	; 0x40
 8003918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391a:	2b03      	cmp	r3, #3
 800391c:	d9e6      	bls.n	80038ec <RCC_SetFlashLatency+0x40>
 800391e:	e01b      	b.n	8003958 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003920:	2300      	movs	r3, #0
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003924:	e015      	b.n	8003952 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800392e:	4413      	add	r3, r2
 8003930:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	429a      	cmp	r2, r3
 8003938:	d808      	bhi.n	800394c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800393a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003942:	4413      	add	r3, r2
 8003944:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003948:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800394a:	e005      	b.n	8003958 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394e:	3301      	adds	r3, #1
 8003950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003954:	2b02      	cmp	r3, #2
 8003956:	d9e6      	bls.n	8003926 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003958:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <RCC_SetFlashLatency+0xfc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 0207 	bic.w	r2, r3, #7
 8003960:	4911      	ldr	r1, [pc, #68]	; (80039a8 <RCC_SetFlashLatency+0xfc>)
 8003962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003968:	f7fd f986 	bl	8000c78 <HAL_GetTick>
 800396c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800396e:	e008      	b.n	8003982 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003970:	f7fd f982 	bl	8000c78 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e007      	b.n	8003992 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <RCC_SetFlashLatency+0xfc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800398c:	429a      	cmp	r2, r3
 800398e:	d1ef      	bne.n	8003970 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	374c      	adds	r7, #76	; 0x4c
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}
 800399a:	bf00      	nop
 800399c:	08004d94 	.word	0x08004d94
 80039a0:	08004da4 	.word	0x08004da4
 80039a4:	08004db0 	.word	0x08004db0
 80039a8:	58004000 	.word	0x58004000

080039ac <LL_RCC_LSE_IsEnabled>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80039b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <LL_RCC_LSE_IsEnabled+0x18>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <LL_RCC_LSE_IsEnabled+0x1a>
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_RCC_LSE_IsReady>:
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d101      	bne.n	80039e8 <LL_RCC_LSE_IsReady+0x18>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <LL_RCC_LSE_IsReady+0x1a>
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_RCC_MSI_EnablePLLMode>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80039f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a02:	f043 0304 	orr.w	r3, r3, #4
 8003a06:	6013      	str	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <LL_RCC_SetRFWKPClockSource>:
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_RCC_SetSMPSClockSource>:
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	f023 0203 	bic.w	r2, r3, #3
 8003a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <LL_RCC_SetSMPSPrescaler>:
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <LL_RCC_SetUSARTClockSource>:
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f023 0203 	bic.w	r2, r3, #3
 8003aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_RCC_SetLPUARTClockSource>:
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <LL_RCC_SetI2CClockSource>:
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003afe:	43db      	mvns	r3, r3
 8003b00:	401a      	ands	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_SetLPTIMClockSource>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	43db      	mvns	r3, r3
 8003b38:	401a      	ands	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	041b      	lsls	r3, r3, #16
 8003b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_RCC_SetSAIClockSource>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_RCC_SetRNGClockSource>:
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_RCC_SetCLK48ClockSource>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_RCC_SetUSBClockSource>:
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ffe3 	bl	8003bac <LL_RCC_SetCLK48ClockSource>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <LL_RCC_SetADCClockSource>:
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <LL_RCC_SetRTCClockSource>:
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_RCC_GetRTCClockSource>:
{
 8003c46:	b480      	push	{r7}
 8003c48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_RCC_ForceBackupDomainReset>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_RCC_PLLSAI1_Enable>:
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cb6:	6013      	str	r3, [r2, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <LL_RCC_PLLSAI1_Disable>:
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cd4:	6013      	str	r3, [r2, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_RCC_PLLSAI1_IsReady>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf2:	d101      	bne.n	8003cf8 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003d10:	2300      	movs	r3, #0
 8003d12:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d034      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d28:	d021      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003d2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d2e:	d81b      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d34:	d01d      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003d36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d3a:	d815      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d44:	d110      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d56:	e00d      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 f94d 	bl	8003ffc <RCCEx_PLLSAI1_ConfigNP>
 8003d62:	4603      	mov	r3, r0
 8003d64:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d66:	e005      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	77fb      	strb	r3, [r7, #31]
        break;
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d74:	7ffb      	ldrb	r3, [r7, #31]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d105      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fee8 	bl	8003b54 <LL_RCC_SetSAIClockSource>
 8003d84:	e001      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	7ffb      	ldrb	r3, [r7, #31]
 8003d88:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d046      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003d96:	f7ff ff56 	bl	8003c46 <LL_RCC_GetRTCClockSource>
 8003d9a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d03c      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003da6:	f7fe fc3d 	bl	8002624 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff30 	bl	8003c1a <LL_RCC_SetRTCClockSource>
 8003dba:	e02e      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003dc6:	f7ff ff4b 	bl	8003c60 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003dca:	f7ff ff5a 	bl	8003c82 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003de6:	f7ff fde1 	bl	80039ac <LL_RCC_LSE_IsEnabled>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d114      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003df0:	f7fc ff42 	bl	8000c78 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003df6:	e00b      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fc ff3e 	bl	8000c78 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d902      	bls.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	77fb      	strb	r3, [r7, #31]
              break;
 8003e0e:	e004      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e10:	f7ff fdde 	bl	80039d0 <LL_RCC_LSE_IsReady>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d1ee      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
 8003e1c:	77bb      	strb	r3, [r7, #30]
 8003e1e:	e001      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	7ffb      	ldrb	r3, [r7, #31]
 8003e22:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d004      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fe2a 	bl	8003a8e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fe35 	bl	8003aba <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fe5d 	bl	8003b20 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fe52 	bl	8003b20 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fe2a 	bl	8003ae6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fe1f 	bl	8003ae6 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d022      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fe8d 	bl	8003bd8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ec6:	d107      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ee0:	d10b      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f8e3 	bl	80040b2 <RCCEx_PLLSAI1_ConfigNQ>
 8003eec:	4603      	mov	r3, r0
 8003eee:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003ef0:	7ffb      	ldrb	r3, [r7, #31]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003ef6:	7ffb      	ldrb	r3, [r7, #31]
 8003ef8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02b      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f18:	d003      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d105      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fe2a 	bl	8003b80 <LL_RCC_SetRNGClockSource>
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f7ff fe21 	bl	8003b80 <LL_RCC_SetRNGClockSource>
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff fe34 	bl	8003bac <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d022      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fe3d 	bl	8003bee <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f96:	d10b      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f8e3 	bl	8004168 <RCCEx_PLLSAI1_ConfigNR>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003fa6:	7ffb      	ldrb	r3, [r7, #31]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8003fac:	7ffb      	ldrb	r3, [r7, #31]
 8003fae:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d004      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fd26 	bl	8003a12 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fd45 	bl	8003a66 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fd2c 	bl	8003a3e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003fe6:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003ff4:	f7ff fcfe 	bl	80039f4 <LL_RCC_MSI_EnablePLLMode>
}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004008:	f7ff fe5b 	bl	8003cc2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800400c:	f7fc fe34 	bl	8000c78 <HAL_GetTick>
 8004010:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004012:	e009      	b.n	8004028 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004014:	f7fc fe30 	bl	8000c78 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d902      	bls.n	8004028 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	73fb      	strb	r3, [r7, #15]
      break;
 8004026:	e004      	b.n	8004032 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004028:	f7ff fe5a 	bl	8003ce0 <LL_RCC_PLLSAI1_IsReady>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d137      	bne.n	80040a8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404c:	4313      	orrs	r3, r2
 800404e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004062:	4313      	orrs	r3, r2
 8004064:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004066:	f7ff fe1d 	bl	8003ca4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406a:	f7fc fe05 	bl	8000c78 <HAL_GetTick>
 800406e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004070:	e009      	b.n	8004086 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004072:	f7fc fe01 	bl	8000c78 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d902      	bls.n	8004086 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	73fb      	strb	r3, [r7, #15]
        break;
 8004084:	e004      	b.n	8004090 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004086:	f7ff fe2b 	bl	8003ce0 <LL_RCC_PLLSAI1_IsReady>
 800408a:	4603      	mov	r3, r0
 800408c:	2b01      	cmp	r3, #1
 800408e:	d1f0      	bne.n	8004072 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d108      	bne.n	80040a8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a4:	4313      	orrs	r3, r2
 80040a6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80040be:	f7ff fe00 	bl	8003cc2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80040c2:	f7fc fdd9 	bl	8000c78 <HAL_GetTick>
 80040c6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80040c8:	e009      	b.n	80040de <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040ca:	f7fc fdd5 	bl	8000c78 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d902      	bls.n	80040de <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	e004      	b.n	80040e8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80040de:	f7ff fdff 	bl	8003ce0 <LL_RCC_PLLSAI1_IsReady>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d137      	bne.n	800415e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004102:	4313      	orrs	r3, r2
 8004104:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004118:	4313      	orrs	r3, r2
 800411a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800411c:	f7ff fdc2 	bl	8003ca4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004120:	f7fc fdaa 	bl	8000c78 <HAL_GetTick>
 8004124:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004126:	e009      	b.n	800413c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004128:	f7fc fda6 	bl	8000c78 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d902      	bls.n	800413c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	73fb      	strb	r3, [r7, #15]
        break;
 800413a:	e004      	b.n	8004146 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800413c:	f7ff fdd0 	bl	8003ce0 <LL_RCC_PLLSAI1_IsReady>
 8004140:	4603      	mov	r3, r0
 8004142:	2b01      	cmp	r3, #1
 8004144:	d1f0      	bne.n	8004128 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d108      	bne.n	800415e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800414c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415a:	4313      	orrs	r3, r2
 800415c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004174:	f7ff fda5 	bl	8003cc2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004178:	f7fc fd7e 	bl	8000c78 <HAL_GetTick>
 800417c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800417e:	e009      	b.n	8004194 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004180:	f7fc fd7a 	bl	8000c78 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d902      	bls.n	8004194 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	73fb      	strb	r3, [r7, #15]
      break;
 8004192:	e004      	b.n	800419e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004194:	f7ff fda4 	bl	8003ce0 <LL_RCC_PLLSAI1_IsReady>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d137      	bne.n	8004214 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b8:	4313      	orrs	r3, r2
 80041ba:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ce:	4313      	orrs	r3, r2
 80041d0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80041d2:	f7ff fd67 	bl	8003ca4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d6:	f7fc fd4f 	bl	8000c78 <HAL_GetTick>
 80041da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041dc:	e009      	b.n	80041f2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041de:	f7fc fd4b 	bl	8000c78 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d902      	bls.n	80041f2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	73fb      	strb	r3, [r7, #15]
        break;
 80041f0:	e004      	b.n	80041fc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041f2:	f7ff fd75 	bl	8003ce0 <LL_RCC_PLLSAI1_IsReady>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d1f0      	bne.n	80041de <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004210:	4313      	orrs	r3, r2
 8004212:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <LL_RCC_GetUSARTClockSource>:
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4013      	ands	r3, r2
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_RCC_GetLPUARTClockSource>:
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4013      	ands	r3, r2
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e042      	b.n	80042f6 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc fb76 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	; 0x24
 800428c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f82d 	bl	8004300 <UART_SetConfig>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e022      	b.n	80042f6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fa27 	bl	800470c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 faae 	bl	8004850 <UART_CheckIdleState>
 80042f4:	4603      	mov	r3, r0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004300:	b5b0      	push	{r4, r5, r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	4313      	orrs	r3, r2
 8004322:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4ba3      	ldr	r3, [pc, #652]	; (80045b8 <UART_SetConfig+0x2b8>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	69f9      	ldr	r1, [r7, #28]
 8004334:	430b      	orrs	r3, r1
 8004336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a98      	ldr	r2, [pc, #608]	; (80045bc <UART_SetConfig+0x2bc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	4313      	orrs	r3, r2
 8004366:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004372:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	69f9      	ldr	r1, [r7, #28]
 800437c:	430b      	orrs	r3, r1
 800437e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	f023 010f 	bic.w	r1, r3, #15
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a89      	ldr	r2, [pc, #548]	; (80045c0 <UART_SetConfig+0x2c0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d120      	bne.n	80043e2 <UART_SetConfig+0xe2>
 80043a0:	2003      	movs	r0, #3
 80043a2:	f7ff ff3c 	bl	800421e <LL_RCC_GetUSARTClockSource>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d817      	bhi.n	80043dc <UART_SetConfig+0xdc>
 80043ac:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <UART_SetConfig+0xb4>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043c5 	.word	0x080043c5
 80043b8:	080043d1 	.word	0x080043d1
 80043bc:	080043cb 	.word	0x080043cb
 80043c0:	080043d7 	.word	0x080043d7
 80043c4:	2301      	movs	r3, #1
 80043c6:	76fb      	strb	r3, [r7, #27]
 80043c8:	e038      	b.n	800443c <UART_SetConfig+0x13c>
 80043ca:	2302      	movs	r3, #2
 80043cc:	76fb      	strb	r3, [r7, #27]
 80043ce:	e035      	b.n	800443c <UART_SetConfig+0x13c>
 80043d0:	2304      	movs	r3, #4
 80043d2:	76fb      	strb	r3, [r7, #27]
 80043d4:	e032      	b.n	800443c <UART_SetConfig+0x13c>
 80043d6:	2308      	movs	r3, #8
 80043d8:	76fb      	strb	r3, [r7, #27]
 80043da:	e02f      	b.n	800443c <UART_SetConfig+0x13c>
 80043dc:	2310      	movs	r3, #16
 80043de:	76fb      	strb	r3, [r7, #27]
 80043e0:	e02c      	b.n	800443c <UART_SetConfig+0x13c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a75      	ldr	r2, [pc, #468]	; (80045bc <UART_SetConfig+0x2bc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d125      	bne.n	8004438 <UART_SetConfig+0x138>
 80043ec:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80043f0:	f7ff ff25 	bl	800423e <LL_RCC_GetLPUARTClockSource>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043fa:	d017      	beq.n	800442c <UART_SetConfig+0x12c>
 80043fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004400:	d817      	bhi.n	8004432 <UART_SetConfig+0x132>
 8004402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004406:	d00b      	beq.n	8004420 <UART_SetConfig+0x120>
 8004408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440c:	d811      	bhi.n	8004432 <UART_SetConfig+0x132>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <UART_SetConfig+0x11a>
 8004412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004416:	d006      	beq.n	8004426 <UART_SetConfig+0x126>
 8004418:	e00b      	b.n	8004432 <UART_SetConfig+0x132>
 800441a:	2300      	movs	r3, #0
 800441c:	76fb      	strb	r3, [r7, #27]
 800441e:	e00d      	b.n	800443c <UART_SetConfig+0x13c>
 8004420:	2302      	movs	r3, #2
 8004422:	76fb      	strb	r3, [r7, #27]
 8004424:	e00a      	b.n	800443c <UART_SetConfig+0x13c>
 8004426:	2304      	movs	r3, #4
 8004428:	76fb      	strb	r3, [r7, #27]
 800442a:	e007      	b.n	800443c <UART_SetConfig+0x13c>
 800442c:	2308      	movs	r3, #8
 800442e:	76fb      	strb	r3, [r7, #27]
 8004430:	e004      	b.n	800443c <UART_SetConfig+0x13c>
 8004432:	2310      	movs	r3, #16
 8004434:	76fb      	strb	r3, [r7, #27]
 8004436:	e001      	b.n	800443c <UART_SetConfig+0x13c>
 8004438:	2310      	movs	r3, #16
 800443a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a5e      	ldr	r2, [pc, #376]	; (80045bc <UART_SetConfig+0x2bc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	f040 808b 	bne.w	800455e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004448:	7efb      	ldrb	r3, [r7, #27]
 800444a:	2b08      	cmp	r3, #8
 800444c:	d823      	bhi.n	8004496 <UART_SetConfig+0x196>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x154>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004479 	.word	0x08004479
 8004458:	08004497 	.word	0x08004497
 800445c:	08004481 	.word	0x08004481
 8004460:	08004497 	.word	0x08004497
 8004464:	08004487 	.word	0x08004487
 8004468:	08004497 	.word	0x08004497
 800446c:	08004497 	.word	0x08004497
 8004470:	08004497 	.word	0x08004497
 8004474:	0800448f 	.word	0x0800448f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004478:	f7ff f9b4 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800447c:	6178      	str	r0, [r7, #20]
        break;
 800447e:	e00f      	b.n	80044a0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <UART_SetConfig+0x2c4>)
 8004482:	617b      	str	r3, [r7, #20]
        break;
 8004484:	e00c      	b.n	80044a0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004486:	f7ff f92d 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 800448a:	6178      	str	r0, [r7, #20]
        break;
 800448c:	e008      	b.n	80044a0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004492:	617b      	str	r3, [r7, #20]
        break;
 8004494:	e004      	b.n	80044a0 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	76bb      	strb	r3, [r7, #26]
        break;
 800449e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 811a 	beq.w	80046dc <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	4a46      	ldr	r2, [pc, #280]	; (80045c8 <UART_SetConfig+0x2c8>)
 80044ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044b2:	461a      	mov	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d305      	bcc.n	80044d8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d902      	bls.n	80044de <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	76bb      	strb	r3, [r7, #26]
 80044dc:	e0fe      	b.n	80046dc <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	4a37      	ldr	r2, [pc, #220]	; (80045c8 <UART_SetConfig+0x2c8>)
 80044ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	f7fb fe41 	bl	800017c <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	020b      	lsls	r3, r1, #8
 800450c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004510:	0202      	lsls	r2, r0, #8
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	6849      	ldr	r1, [r1, #4]
 8004516:	0849      	lsrs	r1, r1, #1
 8004518:	4608      	mov	r0, r1
 800451a:	f04f 0100 	mov.w	r1, #0
 800451e:	1814      	adds	r4, r2, r0
 8004520:	eb43 0501 	adc.w	r5, r3, r1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	461a      	mov	r2, r3
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f7fb fe23 	bl	800017c <__aeabi_uldivmod>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4613      	mov	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004544:	d308      	bcc.n	8004558 <UART_SetConfig+0x258>
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800454c:	d204      	bcs.n	8004558 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	e0c1      	b.n	80046dc <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	76bb      	strb	r3, [r7, #26]
 800455c:	e0be      	b.n	80046dc <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004566:	d16a      	bne.n	800463e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004568:	7efb      	ldrb	r3, [r7, #27]
 800456a:	3b01      	subs	r3, #1
 800456c:	2b07      	cmp	r3, #7
 800456e:	d82d      	bhi.n	80045cc <UART_SetConfig+0x2cc>
 8004570:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <UART_SetConfig+0x278>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	08004599 	.word	0x08004599
 800457c:	080045a1 	.word	0x080045a1
 8004580:	080045cd 	.word	0x080045cd
 8004584:	080045a7 	.word	0x080045a7
 8004588:	080045cd 	.word	0x080045cd
 800458c:	080045cd 	.word	0x080045cd
 8004590:	080045cd 	.word	0x080045cd
 8004594:	080045af 	.word	0x080045af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004598:	f7ff f93a 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 800459c:	6178      	str	r0, [r7, #20]
        break;
 800459e:	e01a      	b.n	80045d6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a0:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <UART_SetConfig+0x2c4>)
 80045a2:	617b      	str	r3, [r7, #20]
        break;
 80045a4:	e017      	b.n	80045d6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a6:	f7ff f89d 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80045aa:	6178      	str	r0, [r7, #20]
        break;
 80045ac:	e013      	b.n	80045d6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b2:	617b      	str	r3, [r7, #20]
        break;
 80045b4:	e00f      	b.n	80045d6 <UART_SetConfig+0x2d6>
 80045b6:	bf00      	nop
 80045b8:	cfff69f3 	.word	0xcfff69f3
 80045bc:	40008000 	.word	0x40008000
 80045c0:	40013800 	.word	0x40013800
 80045c4:	00f42400 	.word	0x00f42400
 80045c8:	08004e80 	.word	0x08004e80
      default:
        pclk = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	76bb      	strb	r3, [r7, #26]
        break;
 80045d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d07f      	beq.n	80046dc <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	4a48      	ldr	r2, [pc, #288]	; (8004704 <UART_SetConfig+0x404>)
 80045e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045e6:	461a      	mov	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80045ee:	005a      	lsls	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	441a      	add	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	b29b      	uxth	r3, r3
 8004602:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b0f      	cmp	r3, #15
 8004608:	d916      	bls.n	8004638 <UART_SetConfig+0x338>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d212      	bcs.n	8004638 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f023 030f 	bic.w	r3, r3, #15
 800461a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	b29a      	uxth	r2, r3
 8004628:	89fb      	ldrh	r3, [r7, #14]
 800462a:	4313      	orrs	r3, r2
 800462c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	89fa      	ldrh	r2, [r7, #14]
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	e051      	b.n	80046dc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	76bb      	strb	r3, [r7, #26]
 800463c:	e04e      	b.n	80046dc <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800463e:	7efb      	ldrb	r3, [r7, #27]
 8004640:	3b01      	subs	r3, #1
 8004642:	2b07      	cmp	r3, #7
 8004644:	d821      	bhi.n	800468a <UART_SetConfig+0x38a>
 8004646:	a201      	add	r2, pc, #4	; (adr r2, 800464c <UART_SetConfig+0x34c>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	0800466d 	.word	0x0800466d
 8004650:	08004675 	.word	0x08004675
 8004654:	0800468b 	.word	0x0800468b
 8004658:	0800467b 	.word	0x0800467b
 800465c:	0800468b 	.word	0x0800468b
 8004660:	0800468b 	.word	0x0800468b
 8004664:	0800468b 	.word	0x0800468b
 8004668:	08004683 	.word	0x08004683
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7ff f8d0 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8004670:	6178      	str	r0, [r7, #20]
        break;
 8004672:	e00f      	b.n	8004694 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004674:	4b24      	ldr	r3, [pc, #144]	; (8004708 <UART_SetConfig+0x408>)
 8004676:	617b      	str	r3, [r7, #20]
        break;
 8004678:	e00c      	b.n	8004694 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467a:	f7ff f833 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 800467e:	6178      	str	r0, [r7, #20]
        break;
 8004680:	e008      	b.n	8004694 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004686:	617b      	str	r3, [r7, #20]
        break;
 8004688:	e004      	b.n	8004694 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	76bb      	strb	r3, [r7, #26]
        break;
 8004692:	bf00      	nop
    }

    if (pclk != 0U)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d020      	beq.n	80046dc <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	4a19      	ldr	r2, [pc, #100]	; (8004704 <UART_SetConfig+0x404>)
 80046a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046a4:	461a      	mov	r2, r3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	441a      	add	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	b29b      	uxth	r3, r3
 80046be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b0f      	cmp	r3, #15
 80046c4:	d908      	bls.n	80046d8 <UART_SetConfig+0x3d8>
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046cc:	d204      	bcs.n	80046d8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	e001      	b.n	80046dc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80046f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bdb0      	pop	{r4, r5, r7, pc}
 8004702:	bf00      	nop
 8004704:	08004e80 	.word	0x08004e80
 8004708:	00f42400 	.word	0x00f42400

0800470c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01a      	beq.n	8004822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800480a:	d10a      	bne.n	8004822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	605a      	str	r2, [r3, #4]
  }
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af02      	add	r7, sp, #8
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004860:	f7fc fa0a 	bl	8000c78 <HAL_GetTick>
 8004864:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b08      	cmp	r3, #8
 8004872:	d10e      	bne.n	8004892 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f82f 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e025      	b.n	80048de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b04      	cmp	r3, #4
 800489e:	d10e      	bne.n	80048be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f819 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e00f      	b.n	80048de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b09c      	sub	sp, #112	; 0x70
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f6:	e0a9      	b.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	f000 80a5 	beq.w	8004a4c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fc f9b9 	bl	8000c78 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800490e:	429a      	cmp	r2, r3
 8004910:	d302      	bcc.n	8004918 <UART_WaitOnFlagUntilTimeout+0x32>
 8004912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004914:	2b00      	cmp	r3, #0
 8004916:	d140      	bne.n	800499a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004928:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800492c:	667b      	str	r3, [r7, #100]	; 0x64
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004938:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800493c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e6      	bne.n	8004918 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3308      	adds	r3, #8
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	663b      	str	r3, [r7, #96]	; 0x60
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3308      	adds	r3, #8
 8004968:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800496a:	64ba      	str	r2, [r7, #72]	; 0x48
 800496c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e069      	b.n	8004a6e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d051      	beq.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b6:	d149      	bne.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e0:	637b      	str	r3, [r7, #52]	; 0x34
 80049e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e6      	bne.n	80049c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	613b      	str	r3, [r7, #16]
   return(result);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3308      	adds	r3, #8
 8004a12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a14:	623a      	str	r2, [r7, #32]
 8004a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	69f9      	ldr	r1, [r7, #28]
 8004a1a:	6a3a      	ldr	r2, [r7, #32]
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e010      	b.n	8004a6e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69da      	ldr	r2, [r3, #28]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	f43f af46 	beq.w	80048f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3770      	adds	r7, #112	; 0x70
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_UARTEx_DisableFifoMode+0x16>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e027      	b.n	8004adc <HAL_UARTEx_DisableFifoMode+0x66>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2224      	movs	r2, #36	; 0x24
 8004a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0201 	bic.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004aba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e02d      	b.n	8004b5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2224      	movs	r2, #36	; 0x24
 8004b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f84f 	bl	8004be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e02d      	b.n	8004bd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2224      	movs	r2, #36	; 0x24
 8004b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f811 	bl	8004be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d108      	bne.n	8004c02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c00:	e031      	b.n	8004c66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c02:	2308      	movs	r3, #8
 8004c04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c06:	2308      	movs	r3, #8
 8004c08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	0e5b      	lsrs	r3, r3, #25
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	0f5b      	lsrs	r3, r3, #29
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c2a:	7bbb      	ldrb	r3, [r7, #14]
 8004c2c:	7b3a      	ldrb	r2, [r7, #12]
 8004c2e:	4911      	ldr	r1, [pc, #68]	; (8004c74 <UARTEx_SetNbDataToProcess+0x94>)
 8004c30:	5c8a      	ldrb	r2, [r1, r2]
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c36:	7b3a      	ldrb	r2, [r7, #12]
 8004c38:	490f      	ldr	r1, [pc, #60]	; (8004c78 <UARTEx_SetNbDataToProcess+0x98>)
 8004c3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	7b7a      	ldrb	r2, [r7, #13]
 8004c4c:	4909      	ldr	r1, [pc, #36]	; (8004c74 <UARTEx_SetNbDataToProcess+0x94>)
 8004c4e:	5c8a      	ldrb	r2, [r1, r2]
 8004c50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c54:	7b7a      	ldrb	r2, [r7, #13]
 8004c56:	4908      	ldr	r1, [pc, #32]	; (8004c78 <UARTEx_SetNbDataToProcess+0x98>)
 8004c58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	08004e98 	.word	0x08004e98
 8004c78:	08004ea0 	.word	0x08004ea0

08004c7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c84:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	f107 0014 	add.w	r0, r7, #20
 8004cc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	b004      	add	sp, #16
 8004cf2:	4770      	bx	lr

08004cf4 <__libc_init_array>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	4d0d      	ldr	r5, [pc, #52]	; (8004d2c <__libc_init_array+0x38>)
 8004cf8:	4c0d      	ldr	r4, [pc, #52]	; (8004d30 <__libc_init_array+0x3c>)
 8004cfa:	1b64      	subs	r4, r4, r5
 8004cfc:	10a4      	asrs	r4, r4, #2
 8004cfe:	2600      	movs	r6, #0
 8004d00:	42a6      	cmp	r6, r4
 8004d02:	d109      	bne.n	8004d18 <__libc_init_array+0x24>
 8004d04:	4d0b      	ldr	r5, [pc, #44]	; (8004d34 <__libc_init_array+0x40>)
 8004d06:	4c0c      	ldr	r4, [pc, #48]	; (8004d38 <__libc_init_array+0x44>)
 8004d08:	f000 f820 	bl	8004d4c <_init>
 8004d0c:	1b64      	subs	r4, r4, r5
 8004d0e:	10a4      	asrs	r4, r4, #2
 8004d10:	2600      	movs	r6, #0
 8004d12:	42a6      	cmp	r6, r4
 8004d14:	d105      	bne.n	8004d22 <__libc_init_array+0x2e>
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1c:	4798      	blx	r3
 8004d1e:	3601      	adds	r6, #1
 8004d20:	e7ee      	b.n	8004d00 <__libc_init_array+0xc>
 8004d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d26:	4798      	blx	r3
 8004d28:	3601      	adds	r6, #1
 8004d2a:	e7f2      	b.n	8004d12 <__libc_init_array+0x1e>
 8004d2c:	08004eb0 	.word	0x08004eb0
 8004d30:	08004eb0 	.word	0x08004eb0
 8004d34:	08004eb0 	.word	0x08004eb0
 8004d38:	08004eb4 	.word	0x08004eb4

08004d3c <memset>:
 8004d3c:	4402      	add	r2, r0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d100      	bne.n	8004d46 <memset+0xa>
 8004d44:	4770      	bx	lr
 8004d46:	f803 1b01 	strb.w	r1, [r3], #1
 8004d4a:	e7f9      	b.n	8004d40 <memset+0x4>

08004d4c <_init>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	bf00      	nop
 8004d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d52:	bc08      	pop	{r3}
 8004d54:	469e      	mov	lr, r3
 8004d56:	4770      	bx	lr

08004d58 <_fini>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	bf00      	nop
 8004d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5e:	bc08      	pop	{r3}
 8004d60:	469e      	mov	lr, r3
 8004d62:	4770      	bx	lr
