
PCROP-STM32WB55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .PCROPed      0000002c  08008000  08008000  00028000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000391c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f4  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08003b4c  08003b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000000c  20000004  08003b5c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000003a8  20000010  08003b68  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200003b8  08003b68  000203b8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002802c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000150b1  00000000  00000000  0002805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002835  00000000  00000000  0003d10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001428  00000000  00000000  0003f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001340  00000000  00000000  00040d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000211e1  00000000  00000000  000420b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011aed  00000000  00000000  00063291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d48e4  00000000  00000000  00074d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00149662  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000053f8  00000000  00000000  001496b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .PCROPed:

08008000 <secret_led_blinking>:
#include "main.h"

uint32_t cpt;

void secret_led_blinking(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
	cpt++;
 8008004:	f240 032c 	movw	r3, #44	; 0x2c
 8008008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	f240 032c 	movw	r3, #44	; 0x2c
 8008014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008018:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800801a:	2101      	movs	r1, #1
 800801c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008020:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8008024:	f7f9 f84e 	bl	80010c4 <HAL_GPIO_TogglePin>
}
 8008028:	bf00      	nop
 800802a:	bd80      	pop	{r7, pc}

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08003a40 	.word	0x08003a40

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08003a40 	.word	0x08003a40

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000484:	f023 0218 	bic.w	r2, r3, #24
 8000488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4313      	orrs	r3, r2
 8000490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c4:	68fb      	ldr	r3, [r7, #12]
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fadf 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f80d 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f927 	bl	8000730 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 f8af 	bl	8000644 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004e6:	f000 f8fb 	bl	80006e0 <MX_USB_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  secret_led_blinking();
 80004ea:	f007 fd89 	bl	8008000 <secret_led_blinking>
	  HAL_Delay(500);
 80004ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f2:	f000 fb57 	bl	8000ba4 <HAL_Delay>
  {
 80004f6:	e7f8      	b.n	80004ea <main+0x18>

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b0ae      	sub	sp, #184	; 0xb8
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000502:	2248      	movs	r2, #72	; 0x48
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fa92 	bl	8003a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
 800051c:	615a      	str	r2, [r3, #20]
 800051e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2250      	movs	r2, #80	; 0x50
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 fa82 	bl	8003a30 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800053a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	f023 0303 	bic.w	r3, r3, #3
 8000546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000550:	f000 fee2 	bl	8001318 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000554:	2000      	movs	r0, #0
 8000556:	f7ff ff8d 	bl	8000474 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055a:	4b39      	ldr	r3, [pc, #228]	; (8000640 <SystemClock_Config+0x148>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000562:	4a37      	ldr	r2, [pc, #220]	; (8000640 <SystemClock_Config+0x148>)
 8000564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <SystemClock_Config+0x148>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000576:	2327      	movs	r3, #39	; 0x27
 8000578:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000588:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800058a:	2301      	movs	r3, #1
 800058c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800059c:	2360      	movs	r3, #96	; 0x60
 800059e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fa47 	bl	8001a40 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b8:	f000 f902 	bl	80007c0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005bc:	236f      	movs	r3, #111	; 0x6f
 80005be:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005c0:	2302      	movs	r3, #2
 80005c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005dc:	2101      	movs	r1, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fdba 	bl	8002158 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80005ea:	f000 f8e9 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80005ee:	f242 1301 	movw	r3, #8449	; 0x2101
 80005f2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80005f4:	2318      	movs	r3, #24
 80005f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80005f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80005fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000602:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000604:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000608:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800060a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800060e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800061a:	2300      	movs	r3, #0
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800061e:	2300      	movs	r3, #0
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f002 f9e7 	bl	80029f8 <HAL_RCCEx_PeriphCLKConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000630:	f000 f8c6 	bl	80007c0 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000634:	f002 fb56 	bl	8002ce4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000638:	bf00      	nop
 800063a:	37b8      	adds	r7, #184	; 0xb8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58000400 	.word	0x58000400

08000644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <MX_USART1_UART_Init+0x98>)
 800064c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800064e:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800065c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 800066c:	220c      	movs	r2, #12
 800066e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000690:	f002 fc5f 	bl	8002f52 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800069a:	f000 f891 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 80006a2:	f003 f89b 	bl	80037dc <HAL_UARTEx_SetTxFifoThreshold>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80006ac:	f000 f888 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 80006b4:	f003 f8d0 	bl	8003858 <HAL_UARTEx_SetRxFifoThreshold>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80006be:	f000 f87f 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 80006c4:	f003 f851 	bl	800376a <HAL_UARTEx_DisableFifoMode>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80006ce:	f000 f877 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000030 	.word	0x20000030
 80006dc:	40013800 	.word	0x40013800

080006e0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USB_PCD_Init+0x48>)
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <MX_USB_PCD_Init+0x4c>)
 80006e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_USB_PCD_Init+0x48>)
 80006ec:	2208      	movs	r2, #8
 80006ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_USB_PCD_Init+0x48>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USB_PCD_Init+0x48>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_USB_PCD_Init+0x48>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USB_PCD_Init+0x48>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_USB_PCD_Init+0x48>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USB_PCD_Init+0x48>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_USB_PCD_Init+0x48>)
 8000716:	f000 fcef 	bl	80010f8 <HAL_PCD_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000720:	f000 f84e 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000c0 	.word	0x200000c0
 800072c:	40006800 	.word	0x40006800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	2004      	movs	r0, #4
 8000746:	f7ff feab 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2002      	movs	r0, #2
 800074c:	f7ff fea8 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff fea5 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2008      	movs	r0, #8
 8000758:	f7ff fea2 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2123      	movs	r1, #35	; 0x23
 8000760:	4814      	ldr	r0, [pc, #80]	; (80007b4 <MX_GPIO_Init+0x84>)
 8000762:	f000 fc97 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000766:	2310      	movs	r3, #16
 8000768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4810      	ldr	r0, [pc, #64]	; (80007b8 <MX_GPIO_Init+0x88>)
 8000778:	f000 fb1c 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800077c:	2323      	movs	r3, #35	; 0x23
 800077e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <MX_GPIO_Init+0x84>)
 8000792:	f000 fb0f 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000796:	2303      	movs	r3, #3
 8000798:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_GPIO_Init+0x8c>)
 80007a8:	f000 fb04 	bl	8000db4 <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	48000400 	.word	0x48000400
 80007b8:	48000800 	.word	0x48000800
 80007bc:	48000c00 	.word	0x48000c00

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>

080007ca <LL_AHB2_GRP1_EnableClock>:
{
 80007ca:	b480      	push	{r7}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4313      	orrs	r3, r2
 80007e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800080a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4013      	ands	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000820:	68fb      	ldr	r3, [r7, #12]
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800082e:	b480      	push	{r7}
 8000830:	b085      	sub	sp, #20
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800083a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800083c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4313      	orrs	r3, r2
 8000844:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4013      	ands	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_UART_MspInit+0x58>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d116      	bne.n	80008c0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000892:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000896:	f7ff ffca 	bl	800082e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2002      	movs	r0, #2
 800089c:	f7ff ff95 	bl	80007ca <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80008a0:	23c0      	movs	r3, #192	; 0xc0
 80008a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008b0:	2307      	movs	r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <HAL_UART_MspInit+0x5c>)
 80008bc:	f000 fa7a 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40013800 	.word	0x40013800
 80008cc:	48000400 	.word	0x48000400

080008d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0f      	ldr	r2, [pc, #60]	; (800092c <HAL_PCD_MspInit+0x5c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d118      	bne.n	8000924 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff ff69 	bl	80007ca <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800090a:	230a      	movs	r3, #10
 800090c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f000 fa4c 	bl	8000db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800091c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000920:	f7ff ff6c 	bl	80007fc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40006800 	.word	0x40006800

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f8e6 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <SystemInit+0x98>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <SystemInit+0x98>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80009a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80009b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80009b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <SystemInit+0x9c>)
 80009be:	4013      	ands	r3, r2
 80009c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80009c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009ce:	f023 0305 	bic.w	r3, r3, #5
 80009d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80009d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80009de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009e2:	f023 0301 	bic.w	r3, r3, #1
 80009e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80009ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ee:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <SystemInit+0xa0>)
 80009f0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80009f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <SystemInit+0xa0>)
 80009f8:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00
 8000a20:	faf6fefb 	.word	0xfaf6fefb
 8000a24:	22041000 	.word	0x22041000

08000a28 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000a28:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2c:	3304      	adds	r3, #4

08000a2e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a30:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000a32:	d3f9      	bcc.n	8000a28 <CopyDataInit>
  bx lr
 8000a34:	4770      	bx	lr

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000a36:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000a38:	3004      	adds	r0, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000a3a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>
  bx lr
 8000a3e:	4770      	bx	lr

08000a40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000a42:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a44:	f7ff ff9e 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <LoopForever+0x8>)
 8000a4a:	490c      	ldr	r1, [pc, #48]	; (8000a7c <LoopForever+0xc>)
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <LoopForever+0x10>)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f7ff ffed 	bl	8000a2e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000a54:	480b      	ldr	r0, [pc, #44]	; (8000a84 <LoopForever+0x14>)
 8000a56:	490c      	ldr	r1, [pc, #48]	; (8000a88 <LoopForever+0x18>)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f7ff ffee 	bl	8000a3a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000a5e:	480b      	ldr	r0, [pc, #44]	; (8000a8c <LoopForever+0x1c>)
 8000a60:	490b      	ldr	r1, [pc, #44]	; (8000a90 <LoopForever+0x20>)
 8000a62:	2300      	movs	r3, #0
 8000a64:	f7ff ffe9 	bl	8000a3a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a68:	f002 ffbe 	bl	80039e8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000a6c:	f7ff fd31 	bl	80004d2 <main>

08000a70 <LoopForever>:

LoopForever:
  b LoopForever
 8000a70:	e7fe      	b.n	8000a70 <LoopForever>
 8000a72:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000a74:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000a78:	20000004 	.word	0x20000004
 8000a7c:	20000010 	.word	0x20000010
 8000a80:	08003b5c 	.word	0x08003b5c
  INIT_BSS _sbss, _ebss
 8000a84:	20000010 	.word	0x20000010
 8000a88:	200003b8 	.word	0x200003b8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000a8c:	20030000 	.word	0x20030000
 8000a90:	20030000 	.word	0x20030000

08000a94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_Init+0x3c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <HAL_Init+0x3c>)
 8000aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f000 f94e 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 f80f 	bl	8000ad8 <HAL_InitTick>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	e001      	b.n	8000aca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac6:	f7ff fecb 	bl	8000860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aca:	79fb      	ldrb	r3, [r7, #7]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	58004000 	.word	0x58004000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_InitTick+0x6c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d024      	beq.n	8000b36 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000aec:	f001 fce0 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 8000af0:	4602      	mov	r2, r0
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_InitTick+0x6c>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f948 	bl	8000d9a <HAL_SYSTICK_Config>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d10f      	bne.n	8000b30 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b0f      	cmp	r3, #15
 8000b14:	d809      	bhi.n	8000b2a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b16:	2200      	movs	r2, #0
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1e:	f000 f922 	bl	8000d66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b22:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <HAL_InitTick+0x70>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	e007      	b.n	8000b3a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]
 8000b2e:	e004      	b.n	8000b3a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	e001      	b.n	8000b3a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000000c 	.word	0x2000000c
 8000b48:	20000008 	.word	0x20000008

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	200003b4 	.word	0x200003b4

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	200003b4 	.word	0x200003b4

08000b8c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTickPrio+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff ffe2 	bl	8000b74 <HAL_GetTick>
 8000bb0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbc:	d005      	beq.n	8000bca <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_Delay+0x44>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000bca:	bf00      	nop
 8000bcc:	f7ff ffd2 	bl	8000b74 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8f7      	bhi.n	8000bcc <HAL_Delay+0x28>
    {
    }
  }
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000000c 	.word	0x2000000c

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff47 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff5e 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff90 	bl	8000ca4 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5f 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffb2 	bl	8000d0c <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	e14c      	b.n	800105e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 813e 	beq.w	8001058 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d005      	beq.n	8000df4 <HAL_GPIO_Init+0x40>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d130      	bne.n	8000e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	f003 0201 	and.w	r2, r3, #1
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d017      	beq.n	8000e92 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d123      	bne.n	8000ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	6939      	ldr	r1, [r7, #16]
 8000ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0203 	and.w	r2, r3, #3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8098 	beq.w	8001058 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f28:	4a54      	ldr	r2, [pc, #336]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f52:	d019      	beq.n	8000f88 <HAL_GPIO_Init+0x1d4>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d013      	beq.n	8000f84 <HAL_GPIO_Init+0x1d0>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a49      	ldr	r2, [pc, #292]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d00d      	beq.n	8000f80 <HAL_GPIO_Init+0x1cc>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a48      	ldr	r2, [pc, #288]	; (8001088 <HAL_GPIO_Init+0x2d4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d007      	beq.n	8000f7c <HAL_GPIO_Init+0x1c8>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a47      	ldr	r2, [pc, #284]	; (800108c <HAL_GPIO_Init+0x2d8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d101      	bne.n	8000f78 <HAL_GPIO_Init+0x1c4>
 8000f74:	2304      	movs	r3, #4
 8000f76:	e008      	b.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f78:	2307      	movs	r3, #7
 8000f7a:	e006      	b.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e004      	b.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e002      	b.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	f002 0203 	and.w	r2, r2, #3
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	4093      	lsls	r3, r2
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f9a:	4938      	ldr	r1, [pc, #224]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fce:	4a30      	ldr	r2, [pc, #192]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ffc:	4a24      	ldr	r2, [pc, #144]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	f47f aeab 	bne.w	8000dc4 <HAL_GPIO_Init+0x10>
  }
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40010000 	.word	0x40010000
 8001080:	48000400 	.word	0x48000400
 8001084:	48000800 	.word	0x48000800
 8001088:	48000c00 	.word	0x48000c00
 800108c:	48001000 	.word	0x48001000
 8001090:	58000800 	.word	0x58000800

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	807b      	strh	r3, [r7, #2]
 80010a0:	4613      	mov	r3, r2
 80010a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a4:	787b      	ldrb	r3, [r7, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4013      	ands	r3, r2
 80010dc:	041a      	lsls	r2, r3, #16
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43d9      	mvns	r1, r3
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	400b      	ands	r3, r1
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fa:	b08b      	sub	sp, #44	; 0x2c
 80010fc:	af06      	add	r7, sp, #24
 80010fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0d7      	b.n	80012ba <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fbd6 	bl	80008d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fc1d 	bl	8003970 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e04c      	b.n	80011d6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3301      	adds	r3, #1
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	440b      	add	r3, r1
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	b298      	uxth	r0, r3
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	3336      	adds	r3, #54	; 0x36
 800117a:	4602      	mov	r2, r0
 800117c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	3303      	adds	r3, #3
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	440b      	add	r3, r1
 80011a2:	3338      	adds	r3, #56	; 0x38
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	333c      	adds	r3, #60	; 0x3c
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	3340      	adds	r3, #64	; 0x40
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	3301      	adds	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d3ad      	bcc.n	800113c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e044      	b.n	8001270 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	440b      	add	r3, r1
 8001220:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	440b      	add	r3, r1
 800124c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	440b      	add	r3, r1
 8001262:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	3301      	adds	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3b5      	bcc.n	80011e6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	687e      	ldr	r6, [r7, #4]
 8001282:	466d      	mov	r5, sp
 8001284:	f106 0410 	add.w	r4, r6, #16
 8001288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	602b      	str	r3, [r5, #0]
 8001290:	1d33      	adds	r3, r6, #4
 8001292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001294:	6838      	ldr	r0, [r7, #0]
 8001296:	f002 fb86 	bl	80039a6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f805 	bl	80012c2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012c2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	b29a      	uxth	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	58000400 	.word	0x58000400

08001338 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <HAL_PWREx_GetVoltageRange+0x18>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	58000400 	.word	0x58000400

08001354 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001366:	d101      	bne.n	800136c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_RCC_HSE_Enable>:
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_RCC_HSE_Disable>:
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800139a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_RCC_HSE_IsReady>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013c6:	d101      	bne.n	80013cc <LL_RCC_HSE_IsReady+0x18>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <LL_RCC_HSE_IsReady+0x1a>
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_RCC_HSI_Enable>:
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_RCC_HSI_Disable>:
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001408:	6013      	str	r3, [r2, #0]
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_RCC_HSI_IsReady>:
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001426:	d101      	bne.n	800142c <LL_RCC_HSI_IsReady+0x18>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <LL_RCC_HSI_IsReady+0x1a>
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_RCC_HSI48_Enable>:
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800146e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_RCC_HSI48_Disable>:
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_RCC_HSI48_IsReady>:
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80014aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d101      	bne.n	80014be <LL_RCC_HSI48_IsReady+0x18>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_RCC_HSI48_IsReady+0x1a>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_RCC_LSE_Enable>:
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_RCC_LSE_Disable>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_RCC_LSE_EnableBypass>:
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_RCC_LSE_DisableBypass>:
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b02      	cmp	r3, #2
 8001564:	d101      	bne.n	800156a <LL_RCC_LSE_IsReady+0x18>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <LL_RCC_LSE_IsReady+0x1a>
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d101      	bne.n	80015d2 <LL_RCC_LSI1_IsReady+0x18>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <LL_RCC_LSI1_IsReady+0x1a>
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80015e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b08      	cmp	r3, #8
 8001634:	d101      	bne.n	800163a <LL_RCC_LSI2_IsReady+0x18>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <LL_RCC_LSI2_IsReady+0x1a>
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001656:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001662:	4313      	orrs	r3, r2
 8001664:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d101      	bne.n	80016c6 <LL_RCC_MSI_IsReady+0x16>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <LL_RCC_MSI_IsReady+0x18>
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80016da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800170a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2bb0      	cmp	r3, #176	; 0xb0
 8001710:	d901      	bls.n	8001716 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001712:	23b0      	movs	r3, #176	; 0xb0
 8001714:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 0203 	bic.w	r2, r3, #3
 8001760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80017ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017f2:	f023 020f 	bic.w	r2, r3, #15
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fe:	4313      	orrs	r3, r2
 8001800:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800184a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f4:	6013      	str	r3, [r2, #0]
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001912:	d101      	bne.n	8001918 <LL_RCC_PLL_IsReady+0x18>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <LL_RCC_PLL_IsReady+0x1a>
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001998:	d101      	bne.n	800199e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019be:	d101      	bne.n	80019c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d101      	bne.n	80019ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a08:	d101      	bne.n	8001a0e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a2c:	d101      	bne.n	8001a32 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b08d      	sub	sp, #52	; 0x34
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e37e      	b.n	8002150 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0320 	and.w	r3, r3, #32
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8092 	beq.w	8001b84 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a60:	f7ff fe89 	bl	8001776 <LL_RCC_GetSysClkSource>
 8001a64:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a66:	f7ff ff82 	bl	800196e <LL_RCC_PLL_GetMainSource>
 8001a6a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_RCC_OscConfig+0x3e>
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	d14c      	bne.n	8001b12 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d149      	bne.n	8001b12 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a7e:	f7ff fe17 	bl	80016b0 <LL_RCC_MSI_IsReady>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_OscConfig+0x54>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e35d      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001a98:	f7ff fe2f 	bl	80016fa <LL_RCC_MSI_GetRange>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	429c      	cmp	r4, r3
 8001aa0:	d914      	bls.n	8001acc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fd42 	bl	8002530 <RCC_SetFlashLatencyFromMSIRange>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e34c      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fe09 	bl	80016d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fe2d 	bl	8001724 <LL_RCC_MSI_SetCalibTrimming>
 8001aca:	e013      	b.n	8001af4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fdfe 	bl	80016d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fe22 	bl	8001724 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fd23 	bl	8002530 <RCC_SetFlashLatencyFromMSIRange>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e32d      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001af4:	f000 fcdc 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4ab3      	ldr	r2, [pc, #716]	; (8001dc8 <HAL_RCC_OscConfig+0x388>)
 8001afc:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001afe:	4bb3      	ldr	r3, [pc, #716]	; (8001dcc <HAL_RCC_OscConfig+0x38c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe ffe8 	bl	8000ad8 <HAL_InitTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d039      	beq.n	8001b82 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e31e      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01e      	beq.n	8001b58 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b1a:	f7ff fdab 	bl	8001674 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f829 	bl	8000b74 <HAL_GetTick>
 8001b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b26:	f7ff f825 	bl	8000b74 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e30b      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b38:	f7ff fdba 	bl	80016b0 <LL_RCC_MSI_IsReady>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f1      	beq.n	8001b26 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fdc3 	bl	80016d2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fde7 	bl	8001724 <LL_RCC_MSI_SetCalibTrimming>
 8001b56:	e015      	b.n	8001b84 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b58:	f7ff fd9b 	bl	8001692 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f80a 	bl	8000b74 <HAL_GetTick>
 8001b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b64:	f7ff f806 	bl	8000b74 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e2ec      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b76:	f7ff fd9b 	bl	80016b0 <LL_RCC_MSI_IsReady>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f1      	bne.n	8001b64 <HAL_RCC_OscConfig+0x124>
 8001b80:	e000      	b.n	8001b84 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b82:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d04e      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b90:	f7ff fdf1 	bl	8001776 <LL_RCC_GetSysClkSource>
 8001b94:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b96:	f7ff feea 	bl	800196e <LL_RCC_PLL_GetMainSource>
 8001b9a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x16e>
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d10a      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bae:	f7ff fc01 	bl	80013b4 <LL_RCC_HSE_IsReady>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d039      	beq.n	8001c2c <HAL_RCC_OscConfig+0x1ec>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d135      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e2c5      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x194>
 8001bce:	f7ff fbd3 	bl	8001378 <LL_RCC_HSE_Enable>
 8001bd2:	e001      	b.n	8001bd8 <HAL_RCC_OscConfig+0x198>
 8001bd4:	f7ff fbdf 	bl	8001396 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d012      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7fe ffc8 	bl	8000b74 <HAL_GetTick>
 8001be4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7fe ffc4 	bl	8000b74 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e2aa      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001bfa:	f7ff fbdb 	bl	80013b4 <LL_RCC_HSE_IsReady>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f1      	beq.n	8001be8 <HAL_RCC_OscConfig+0x1a8>
 8001c04:	e013      	b.n	8001c2e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7fe ffb5 	bl	8000b74 <HAL_GetTick>
 8001c0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0e:	f7fe ffb1 	bl	8000b74 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b64      	cmp	r3, #100	; 0x64
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e297      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001c20:	f7ff fbc8 	bl	80013b4 <LL_RCC_HSE_IsReady>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f1      	bne.n	8001c0e <HAL_RCC_OscConfig+0x1ce>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d051      	beq.n	8001cde <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3a:	f7ff fd9c 	bl	8001776 <LL_RCC_GetSysClkSource>
 8001c3e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c40:	f7ff fe95 	bl	800196e <LL_RCC_PLL_GetMainSource>
 8001c44:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_OscConfig+0x218>
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d113      	bne.n	8001c7a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d110      	bne.n	8001c7a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c58:	f7ff fbdc 	bl	8001414 <LL_RCC_HSI_IsReady>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x22e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e270      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fbe0 	bl	8001438 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c78:	e031      	b.n	8001cde <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c82:	f7ff fba9 	bl	80013d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7fe ff75 	bl	8000b74 <HAL_GetTick>
 8001c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7fe ff71 	bl	8000b74 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e257      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ca0:	f7ff fbb8 	bl	8001414 <LL_RCC_HSI_IsReady>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f1      	beq.n	8001c8e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fbc2 	bl	8001438 <LL_RCC_HSI_SetCalibTrimming>
 8001cb4:	e013      	b.n	8001cde <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	f7ff fb9e 	bl	80013f6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7fe ff5b 	bl	8000b74 <HAL_GetTick>
 8001cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7fe ff57 	bl	8000b74 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e23d      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001cd4:	f7ff fb9e 	bl	8001414 <LL_RCC_HSI_IsReady>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f1      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80a3 	beq.w	8001e3e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d076      	beq.n	8001dee <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d046      	beq.n	8001d9a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001d0c:	f7ff fc55 	bl	80015ba <LL_RCC_LSI1_IsReady>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d113      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001d16:	f7ff fc2e 	bl	8001576 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d1a:	f7fe ff2b 	bl	8000b74 <HAL_GetTick>
 8001d1e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001d22:	f7fe ff27 	bl	8000b74 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e20d      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001d34:	f7ff fc41 	bl	80015ba <LL_RCC_LSI1_IsReady>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f1      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001d3e:	f7ff fc4e 	bl	80015de <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7fe ff17 	bl	8000b74 <HAL_GetTick>
 8001d46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001d4a:	f7fe ff13 	bl	8000b74 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1f9      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001d5c:	f7ff fc61 	bl	8001622 <LL_RCC_LSI2_IsReady>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f1      	beq.n	8001d4a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fc6b 	bl	8001646 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001d70:	f7ff fc12 	bl	8001598 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7fe fefe 	bl	8000b74 <HAL_GetTick>
 8001d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001d7c:	f7fe fefa 	bl	8000b74 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e1e0      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001d8e:	f7ff fc14 	bl	80015ba <LL_RCC_LSI1_IsReady>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f1      	bne.n	8001d7c <HAL_RCC_OscConfig+0x33c>
 8001d98:	e051      	b.n	8001e3e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001d9a:	f7ff fbec 	bl	8001576 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7fe fee9 	bl	8000b74 <HAL_GetTick>
 8001da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001da6:	f7fe fee5 	bl	8000b74 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1cb      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001db8:	f7ff fbff 	bl	80015ba <LL_RCC_LSI1_IsReady>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f1      	beq.n	8001da6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001dc2:	f7ff fc1d 	bl	8001600 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001dc6:	e00c      	b.n	8001de2 <HAL_RCC_OscConfig+0x3a2>
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001dd0:	f7fe fed0 	bl	8000b74 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1b6      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001de2:	f7ff fc1e 	bl	8001622 <LL_RCC_LSI2_IsReady>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f1      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x390>
 8001dec:	e027      	b.n	8001e3e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001dee:	f7ff fc07 	bl	8001600 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7fe febf 	bl	8000b74 <HAL_GetTick>
 8001df6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001dfa:	f7fe febb 	bl	8000b74 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e1a1      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001e0c:	f7ff fc09 	bl	8001622 <LL_RCC_LSI2_IsReady>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f1      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001e16:	f7ff fbbf 	bl	8001598 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1a:	f7fe feab 	bl	8000b74 <HAL_GetTick>
 8001e1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e22:	f7fe fea7 	bl	8000b74 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e18d      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001e34:	f7ff fbc1 	bl	80015ba <LL_RCC_LSI1_IsReady>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f1      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d05b      	beq.n	8001f02 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4a:	4bb5      	ldr	r3, [pc, #724]	; (8002120 <HAL_RCC_OscConfig+0x6e0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d114      	bne.n	8001e80 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001e56:	f7ff fa5f 	bl	8001318 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5a:	f7fe fe8b 	bl	8000b74 <HAL_GetTick>
 8001e5e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e62:	f7fe fe87 	bl	8000b74 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e16d      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e74:	4baa      	ldr	r3, [pc, #680]	; (8002120 <HAL_RCC_OscConfig+0x6e0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d102      	bne.n	8001e8e <HAL_RCC_OscConfig+0x44e>
 8001e88:	f7ff fb1f 	bl	80014ca <LL_RCC_LSE_Enable>
 8001e8c:	e00c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x468>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d104      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x460>
 8001e96:	f7ff fb3a 	bl	800150e <LL_RCC_LSE_EnableBypass>
 8001e9a:	f7ff fb16 	bl	80014ca <LL_RCC_LSE_Enable>
 8001e9e:	e003      	b.n	8001ea8 <HAL_RCC_OscConfig+0x468>
 8001ea0:	f7ff fb24 	bl	80014ec <LL_RCC_LSE_Disable>
 8001ea4:	f7ff fb44 	bl	8001530 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d014      	beq.n	8001eda <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7fe fe60 	bl	8000b74 <HAL_GetTick>
 8001eb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7fe fe5c 	bl	8000b74 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e140      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ece:	f7ff fb40 	bl	8001552 <LL_RCC_LSE_IsReady>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ef      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x478>
 8001ed8:	e013      	b.n	8001f02 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eda:	f7fe fe4b 	bl	8000b74 <HAL_GetTick>
 8001ede:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7fe fe47 	bl	8000b74 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e12b      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ef8:	f7ff fb2b 	bl	8001552 <LL_RCC_LSE_IsReady>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ef      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d02c      	beq.n	8001f68 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d014      	beq.n	8001f40 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f16:	f7ff faa4 	bl	8001462 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fe2b 	bl	8000b74 <HAL_GetTick>
 8001f1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f22:	f7fe fe27 	bl	8000b74 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e10d      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001f34:	f7ff fab7 	bl	80014a6 <LL_RCC_HSI48_IsReady>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f1      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4e2>
 8001f3e:	e013      	b.n	8001f68 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f40:	f7ff faa0 	bl	8001484 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7fe fe16 	bl	8000b74 <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4c:	f7fe fe12 	bl	8000b74 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e0f8      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001f5e:	f7ff faa2 	bl	80014a6 <LL_RCC_HSI48_IsReady>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f1      	bne.n	8001f4c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80ee 	beq.w	800214e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f72:	f7ff fc00 	bl	8001776 <LL_RCC_GetSysClkSource>
 8001f76:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	f040 80af 	bne.w	80020e8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d123      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d114      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d106      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d05d      	beq.n	800209c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d058      	beq.n	8002098 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0ab      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ff8:	f7ff fc73 	bl	80018e2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ffc:	f7fe fdba 	bl	8000b74 <HAL_GetTick>
 8002000:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe fdb6 	bl	8000b74 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e09c      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ef      	bne.n	8002004 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_RCC_OscConfig+0x6e4>)
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002036:	4311      	orrs	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800203c:	0212      	lsls	r2, r2, #8
 800203e:	4311      	orrs	r1, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002044:	4311      	orrs	r1, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800204a:	4311      	orrs	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002050:	430a      	orrs	r2, r1
 8002052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002056:	4313      	orrs	r3, r2
 8002058:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800205a:	f7ff fc33 	bl	80018c4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800206e:	f7fe fd81 	bl	8000b74 <HAL_GetTick>
 8002072:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe fd7d 	bl	8000b74 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e063      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0ef      	beq.n	8002076 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002096:	e05a      	b.n	800214e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e059      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d151      	bne.n	800214e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020aa:	f7ff fc0b 	bl	80018c4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020be:	f7fe fd59 	bl	8000b74 <HAL_GetTick>
 80020c2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7fe fd55 	bl	8000b74 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e03b      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0ef      	beq.n	80020c6 <HAL_RCC_OscConfig+0x686>
 80020e6:	e032      	b.n	800214e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d02d      	beq.n	800214a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	f7ff fbf8 	bl	80018e2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fc:	f023 0303 	bic.w	r3, r3, #3
 8002100:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002114:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7fe fd2d 	bl	8000b74 <HAL_GetTick>
 800211a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211c:	e00d      	b.n	800213a <HAL_RCC_OscConfig+0x6fa>
 800211e:	bf00      	nop
 8002120:	58000400 	.word	0x58000400
 8002124:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7fe fd24 	bl	8000b74 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ef      	bne.n	8002128 <HAL_RCC_OscConfig+0x6e8>
 8002148:	e001      	b.n	800214e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3734      	adds	r7, #52	; 0x34
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e12d      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b98      	ldr	r3, [pc, #608]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d91b      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b95      	ldr	r3, [pc, #596]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4993      	ldr	r1, [pc, #588]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800218a:	f7fe fcf3 	bl	8000b74 <HAL_GetTick>
 800218e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002192:	f7fe fcef 	bl	8000b74 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e111      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a4:	4b8a      	ldr	r3, [pc, #552]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d1ef      	bne.n	8002192 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d016      	beq.n	80021ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fae3 	bl	800178e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021c8:	f7fe fcd4 	bl	8000b74 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021d0:	f7fe fcd0 	bl	8000b74 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e0f2      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021e2:	f7ff fbd0 	bl	8001986 <LL_RCC_IsActiveFlag_HPRE>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f1      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d016      	beq.n	8002226 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fada 	bl	80017b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002202:	f7fe fcb7 	bl	8000b74 <HAL_GetTick>
 8002206:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800220a:	f7fe fcb3 	bl	8000b74 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0d5      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800221c:	f7ff fbc5 	bl	80019aa <LL_RCC_IsActiveFlag_C2HPRE>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f1      	beq.n	800220a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d016      	beq.n	8002260 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fad3 	bl	80017e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800223c:	f7fe fc9a 	bl	8000b74 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002244:	f7fe fc96 	bl	8000b74 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e0b8      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002256:	f7ff fbbb 	bl	80019d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f1      	beq.n	8002244 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d016      	beq.n	800229a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff facd 	bl	8001810 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002276:	f7fe fc7d 	bl	8000b74 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800227e:	f7fe fc79 	bl	8000b74 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e09b      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002290:	f7ff fbb1 	bl	80019f6 <LL_RCC_IsActiveFlag_PPRE1>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f1      	beq.n	800227e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d017      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fac3 	bl	8001838 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022b2:	f7fe fc5f 	bl	8000b74 <HAL_GetTick>
 80022b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022ba:	f7fe fc5b 	bl	8000b74 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e07d      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022cc:	f7ff fba5 	bl	8001a1a <LL_RCC_IsActiveFlag_PPRE2>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f1      	beq.n	80022ba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d043      	beq.n	800236a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d106      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80022ea:	f7ff f863 	bl	80013b4 <LL_RCC_HSE_IsReady>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d11e      	bne.n	8002332 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e067      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d106      	bne.n	800230e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002300:	f7ff fafe 	bl	8001900 <LL_RCC_PLL_IsReady>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d113      	bne.n	8002332 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e05c      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002316:	f7ff f9cb 	bl	80016b0 <LL_RCC_MSI_IsReady>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d108      	bne.n	8002332 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e051      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002324:	f7ff f876 	bl	8001414 <LL_RCC_HSI_IsReady>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e04a      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fa09 	bl	800174e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233c:	f7fe fc1a 	bl	8000b74 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7fe fc16 	bl	8000b74 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e036      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	f7ff fa0c 	bl	8001776 <LL_RCC_GetSysClkSource>
 800235e:	4602      	mov	r2, r0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	429a      	cmp	r2, r3
 8002368:	d1ec      	bne.n	8002344 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d21b      	bcs.n	80023b0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 0207 	bic.w	r2, r3, #7
 8002380:	4913      	ldr	r1, [pc, #76]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002388:	f7fe fbf4 	bl	8000b74 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002390:	f7fe fbf0 	bl	8000b74 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e012      	b.n	80023c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_ClockConfig+0x278>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1ef      	bne.n	8002390 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023b0:	f000 f87e 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_RCC_ClockConfig+0x27c>)
 80023b8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80023ba:	f7fe fbe7 	bl	8000b8c <HAL_GetTickPrio>
 80023be:	4603      	mov	r3, r0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fb89 	bl	8000ad8 <HAL_InitTick>
 80023c6:	4603      	mov	r3, r0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	58004000 	.word	0x58004000
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023de:	f7ff f9ca 	bl	8001776 <LL_RCC_GetSysClkSource>
 80023e2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80023ea:	f7ff f986 	bl	80016fa <LL_RCC_MSI_GetRange>
 80023ee:	4603      	mov	r3, r0
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	e04b      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d102      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	e045      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b08      	cmp	r3, #8
 8002410:	d10a      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002412:	f7fe ff9f 	bl	8001354 <LL_RCC_HSE_IsEnabledDiv2>
 8002416:	4603      	mov	r3, r0
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e03a      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e037      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002428:	f7ff faa1 	bl	800196e <LL_RCC_PLL_GetMainSource>
 800242c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d003      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x64>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x6a>
 800243a:	e00d      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800243e:	60bb      	str	r3, [r7, #8]
        break;
 8002440:	e015      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002442:	f7fe ff87 	bl	8001354 <LL_RCC_HSE_IsEnabledDiv2>
 8002446:	4603      	mov	r3, r0
 8002448:	2b01      	cmp	r3, #1
 800244a:	d102      	bne.n	8002452 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800244e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002450:	e00d      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8002454:	60bb      	str	r3, [r7, #8]
        break;
 8002456:	e00a      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002458:	f7ff f94f 	bl	80016fa <LL_RCC_MSI_GetRange>
 800245c:	4603      	mov	r3, r0
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	60bb      	str	r3, [r7, #8]
        break;
 800246c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800246e:	f7ff fa59 	bl	8001924 <LL_RCC_PLL_GetN>
 8002472:	4602      	mov	r2, r0
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	fb03 f402 	mul.w	r4, r3, r2
 800247a:	f7ff fa6c 	bl	8001956 <LL_RCC_PLL_GetDivider>
 800247e:	4603      	mov	r3, r0
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	3301      	adds	r3, #1
 8002484:	fbb4 f4f3 	udiv	r4, r4, r3
 8002488:	f7ff fa59 	bl	800193e <LL_RCC_PLL_GetR>
 800248c:	4603      	mov	r3, r0
 800248e:	0f5b      	lsrs	r3, r3, #29
 8002490:	3301      	adds	r3, #1
 8002492:	fbb4 f3f3 	udiv	r3, r4, r3
 8002496:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002498:	68fb      	ldr	r3, [r7, #12]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	08003ae4 	.word	0x08003ae4
 80024a8:	00f42400 	.word	0x00f42400
 80024ac:	01e84800 	.word	0x01e84800

080024b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b0:	b598      	push	{r3, r4, r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80024b4:	f7ff ff90 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 80024b8:	4604      	mov	r4, r0
 80024ba:	f7ff f9d1 	bl	8001860 <LL_RCC_GetAHBPrescaler>
 80024be:	4603      	mov	r3, r0
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80024c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd98      	pop	{r3, r4, r7, pc}
 80024d4:	08003a84 	.word	0x08003a84

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d8:	b598      	push	{r3, r4, r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80024dc:	f7ff ffe8 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 80024e0:	4604      	mov	r4, r0
 80024e2:	f7ff f9d7 	bl	8001894 <LL_RCC_GetAPB1Prescaler>
 80024e6:	4603      	mov	r3, r0
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd98      	pop	{r3, r4, r7, pc}
 8002500:	08003ac4 	.word	0x08003ac4

08002504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002504:	b598      	push	{r3, r4, r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002508:	f7ff ffd2 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 800250c:	4604      	mov	r4, r0
 800250e:	f7ff f9cd 	bl	80018ac <LL_RCC_GetAPB2Prescaler>
 8002512:	4603      	mov	r3, r0
 8002514:	0adb      	lsrs	r3, r3, #11
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_RCC_GetPCLK2Freq+0x28>)
 800251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd98      	pop	{r3, r4, r7, pc}
 800252c:	08003ac4 	.word	0x08003ac4

08002530 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2bb0      	cmp	r3, #176	; 0xb0
 800253c:	d903      	bls.n	8002546 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e007      	b.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	4a11      	ldr	r2, [pc, #68]	; (8002594 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002556:	f7ff f98f 	bl	8001878 <LL_RCC_GetAHB4Prescaler>
 800255a:	4603      	mov	r3, r0
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	4a0d      	ldr	r2, [pc, #52]	; (8002598 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	0c9c      	lsrs	r4, r3, #18
 800257a:	f7fe fedd 	bl	8001338 <HAL_PWREx_GetVoltageRange>
 800257e:	4603      	mov	r3, r0
 8002580:	4619      	mov	r1, r3
 8002582:	4620      	mov	r0, r4
 8002584:	f000 f80c 	bl	80025a0 <RCC_SetFlashLatency>
 8002588:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}
 8002592:	bf00      	nop
 8002594:	08003ae4 	.word	0x08003ae4
 8002598:	08003a84 	.word	0x08003a84
 800259c:	431bde83 	.word	0x431bde83

080025a0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b093      	sub	sp, #76	; 0x4c
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <RCC_SetFlashLatency+0xf0>)
 80025ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80025b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80025b6:	4a37      	ldr	r2, [pc, #220]	; (8002694 <RCC_SetFlashLatency+0xf4>)
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80025be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80025c2:	4b35      	ldr	r3, [pc, #212]	; (8002698 <RCC_SetFlashLatency+0xf8>)
 80025c4:	f107 040c 	add.w	r4, r7, #12
 80025c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80025ce:	2300      	movs	r3, #0
 80025d0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d8:	d11c      	bne.n	8002614 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80025da:	2300      	movs	r3, #0
 80025dc:	643b      	str	r3, [r7, #64]	; 0x40
 80025de:	e015      	b.n	800260c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80025e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025e8:	4413      	add	r3, r2
 80025ea:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d808      	bhi.n	8002606 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80025f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025fc:	4413      	add	r3, r2
 80025fe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002602:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002604:	e022      	b.n	800264c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002608:	3301      	adds	r3, #1
 800260a:	643b      	str	r3, [r7, #64]	; 0x40
 800260c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260e:	2b03      	cmp	r3, #3
 8002610:	d9e6      	bls.n	80025e0 <RCC_SetFlashLatency+0x40>
 8002612:	e01b      	b.n	800264c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002614:	2300      	movs	r3, #0
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002618:	e015      	b.n	8002646 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800261a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002622:	4413      	add	r3, r2
 8002624:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d808      	bhi.n	8002640 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002636:	4413      	add	r3, r2
 8002638:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800263e:	e005      	b.n	800264c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002642:	3301      	adds	r3, #1
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002648:	2b02      	cmp	r3, #2
 800264a:	d9e6      	bls.n	800261a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <RCC_SetFlashLatency+0xfc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 0207 	bic.w	r2, r3, #7
 8002654:	4911      	ldr	r1, [pc, #68]	; (800269c <RCC_SetFlashLatency+0xfc>)
 8002656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800265c:	f7fe fa8a 	bl	8000b74 <HAL_GetTick>
 8002660:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002662:	e008      	b.n	8002676 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002664:	f7fe fa86 	bl	8000b74 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e007      	b.n	8002686 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <RCC_SetFlashLatency+0xfc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002680:	429a      	cmp	r2, r3
 8002682:	d1ef      	bne.n	8002664 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	374c      	adds	r7, #76	; 0x4c
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}
 800268e:	bf00      	nop
 8002690:	08003a58 	.word	0x08003a58
 8002694:	08003a68 	.word	0x08003a68
 8002698:	08003a74 	.word	0x08003a74
 800269c:	58004000 	.word	0x58004000

080026a0 <LL_RCC_LSE_IsEnabled>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <LL_RCC_LSE_IsEnabled+0x18>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <LL_RCC_LSE_IsEnabled+0x1a>
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_RCC_LSE_IsReady>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d101      	bne.n	80026dc <LL_RCC_LSE_IsReady+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_RCC_LSE_IsReady+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_RCC_MSI_EnablePLLMode>:
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_RCC_SetRFWKPClockSource>:
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002716:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800271a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_RCC_SetSMPSClockSource>:
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f023 0203 	bic.w	r2, r3, #3
 8002744:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4313      	orrs	r3, r2
 800274c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_RCC_SetSMPSPrescaler>:
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800276c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4313      	orrs	r3, r2
 8002774:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_RCC_SetUSARTClockSource>:
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800278a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_RCC_SetLPUARTClockSource>:
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_RCC_SetI2CClockSource>:
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80027e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027f2:	43db      	mvns	r3, r3
 80027f4:	401a      	ands	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_RCC_SetLPTIMClockSource>:
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002820:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0c1b      	lsrs	r3, r3, #16
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	43db      	mvns	r3, r3
 800282c:	401a      	ands	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	041b      	lsls	r3, r3, #16
 8002832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_RCC_SetSAIClockSource>:
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800285c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_RCC_SetRNGClockSource>:
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_RCC_SetCLK48ClockSource>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_RCC_SetUSBClockSource>:
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ffe3 	bl	80028a0 <LL_RCC_SetCLK48ClockSource>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <LL_RCC_SetADCClockSource>:
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_RCC_SetRTCClockSource>:
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_RCC_GetRTCClockSource>:
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800293e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_RCC_ForceBackupDomainReset>:
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_RCC_PLLSAI1_Enable>:
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_RCC_PLLSAI1_Disable>:
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80029ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029c8:	6013      	str	r3, [r2, #0]
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_PLLSAI1_IsReady>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029e6:	d101      	bne.n	80029ec <LL_RCC_PLLSAI1_IsReady+0x18>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <LL_RCC_PLLSAI1_IsReady+0x1a>
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002a00:	2300      	movs	r3, #0
 8002a02:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a04:	2300      	movs	r3, #0
 8002a06:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d034      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a1c:	d021      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002a1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a22:	d81b      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a28:	d01d      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002a2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a2e:	d815      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a38:	d110      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002a4a:	e00d      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f94d 	bl	8002cf0 <RCCEx_PLLSAI1_ConfigNP>
 8002a56:	4603      	mov	r3, r0
 8002a58:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002a5a:	e005      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	77fb      	strb	r3, [r7, #31]
        break;
 8002a60:	e002      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a68:	7ffb      	ldrb	r3, [r7, #31]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d105      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fee8 	bl	8002848 <LL_RCC_SetSAIClockSource>
 8002a78:	e001      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7a:	7ffb      	ldrb	r3, [r7, #31]
 8002a7c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d046      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002a8a:	f7ff ff56 	bl	800293a <LL_RCC_GetRTCClockSource>
 8002a8e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d03c      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a9a:	f7fe fc3d 	bl	8001318 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff30 	bl	800290e <LL_RCC_SetRTCClockSource>
 8002aae:	e02e      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002aba:	f7ff ff4b 	bl	8002954 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002abe:	f7ff ff5a 	bl	8002976 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002ada:	f7ff fde1 	bl	80026a0 <LL_RCC_LSE_IsEnabled>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d114      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ae4:	f7fe f846 	bl	8000b74 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002aea:	e00b      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe f842 	bl	8000b74 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d902      	bls.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	77fb      	strb	r3, [r7, #31]
              break;
 8002b02:	e004      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002b04:	f7ff fdde 	bl	80026c4 <LL_RCC_LSE_IsReady>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d1ee      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	77bb      	strb	r3, [r7, #30]
 8002b12:	e001      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b14:	7ffb      	ldrb	r3, [r7, #31]
 8002b16:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d004      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fe2a 	bl	8002782 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d004      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fe35 	bl	80027ae <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fe5d 	bl	8002814 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fe52 	bl	8002814 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fe2a 	bl	80027da <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fe1f 	bl	80027da <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d022      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe8d 	bl	80028cc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bba:	d107      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bca:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd4:	d10b      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 f8e3 	bl	8002da6 <RCCEx_PLLSAI1_ConfigNQ>
 8002be0:	4603      	mov	r3, r0
 8002be2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002be4:	7ffb      	ldrb	r3, [r7, #31]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8002bea:	7ffb      	ldrb	r3, [r7, #31]
 8002bec:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d02b      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c02:	d008      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fe2a 	bl	8002874 <LL_RCC_SetRNGClockSource>
 8002c20:	e00a      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7ff fe21 	bl	8002874 <LL_RCC_SetRNGClockSource>
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff fe34 	bl	80028a0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002c40:	d107      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d022      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fe3d 	bl	80028e2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c70:	d107      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f8e3 	bl	8002e5c <RCCEx_PLLSAI1_ConfigNR>
 8002c96:	4603      	mov	r3, r0
 8002c98:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002c9a:	7ffb      	ldrb	r3, [r7, #31]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fd26 	bl	8002706 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fd45 	bl	800275a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fd2c 	bl	8002732 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8002cda:	7fbb      	ldrb	r3, [r7, #30]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002ce8:	f7ff fcfe 	bl	80026e8 <LL_RCC_MSI_EnablePLLMode>
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002cfc:	f7ff fe5b 	bl	80029b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d00:	f7fd ff38 	bl	8000b74 <HAL_GetTick>
 8002d04:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d06:	e009      	b.n	8002d1c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d08:	f7fd ff34 	bl	8000b74 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d902      	bls.n	8002d1c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	73fb      	strb	r3, [r7, #15]
      break;
 8002d1a:	e004      	b.n	8002d26 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d1c:	f7ff fe5a 	bl	80029d4 <LL_RCC_PLLSAI1_IsReady>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d137      	bne.n	8002d9c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d40:	4313      	orrs	r3, r2
 8002d42:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d56:	4313      	orrs	r3, r2
 8002d58:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002d5a:	f7ff fe1d 	bl	8002998 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5e:	f7fd ff09 	bl	8000b74 <HAL_GetTick>
 8002d62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002d64:	e009      	b.n	8002d7a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d66:	f7fd ff05 	bl	8000b74 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d902      	bls.n	8002d7a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	73fb      	strb	r3, [r7, #15]
        break;
 8002d78:	e004      	b.n	8002d84 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002d7a:	f7ff fe2b 	bl	80029d4 <LL_RCC_PLLSAI1_IsReady>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d1f0      	bne.n	8002d66 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d108      	bne.n	8002d9c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002db2:	f7ff fe00 	bl	80029b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002db6:	f7fd fedd 	bl	8000b74 <HAL_GetTick>
 8002dba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002dbc:	e009      	b.n	8002dd2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dbe:	f7fd fed9 	bl	8000b74 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d902      	bls.n	8002dd2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	e004      	b.n	8002ddc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002dd2:	f7ff fdff 	bl	80029d4 <LL_RCC_PLLSAI1_IsReady>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d137      	bne.n	8002e52 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df6:	4313      	orrs	r3, r2
 8002df8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002e10:	f7ff fdc2 	bl	8002998 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e14:	f7fd feae 	bl	8000b74 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e1a:	e009      	b.n	8002e30 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e1c:	f7fd feaa 	bl	8000b74 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d902      	bls.n	8002e30 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e2e:	e004      	b.n	8002e3a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e30:	f7ff fdd0 	bl	80029d4 <LL_RCC_PLLSAI1_IsReady>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d1f0      	bne.n	8002e1c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d108      	bne.n	8002e52 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e68:	f7ff fda5 	bl	80029b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e6c:	f7fd fe82 	bl	8000b74 <HAL_GetTick>
 8002e70:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e72:	e009      	b.n	8002e88 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e74:	f7fd fe7e 	bl	8000b74 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d902      	bls.n	8002e88 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	73fb      	strb	r3, [r7, #15]
      break;
 8002e86:	e004      	b.n	8002e92 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e88:	f7ff fda4 	bl	80029d4 <LL_RCC_PLLSAI1_IsReady>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d137      	bne.n	8002f08 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eac:	4313      	orrs	r3, r2
 8002eae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002ec6:	f7ff fd67 	bl	8002998 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eca:	f7fd fe53 	bl	8000b74 <HAL_GetTick>
 8002ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ed0:	e009      	b.n	8002ee6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ed2:	f7fd fe4f 	bl	8000b74 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d902      	bls.n	8002ee6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	73fb      	strb	r3, [r7, #15]
        break;
 8002ee4:	e004      	b.n	8002ef0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ee6:	f7ff fd75 	bl	80029d4 <LL_RCC_PLLSAI1_IsReady>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d1f0      	bne.n	8002ed2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d108      	bne.n	8002f08 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f04:	4313      	orrs	r3, r2
 8002f06:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <LL_RCC_GetUSARTClockSource>:
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4013      	ands	r3, r2
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_RCC_GetLPUARTClockSource>:
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4013      	ands	r3, r2
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e042      	b.n	8002fea <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd fc7a 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2224      	movs	r2, #36	; 0x24
 8002f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f82d 	bl	8002ff4 <UART_SetConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e022      	b.n	8002fea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fa27 	bl	8003400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 faae 	bl	8003544 <UART_CheckIdleState>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff4:	b5b0      	push	{r4, r5, r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	4313      	orrs	r3, r2
 8003016:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4ba3      	ldr	r3, [pc, #652]	; (80032ac <UART_SetConfig+0x2b8>)
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	69f9      	ldr	r1, [r7, #28]
 8003028:	430b      	orrs	r3, r1
 800302a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a98      	ldr	r2, [pc, #608]	; (80032b0 <UART_SetConfig+0x2bc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	4313      	orrs	r3, r2
 800305a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003066:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	69f9      	ldr	r1, [r7, #28]
 8003070:	430b      	orrs	r3, r1
 8003072:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	f023 010f 	bic.w	r1, r3, #15
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a89      	ldr	r2, [pc, #548]	; (80032b4 <UART_SetConfig+0x2c0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d120      	bne.n	80030d6 <UART_SetConfig+0xe2>
 8003094:	2003      	movs	r0, #3
 8003096:	f7ff ff3c 	bl	8002f12 <LL_RCC_GetUSARTClockSource>
 800309a:	4603      	mov	r3, r0
 800309c:	2b03      	cmp	r3, #3
 800309e:	d817      	bhi.n	80030d0 <UART_SetConfig+0xdc>
 80030a0:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <UART_SetConfig+0xb4>)
 80030a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a6:	bf00      	nop
 80030a8:	080030b9 	.word	0x080030b9
 80030ac:	080030c5 	.word	0x080030c5
 80030b0:	080030bf 	.word	0x080030bf
 80030b4:	080030cb 	.word	0x080030cb
 80030b8:	2301      	movs	r3, #1
 80030ba:	76fb      	strb	r3, [r7, #27]
 80030bc:	e038      	b.n	8003130 <UART_SetConfig+0x13c>
 80030be:	2302      	movs	r3, #2
 80030c0:	76fb      	strb	r3, [r7, #27]
 80030c2:	e035      	b.n	8003130 <UART_SetConfig+0x13c>
 80030c4:	2304      	movs	r3, #4
 80030c6:	76fb      	strb	r3, [r7, #27]
 80030c8:	e032      	b.n	8003130 <UART_SetConfig+0x13c>
 80030ca:	2308      	movs	r3, #8
 80030cc:	76fb      	strb	r3, [r7, #27]
 80030ce:	e02f      	b.n	8003130 <UART_SetConfig+0x13c>
 80030d0:	2310      	movs	r3, #16
 80030d2:	76fb      	strb	r3, [r7, #27]
 80030d4:	e02c      	b.n	8003130 <UART_SetConfig+0x13c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a75      	ldr	r2, [pc, #468]	; (80032b0 <UART_SetConfig+0x2bc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d125      	bne.n	800312c <UART_SetConfig+0x138>
 80030e0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80030e4:	f7ff ff25 	bl	8002f32 <LL_RCC_GetLPUARTClockSource>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ee:	d017      	beq.n	8003120 <UART_SetConfig+0x12c>
 80030f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030f4:	d817      	bhi.n	8003126 <UART_SetConfig+0x132>
 80030f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fa:	d00b      	beq.n	8003114 <UART_SetConfig+0x120>
 80030fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003100:	d811      	bhi.n	8003126 <UART_SetConfig+0x132>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <UART_SetConfig+0x11a>
 8003106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310a:	d006      	beq.n	800311a <UART_SetConfig+0x126>
 800310c:	e00b      	b.n	8003126 <UART_SetConfig+0x132>
 800310e:	2300      	movs	r3, #0
 8003110:	76fb      	strb	r3, [r7, #27]
 8003112:	e00d      	b.n	8003130 <UART_SetConfig+0x13c>
 8003114:	2302      	movs	r3, #2
 8003116:	76fb      	strb	r3, [r7, #27]
 8003118:	e00a      	b.n	8003130 <UART_SetConfig+0x13c>
 800311a:	2304      	movs	r3, #4
 800311c:	76fb      	strb	r3, [r7, #27]
 800311e:	e007      	b.n	8003130 <UART_SetConfig+0x13c>
 8003120:	2308      	movs	r3, #8
 8003122:	76fb      	strb	r3, [r7, #27]
 8003124:	e004      	b.n	8003130 <UART_SetConfig+0x13c>
 8003126:	2310      	movs	r3, #16
 8003128:	76fb      	strb	r3, [r7, #27]
 800312a:	e001      	b.n	8003130 <UART_SetConfig+0x13c>
 800312c:	2310      	movs	r3, #16
 800312e:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a5e      	ldr	r2, [pc, #376]	; (80032b0 <UART_SetConfig+0x2bc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	f040 808b 	bne.w	8003252 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800313c:	7efb      	ldrb	r3, [r7, #27]
 800313e:	2b08      	cmp	r3, #8
 8003140:	d823      	bhi.n	800318a <UART_SetConfig+0x196>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <UART_SetConfig+0x154>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800316d 	.word	0x0800316d
 800314c:	0800318b 	.word	0x0800318b
 8003150:	08003175 	.word	0x08003175
 8003154:	0800318b 	.word	0x0800318b
 8003158:	0800317b 	.word	0x0800317b
 800315c:	0800318b 	.word	0x0800318b
 8003160:	0800318b 	.word	0x0800318b
 8003164:	0800318b 	.word	0x0800318b
 8003168:	08003183 	.word	0x08003183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7ff f9b4 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8003170:	6178      	str	r0, [r7, #20]
        break;
 8003172:	e00f      	b.n	8003194 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003174:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <UART_SetConfig+0x2c4>)
 8003176:	617b      	str	r3, [r7, #20]
        break;
 8003178:	e00c      	b.n	8003194 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317a:	f7ff f92d 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 800317e:	6178      	str	r0, [r7, #20]
        break;
 8003180:	e008      	b.n	8003194 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003186:	617b      	str	r3, [r7, #20]
        break;
 8003188:	e004      	b.n	8003194 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	76bb      	strb	r3, [r7, #26]
        break;
 8003192:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 811a 	beq.w	80033d0 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	4a46      	ldr	r2, [pc, #280]	; (80032bc <UART_SetConfig+0x2c8>)
 80031a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031a6:	461a      	mov	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d305      	bcc.n	80031cc <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d902      	bls.n	80031d2 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	76bb      	strb	r3, [r7, #26]
 80031d0:	e0fe      	b.n	80033d0 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f04f 0100 	mov.w	r1, #0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	4a37      	ldr	r2, [pc, #220]	; (80032bc <UART_SetConfig+0x2c8>)
 80031e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	f7fc ffc7 	bl	800017c <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	020b      	lsls	r3, r1, #8
 8003200:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003204:	0202      	lsls	r2, r0, #8
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	6849      	ldr	r1, [r1, #4]
 800320a:	0849      	lsrs	r1, r1, #1
 800320c:	4608      	mov	r0, r1
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	1814      	adds	r4, r2, r0
 8003214:	eb43 0501 	adc.w	r5, r3, r1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	461a      	mov	r2, r3
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	4620      	mov	r0, r4
 8003224:	4629      	mov	r1, r5
 8003226:	f7fc ffa9 	bl	800017c <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4613      	mov	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003238:	d308      	bcc.n	800324c <UART_SetConfig+0x258>
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003240:	d204      	bcs.n	800324c <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	e0c1      	b.n	80033d0 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	76bb      	strb	r3, [r7, #26]
 8003250:	e0be      	b.n	80033d0 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325a:	d16a      	bne.n	8003332 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800325c:	7efb      	ldrb	r3, [r7, #27]
 800325e:	3b01      	subs	r3, #1
 8003260:	2b07      	cmp	r3, #7
 8003262:	d82d      	bhi.n	80032c0 <UART_SetConfig+0x2cc>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <UART_SetConfig+0x278>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	0800328d 	.word	0x0800328d
 8003270:	08003295 	.word	0x08003295
 8003274:	080032c1 	.word	0x080032c1
 8003278:	0800329b 	.word	0x0800329b
 800327c:	080032c1 	.word	0x080032c1
 8003280:	080032c1 	.word	0x080032c1
 8003284:	080032c1 	.word	0x080032c1
 8003288:	080032a3 	.word	0x080032a3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800328c:	f7ff f93a 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8003290:	6178      	str	r0, [r7, #20]
        break;
 8003292:	e01a      	b.n	80032ca <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <UART_SetConfig+0x2c4>)
 8003296:	617b      	str	r3, [r7, #20]
        break;
 8003298:	e017      	b.n	80032ca <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329a:	f7ff f89d 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 800329e:	6178      	str	r0, [r7, #20]
        break;
 80032a0:	e013      	b.n	80032ca <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a6:	617b      	str	r3, [r7, #20]
        break;
 80032a8:	e00f      	b.n	80032ca <UART_SetConfig+0x2d6>
 80032aa:	bf00      	nop
 80032ac:	cfff69f3 	.word	0xcfff69f3
 80032b0:	40008000 	.word	0x40008000
 80032b4:	40013800 	.word	0x40013800
 80032b8:	00f42400 	.word	0x00f42400
 80032bc:	08003b24 	.word	0x08003b24
      default:
        pclk = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	76bb      	strb	r3, [r7, #26]
        break;
 80032c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d07f      	beq.n	80033d0 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	4a48      	ldr	r2, [pc, #288]	; (80033f8 <UART_SetConfig+0x404>)
 80032d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032da:	461a      	mov	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fbb3 f3f2 	udiv	r3, r3, r2
 80032e2:	005a      	lsls	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	441a      	add	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d916      	bls.n	800332c <UART_SetConfig+0x338>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d212      	bcs.n	800332c <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f023 030f 	bic.w	r3, r3, #15
 800330e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	b29b      	uxth	r3, r3
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	b29a      	uxth	r2, r3
 800331c:	89fb      	ldrh	r3, [r7, #14]
 800331e:	4313      	orrs	r3, r2
 8003320:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	89fa      	ldrh	r2, [r7, #14]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e051      	b.n	80033d0 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	76bb      	strb	r3, [r7, #26]
 8003330:	e04e      	b.n	80033d0 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003332:	7efb      	ldrb	r3, [r7, #27]
 8003334:	3b01      	subs	r3, #1
 8003336:	2b07      	cmp	r3, #7
 8003338:	d821      	bhi.n	800337e <UART_SetConfig+0x38a>
 800333a:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x34c>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003361 	.word	0x08003361
 8003344:	08003369 	.word	0x08003369
 8003348:	0800337f 	.word	0x0800337f
 800334c:	0800336f 	.word	0x0800336f
 8003350:	0800337f 	.word	0x0800337f
 8003354:	0800337f 	.word	0x0800337f
 8003358:	0800337f 	.word	0x0800337f
 800335c:	08003377 	.word	0x08003377
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003360:	f7ff f8d0 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8003364:	6178      	str	r0, [r7, #20]
        break;
 8003366:	e00f      	b.n	8003388 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003368:	4b24      	ldr	r3, [pc, #144]	; (80033fc <UART_SetConfig+0x408>)
 800336a:	617b      	str	r3, [r7, #20]
        break;
 800336c:	e00c      	b.n	8003388 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336e:	f7ff f833 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8003372:	6178      	str	r0, [r7, #20]
        break;
 8003374:	e008      	b.n	8003388 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337a:	617b      	str	r3, [r7, #20]
        break;
 800337c:	e004      	b.n	8003388 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	76bb      	strb	r3, [r7, #26]
        break;
 8003386:	bf00      	nop
    }

    if (pclk != 0U)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <UART_SetConfig+0x404>)
 8003394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003398:	461a      	mov	r2, r3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fbb3 f2f2 	udiv	r2, r3, r2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	441a      	add	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b0f      	cmp	r3, #15
 80033b8:	d908      	bls.n	80033cc <UART_SetConfig+0x3d8>
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c0:	d204      	bcs.n	80033cc <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	e001      	b.n	80033d0 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80033ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bdb0      	pop	{r4, r5, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	08003b24 	.word	0x08003b24
 80033fc:	00f42400 	.word	0x00f42400

08003400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01a      	beq.n	8003516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034fe:	d10a      	bne.n	8003516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003554:	f7fd fb0e 	bl	8000b74 <HAL_GetTick>
 8003558:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b08      	cmp	r3, #8
 8003566:	d10e      	bne.n	8003586 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f82f 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e025      	b.n	80035d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b04      	cmp	r3, #4
 8003592:	d10e      	bne.n	80035b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f819 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e00f      	b.n	80035d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b09c      	sub	sp, #112	; 0x70
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	e0a9      	b.n	8003740 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	f000 80a5 	beq.w	8003740 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7fd fabd 	bl	8000b74 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <UART_WaitOnFlagUntilTimeout+0x32>
 8003606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003608:	2b00      	cmp	r3, #0
 800360a:	d140      	bne.n	800368e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800361a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003620:	667b      	str	r3, [r7, #100]	; 0x64
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800362a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800362c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003630:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e6      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3308      	adds	r3, #8
 8003644:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	663b      	str	r3, [r7, #96]	; 0x60
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3308      	adds	r3, #8
 800365c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800365e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800366c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e5      	bne.n	800363e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e069      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d051      	beq.n	8003740 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036aa:	d149      	bne.n	8003740 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
 80036d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e6      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3308      	adds	r3, #8
 80036ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	613b      	str	r3, [r7, #16]
   return(result);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3308      	adds	r3, #8
 8003706:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003708:	623a      	str	r2, [r7, #32]
 800370a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	69f9      	ldr	r1, [r7, #28]
 800370e:	6a3a      	ldr	r2, [r7, #32]
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	61bb      	str	r3, [r7, #24]
   return(result);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e5      	bne.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e010      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	429a      	cmp	r2, r3
 800375c:	f43f af46 	beq.w	80035ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3770      	adds	r7, #112	; 0x70
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_UARTEx_DisableFifoMode+0x16>
 800377c:	2302      	movs	r3, #2
 800377e:	e027      	b.n	80037d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80037ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e02d      	b.n	8003850 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	; 0x24
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f84f 	bl	80038d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800386c:	2302      	movs	r3, #2
 800386e:	e02d      	b.n	80038cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	; 0x24
 800387c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f811 	bl	80038d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d108      	bne.n	80038f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038f4:	e031      	b.n	800395a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038f6:	2308      	movs	r3, #8
 80038f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038fa:	2308      	movs	r3, #8
 80038fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	0e5b      	lsrs	r3, r3, #25
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	0f5b      	lsrs	r3, r3, #29
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800391e:	7bbb      	ldrb	r3, [r7, #14]
 8003920:	7b3a      	ldrb	r2, [r7, #12]
 8003922:	4911      	ldr	r1, [pc, #68]	; (8003968 <UARTEx_SetNbDataToProcess+0x94>)
 8003924:	5c8a      	ldrb	r2, [r1, r2]
 8003926:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800392a:	7b3a      	ldrb	r2, [r7, #12]
 800392c:	490f      	ldr	r1, [pc, #60]	; (800396c <UARTEx_SetNbDataToProcess+0x98>)
 800392e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003930:	fb93 f3f2 	sdiv	r3, r3, r2
 8003934:	b29a      	uxth	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	7b7a      	ldrb	r2, [r7, #13]
 8003940:	4909      	ldr	r1, [pc, #36]	; (8003968 <UARTEx_SetNbDataToProcess+0x94>)
 8003942:	5c8a      	ldrb	r2, [r1, r2]
 8003944:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003948:	7b7a      	ldrb	r2, [r7, #13]
 800394a:	4908      	ldr	r1, [pc, #32]	; (800396c <UARTEx_SetNbDataToProcess+0x98>)
 800394c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800394e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003952:	b29a      	uxth	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	08003b3c 	.word	0x08003b3c
 800396c:	08003b44 	.word	0x08003b44

08003970 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003978:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800397c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	b29b      	uxth	r3, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	b29b      	uxth	r3, r3
 800398e:	4013      	ands	r3, r2
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039a6:	b084      	sub	sp, #16
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	f107 0014 	add.w	r0, r7, #20
 80039b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	b004      	add	sp, #16
 80039e6:	4770      	bx	lr

080039e8 <__libc_init_array>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	4d0d      	ldr	r5, [pc, #52]	; (8003a20 <__libc_init_array+0x38>)
 80039ec:	4c0d      	ldr	r4, [pc, #52]	; (8003a24 <__libc_init_array+0x3c>)
 80039ee:	1b64      	subs	r4, r4, r5
 80039f0:	10a4      	asrs	r4, r4, #2
 80039f2:	2600      	movs	r6, #0
 80039f4:	42a6      	cmp	r6, r4
 80039f6:	d109      	bne.n	8003a0c <__libc_init_array+0x24>
 80039f8:	4d0b      	ldr	r5, [pc, #44]	; (8003a28 <__libc_init_array+0x40>)
 80039fa:	4c0c      	ldr	r4, [pc, #48]	; (8003a2c <__libc_init_array+0x44>)
 80039fc:	f000 f820 	bl	8003a40 <_init>
 8003a00:	1b64      	subs	r4, r4, r5
 8003a02:	10a4      	asrs	r4, r4, #2
 8003a04:	2600      	movs	r6, #0
 8003a06:	42a6      	cmp	r6, r4
 8003a08:	d105      	bne.n	8003a16 <__libc_init_array+0x2e>
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a10:	4798      	blx	r3
 8003a12:	3601      	adds	r6, #1
 8003a14:	e7ee      	b.n	80039f4 <__libc_init_array+0xc>
 8003a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1a:	4798      	blx	r3
 8003a1c:	3601      	adds	r6, #1
 8003a1e:	e7f2      	b.n	8003a06 <__libc_init_array+0x1e>
 8003a20:	08003b54 	.word	0x08003b54
 8003a24:	08003b54 	.word	0x08003b54
 8003a28:	08003b54 	.word	0x08003b54
 8003a2c:	08003b58 	.word	0x08003b58

08003a30 <memset>:
 8003a30:	4402      	add	r2, r0
 8003a32:	4603      	mov	r3, r0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d100      	bne.n	8003a3a <memset+0xa>
 8003a38:	4770      	bx	lr
 8003a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3e:	e7f9      	b.n	8003a34 <memset+0x4>

08003a40 <_init>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr

08003a4c <_fini>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	bf00      	nop
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr
