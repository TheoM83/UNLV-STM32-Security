
Tamper-L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003570  08003570  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003578  08003578  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800357c  0800357c  0001357c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  0800358c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  0800358c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c85d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0d  00000000  00000000  0002c899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002e3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002ee78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cd1  00000000  00000000  0002f8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b614  00000000  00000000  00055571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb7d1  00000000  00000000  00060b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c00  00000000  00000000  0014c3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003510 	.word	0x08003510

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003510 	.word	0x08003510

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_RTCEx_Tamper1EventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004c8:	2120      	movs	r1, #32
 80004ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ce:	f000 fded 	bl	80010ac <HAL_GPIO_TogglePin>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa94 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f818 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8ea 	bl	80006c0 <MX_GPIO_Init>
  MX_RTC_Init();
 80004ec:	f000 f868 	bl	80005c0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f8b6 	bl	8000660 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xdead0001);
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <main+0x30>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <main+0x34>)
 80004fa:	f002 fb83 	bl	8002c04 <HAL_RTCEx_BKUPWrite>
HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xdead0002);
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <main+0x38>)
 8000500:	2101      	movs	r1, #1
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <main+0x34>)
 8000504:	f002 fb7e 	bl	8002c04 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x2c>
 800050a:	bf00      	nop
 800050c:	dead0001 	.word	0xdead0001
 8000510:	20000028 	.word	0x20000028
 8000514:	dead0002 	.word	0xdead0002

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2244      	movs	r2, #68	; 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f002 ffea 	bl	8003500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053e:	f000 fddd 	bl	80010fc <HAL_PWREx_ControlVoltageScaling>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000548:	f000 f910 	bl	800076c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800054c:	230a      	movs	r3, #10
 800054e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000554:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000556:	2310      	movs	r3, #16
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800056a:	230a      	movs	r3, #10
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fe12 	bl	80011a8 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800058a:	f000 f8ef 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f9e4 	bl	8001974 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005b2:	f000 f8db 	bl	800076c <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3758      	adds	r7, #88	; 0x58
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2228      	movs	r2, #40	; 0x28
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 ff97 	bl	8003500 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_RTC_Init+0x98>)
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <MX_RTC_Init+0x9c>)
 80005d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_RTC_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_RTC_Init+0x98>)
 80005e0:	227f      	movs	r2, #127	; 0x7f
 80005e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_RTC_Init+0x98>)
 80005e6:	22ff      	movs	r2, #255	; 0xff
 80005e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_RTC_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_RTC_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_RTC_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_RTC_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000602:	4815      	ldr	r0, [pc, #84]	; (8000658 <MX_RTC_Init+0x98>)
 8000604:	f002 f878 	bl	80026f8 <HAL_RTC_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800060e:	f000 f8ad 	bl	800076c <Error_Handler>
  }
  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8000612:	2301      	movs	r3, #1
 8000614:	603b      	str	r3, [r7, #0]
  sTamper.Interrupt = RTC_TAMPER1_INTERRUPT;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	607b      	str	r3, [r7, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_FALLINGEDGE;
 800061c:	2302      	movs	r3, #2
 800061e:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper_IT(&hrtc, &sTamper) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_RTC_Init+0x98>)
 8000642:	f002 f9f7 	bl	8002a34 <HAL_RTCEx_SetTamper_IT>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_RTC_Init+0x90>
  {
    Error_Handler();
 800064c:	f000 f88e 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000028 	.word	0x20000028
 800065c:	40002800 	.word	0x40002800

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <MX_USART2_UART_Init+0x5c>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0x58>)
 80006a4:	f002 fac7 	bl	8002c36 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f85d 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000004c 	.word	0x2000004c
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b24      	ldr	r3, [pc, #144]	; (8000768 <MX_GPIO_Init+0xa8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a23      	ldr	r2, [pc, #140]	; (8000768 <MX_GPIO_Init+0xa8>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_GPIO_Init+0xa8>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_GPIO_Init+0xa8>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <MX_GPIO_Init+0xa8>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_GPIO_Init+0xa8>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_GPIO_Init+0xa8>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_GPIO_Init+0xa8>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_GPIO_Init+0xa8>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_GPIO_Init+0xa8>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <MX_GPIO_Init+0xa8>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_GPIO_Init+0xa8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2120      	movs	r1, #32
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f000 fc9d 	bl	800107c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000742:	2320      	movs	r3, #32
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f000 fae4 	bl	8000d28 <HAL_GPIO_Init>

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x44>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_MspInit+0x44>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6613      	str	r3, [r2, #96]	; 0x60
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x44>)
 800078c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x44>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x44>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6593      	str	r3, [r2, #88]	; 0x58
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x44>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0a4      	sub	sp, #144	; 0x90
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2288      	movs	r2, #136	; 0x88
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fe95 	bl	8003500 <memset>
  if(hrtc->Instance==RTC)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <HAL_RTC_MspInit+0x6c>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d120      	bne.n	8000822 <HAL_RTC_MspInit+0x62>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007e4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fac4 	bl	8001d80 <HAL_RCCEx_PeriphCLKConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80007fe:	f7ff ffb5 	bl	800076c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_RTC_MspInit+0x70>)
 8000804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000808:	4a09      	ldr	r2, [pc, #36]	; (8000830 <HAL_RTC_MspInit+0x70>)
 800080a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800080e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2002      	movs	r0, #2
 8000818:	f000 fa4f 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_IRQn);
 800081c:	2002      	movs	r0, #2
 800081e:	f000 fa68 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000822:	bf00      	nop
 8000824:	3790      	adds	r7, #144	; 0x90
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40002800 	.word	0x40002800
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0ac      	sub	sp, #176	; 0xb0
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2288      	movs	r2, #136	; 0x88
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fe53 	bl	8003500 <memset>
  if(huart->Instance==USART2)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <HAL_UART_MspInit+0xb0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d13b      	bne.n	80008dc <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fa85 	bl	8001d80 <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800087c:	f7ff ff76 	bl	800076c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 8000882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 8000886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088a:	6593      	str	r3, [r2, #88]	; 0x58
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b0:	230c      	movs	r3, #12
 80008b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c8:	2307      	movs	r3, #7
 80008ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f000 fa26 	bl	8000d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	37b0      	adds	r7, #176	; 0xb0
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40021000 	.word	0x40021000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f8c4 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <TAMP_STAMP_IRQHandler>:

/**
  * @brief This function handles RTC tamper and time stamp, CSS on LSE interrupts through EXTI line 19.
  */
void TAMP_STAMP_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_IRQn 0 */

  /* USER CODE END TAMP_STAMP_IRQn 0 */
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TAMP_STAMP_IRQHandler+0x10>)
 8000946:	f001 ffe9 	bl	800291c <HAL_RTCEx_TamperTimeStampIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_IRQn 1 */

  /* USER CODE END TAMP_STAMP_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000028 	.word	0x20000028

08000954 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <SystemInit+0x5c>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <SystemInit+0x5c>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <SystemInit+0x60>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <SystemInit+0x60>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <SystemInit+0x60>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <SystemInit+0x60>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <SystemInit+0x60>)
 8000980:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000984:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000988:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <SystemInit+0x60>)
 800098c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000990:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <SystemInit+0x60>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <SystemInit+0x60>)
 8000998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SystemInit+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00
 80009b4:	40021000 	.word	0x40021000

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff ffca 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009c2:	e003      	b.n	80009cc <LoopCopyDataInit>

080009c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009ca:	3104      	adds	r1, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009cc:	480a      	ldr	r0, [pc, #40]	; (80009f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80009d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009d4:	d3f6      	bcc.n	80009c4 <CopyDataInit>
	ldr	r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
	b	LoopFillZerobss
 80009d8:	e002      	b.n	80009e0 <LoopFillZerobss>

080009da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009dc:	f842 3b04 	str.w	r3, [r2], #4

080009e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <LoopForever+0x16>)
	cmp	r2, r3
 80009e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009e4:	d3f9      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 fd67 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fd77 	bl	80004dc <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80009f4:	08003580 	.word	0x08003580
	ldr	r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009fc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a04:	200000d4 	.word	0x200000d4

08000a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_2_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_Init+0x3c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_Init+0x3c>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 f93e 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f80f 	bl	8000a4c <HAL_InitTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	e001      	b.n	8000a3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3a:	f7ff fe9d 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d023      	beq.n	8000aa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_InitTick+0x70>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f949 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10f      	bne.n	8000aa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d809      	bhi.n	8000a9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f913 	bl	8000cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_InitTick+0x74>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e004      	b.n	8000aac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e001      	b.n	8000aac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200000d0 	.word	0x200000d0

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000d0 	.word	0x200000d0

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff29 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff3e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff31 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	e17f      	b.n	8001038 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 8171 	beq.w	8001032 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d00b      	beq.n	8000d70 <HAL_GPIO_Init+0x48>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d007      	beq.n	8000d70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d64:	2b11      	cmp	r3, #17
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b12      	cmp	r3, #18
 8000d6e:	d130      	bne.n	8000dd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da6:	2201      	movs	r2, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	f003 0201 	and.w	r2, r3, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d118      	bne.n	8000e10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000de4:	2201      	movs	r2, #1
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	f003 0201 	and.w	r2, r3, #1
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x128>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b12      	cmp	r3, #18
 8000e4e:	d123      	bne.n	8000e98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	6939      	ldr	r1, [r7, #16]
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0203 	and.w	r2, r3, #3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80ac 	beq.w	8001032 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <HAL_GPIO_Init+0x330>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	4a5e      	ldr	r2, [pc, #376]	; (8001058 <HAL_GPIO_Init+0x330>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee6:	4b5c      	ldr	r3, [pc, #368]	; (8001058 <HAL_GPIO_Init+0x330>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef2:	4a5a      	ldr	r2, [pc, #360]	; (800105c <HAL_GPIO_Init+0x334>)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f1c:	d025      	beq.n	8000f6a <HAL_GPIO_Init+0x242>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <HAL_GPIO_Init+0x338>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d01f      	beq.n	8000f66 <HAL_GPIO_Init+0x23e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4e      	ldr	r2, [pc, #312]	; (8001064 <HAL_GPIO_Init+0x33c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d019      	beq.n	8000f62 <HAL_GPIO_Init+0x23a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4d      	ldr	r2, [pc, #308]	; (8001068 <HAL_GPIO_Init+0x340>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0x236>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4c      	ldr	r2, [pc, #304]	; (800106c <HAL_GPIO_Init+0x344>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_Init+0x232>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <HAL_GPIO_Init+0x348>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x22e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4a      	ldr	r2, [pc, #296]	; (8001074 <HAL_GPIO_Init+0x34c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_Init+0x22a>
 8000f4e:	2306      	movs	r3, #6
 8000f50:	e00c      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f52:	2307      	movs	r3, #7
 8000f54:	e00a      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f56:	2305      	movs	r3, #5
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7c:	4937      	ldr	r1, [pc, #220]	; (800105c <HAL_GPIO_Init+0x334>)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_GPIO_Init+0x350>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fae:	4a32      	ldr	r2, [pc, #200]	; (8001078 <HAL_GPIO_Init+0x350>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <HAL_GPIO_Init+0x350>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd8:	4a27      	ldr	r2, [pc, #156]	; (8001078 <HAL_GPIO_Init+0x350>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_GPIO_Init+0x350>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001002:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <HAL_GPIO_Init+0x350>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_GPIO_Init+0x350>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800102c:	4a12      	ldr	r2, [pc, #72]	; (8001078 <HAL_GPIO_Init+0x350>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa22 f303 	lsr.w	r3, r2, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	f47f ae78 	bne.w	8000d38 <HAL_GPIO_Init+0x10>
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	40010000 	.word	0x40010000
 8001060:	48000400 	.word	0x48000400
 8001064:	48000800 	.word	0x48000800
 8001068:	48000c00 	.word	0x48000c00
 800106c:	48001000 	.word	0x48001000
 8001070:	48001400 	.word	0x48001400
 8001074:	48001800 	.word	0x48001800
 8001078:	40010400 	.word	0x40010400

0800107c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
 8001088:	4613      	mov	r3, r2
 800108a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4013      	ands	r3, r2
 80010c4:	041a      	lsls	r2, r3, #16
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43d9      	mvns	r1, r3
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	400b      	ands	r3, r1
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40007000 	.word	0x40007000

080010fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800110a:	d130      	bne.n	800116e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001118:	d038      	beq.n	800118c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001128:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2232      	movs	r2, #50	; 0x32
 8001130:	fb02 f303 	mul.w	r3, r2, r3
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	3301      	adds	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001140:	e002      	b.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3b01      	subs	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001154:	d102      	bne.n	800115c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f2      	bne.n	8001142 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001168:	d110      	bne.n	800118c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e00f      	b.n	800118e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117a:	d007      	beq.n	800118c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40007000 	.word	0x40007000
 80011a0:	20000000 	.word	0x20000000
 80011a4:	431bde83 	.word	0x431bde83

080011a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e3d4      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ba:	4ba1      	ldr	r3, [pc, #644]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011c4:	4b9e      	ldr	r3, [pc, #632]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80e4 	beq.w	80013a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <HAL_RCC_OscConfig+0x4a>
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	f040 808b 	bne.w	8001300 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	f040 8087 	bne.w	8001300 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f2:	4b93      	ldr	r3, [pc, #588]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <HAL_RCC_OscConfig+0x62>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e3ac      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	4b8c      	ldr	r3, [pc, #560]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <HAL_RCC_OscConfig+0x7c>
 800121a:	4b89      	ldr	r3, [pc, #548]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001222:	e005      	b.n	8001230 <HAL_RCC_OscConfig+0x88>
 8001224:	4b86      	ldr	r3, [pc, #536]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001230:	4293      	cmp	r3, r2
 8001232:	d223      	bcs.n	800127c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fd41 	bl	8001cc0 <RCC_SetFlashLatencyFromMSIRange>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e38d      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001248:	4b7d      	ldr	r3, [pc, #500]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a7c      	ldr	r2, [pc, #496]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b7a      	ldr	r3, [pc, #488]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4977      	ldr	r1, [pc, #476]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001266:	4b76      	ldr	r3, [pc, #472]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	4972      	ldr	r1, [pc, #456]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
 800127a:	e025      	b.n	80012c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800127c:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a6f      	ldr	r2, [pc, #444]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	496a      	ldr	r1, [pc, #424]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800129a:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	4965      	ldr	r1, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fd01 	bl	8001cc0 <RCC_SetFlashLatencyFromMSIRange>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e34d      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012c8:	f000 fc36 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b5c      	ldr	r3, [pc, #368]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	495a      	ldr	r1, [pc, #360]	; (8001444 <HAL_RCC_OscConfig+0x29c>)
 80012da:	5ccb      	ldrb	r3, [r1, r3]
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	4a58      	ldr	r2, [pc, #352]	; (8001448 <HAL_RCC_OscConfig+0x2a0>)
 80012e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012e8:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_RCC_OscConfig+0x2a4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fbad 	bl	8000a4c <HAL_InitTick>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d052      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	e331      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d032      	beq.n	800136e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001308:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a4c      	ldr	r2, [pc, #304]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001314:	f7ff fbea 	bl	8000aec <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800131c:	f7ff fbe6 	bl	8000aec <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e31a      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800132e:	4b44      	ldr	r3, [pc, #272]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a40      	ldr	r2, [pc, #256]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	493b      	ldr	r1, [pc, #236]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	4936      	ldr	r1, [pc, #216]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	e01a      	b.n	80013a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800136e:	4b34      	ldr	r3, [pc, #208]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a33      	ldr	r2, [pc, #204]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800137a:	f7ff fbb7 	bl	8000aec <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001382:	f7ff fbb3 	bl	8000aec <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e2e7      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x1da>
 80013a0:	e000      	b.n	80013a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d074      	beq.n	800149a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d005      	beq.n	80013c2 <HAL_RCC_OscConfig+0x21a>
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	d10e      	bne.n	80013da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d10b      	bne.n	80013da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d064      	beq.n	8001498 <HAL_RCC_OscConfig+0x2f0>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d160      	bne.n	8001498 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e2c4      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x24a>
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a15      	ldr	r2, [pc, #84]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 80013ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e01d      	b.n	800142e <HAL_RCC_OscConfig+0x286>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fa:	d10c      	bne.n	8001416 <HAL_RCC_OscConfig+0x26e>
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e00b      	b.n	800142e <HAL_RCC_OscConfig+0x286>
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 800141c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_RCC_OscConfig+0x298>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01c      	beq.n	8001470 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fb59 	bl	8000aec <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143c:	e011      	b.n	8001462 <HAL_RCC_OscConfig+0x2ba>
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	08003528 	.word	0x08003528
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fb4c 	bl	8000aec <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e280      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001462:	4baf      	ldr	r3, [pc, #700]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x2a8>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fb3c 	bl	8000aec <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fb38 	bl	8000aec <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e26c      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148a:	4ba5      	ldr	r3, [pc, #660]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x2d0>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d060      	beq.n	8001568 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x310>
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b0c      	cmp	r3, #12
 80014b0:	d119      	bne.n	80014e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d116      	bne.n	80014e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b8:	4b99      	ldr	r3, [pc, #612]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_OscConfig+0x328>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e249      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b93      	ldr	r3, [pc, #588]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	061b      	lsls	r3, r3, #24
 80014de:	4990      	ldr	r1, [pc, #576]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e4:	e040      	b.n	8001568 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d023      	beq.n	8001536 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ee:	4b8c      	ldr	r3, [pc, #560]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a8b      	ldr	r2, [pc, #556]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff faf7 	bl	8000aec <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff faf3 	bl	8000aec <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e227      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001514:	4b82      	ldr	r3, [pc, #520]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b7f      	ldr	r3, [pc, #508]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	497c      	ldr	r1, [pc, #496]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
 8001534:	e018      	b.n	8001568 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	4b7a      	ldr	r3, [pc, #488]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a79      	ldr	r2, [pc, #484]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 800153c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fad3 	bl	8000aec <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff facf 	bl	8000aec <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e203      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155c:	4b70      	ldr	r3, [pc, #448]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d03c      	beq.n	80015ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01c      	beq.n	80015b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 800157e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001582:	4a67      	ldr	r2, [pc, #412]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158c:	f7ff faae 	bl	8000aec <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001594:	f7ff faaa 	bl	8000aec <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1de      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a6:	4b5e      	ldr	r3, [pc, #376]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80015a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ef      	beq.n	8001594 <HAL_RCC_OscConfig+0x3ec>
 80015b4:	e01b      	b.n	80015ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b6:	4b5a      	ldr	r3, [pc, #360]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80015b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015bc:	4a58      	ldr	r2, [pc, #352]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff fa91 	bl	8000aec <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fa8d 	bl	8000aec <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e1c1      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e0:	4b4f      	ldr	r3, [pc, #316]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80015e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1ef      	bne.n	80015ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80a6 	beq.w	8001748 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001600:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10d      	bne.n	8001628 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	4b44      	ldr	r3, [pc, #272]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	4a43      	ldr	r2, [pc, #268]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6593      	str	r3, [r2, #88]	; 0x58
 8001618:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001624:	2301      	movs	r3, #1
 8001626:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001628:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <HAL_RCC_OscConfig+0x57c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d118      	bne.n	8001666 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001634:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <HAL_RCC_OscConfig+0x57c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a3a      	ldr	r2, [pc, #232]	; (8001724 <HAL_RCC_OscConfig+0x57c>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001640:	f7ff fa54 	bl	8000aec <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001648:	f7ff fa50 	bl	8000aec <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e184      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <HAL_RCC_OscConfig+0x57c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_RCC_OscConfig+0x4d8>
 800166e:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001674:	4a2a      	ldr	r2, [pc, #168]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167e:	e024      	b.n	80016ca <HAL_RCC_OscConfig+0x522>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d110      	bne.n	80016aa <HAL_RCC_OscConfig+0x502>
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168e:	4a24      	ldr	r2, [pc, #144]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	4a20      	ldr	r2, [pc, #128]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a8:	e00f      	b.n	80016ca <HAL_RCC_OscConfig+0x522>
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80016bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d016      	beq.n	8001700 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff fa0b 	bl	8000aec <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff fa07 	bl	8000aec <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e139      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_OscConfig+0x578>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ed      	beq.n	80016da <HAL_RCC_OscConfig+0x532>
 80016fe:	e01a      	b.n	8001736 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff f9f4 	bl	8000aec <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001706:	e00f      	b.n	8001728 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff f9f0 	bl	8000aec <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d906      	bls.n	8001728 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e122      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001728:	4b90      	ldr	r3, [pc, #576]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1e8      	bne.n	8001708 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001736:	7ffb      	ldrb	r3, [r7, #31]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173c:	4b8b      	ldr	r3, [pc, #556]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	4a8a      	ldr	r2, [pc, #552]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 8001742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001746:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8108 	beq.w	8001962 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	2b02      	cmp	r3, #2
 8001758:	f040 80d0 	bne.w	80018fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800175c:	4b83      	ldr	r3, [pc, #524]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0203 	and.w	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	429a      	cmp	r2, r3
 800176e:	d130      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	3b01      	subs	r3, #1
 800177c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d127      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d11f      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800179c:	2a07      	cmp	r2, #7
 800179e:	bf14      	ite	ne
 80017a0:	2201      	movne	r2, #1
 80017a2:	2200      	moveq	r2, #0
 80017a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d113      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	085b      	lsrs	r3, r3, #1
 80017ca:	3b01      	subs	r3, #1
 80017cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d06e      	beq.n	80018b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d069      	beq.n	80018ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017d8:	4b64      	ldr	r3, [pc, #400]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017e4:	4b61      	ldr	r3, [pc, #388]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b7      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017f4:	4b5d      	ldr	r3, [pc, #372]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a5c      	ldr	r2, [pc, #368]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80017fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001800:	f7ff f974 	bl	8000aec <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff f970 	bl	8000aec <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0a4      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181a:	4b54      	ldr	r3, [pc, #336]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001826:	4b51      	ldr	r3, [pc, #324]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b51      	ldr	r3, [pc, #324]	; (8001970 <HAL_RCC_OscConfig+0x7c8>)
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001836:	3a01      	subs	r2, #1
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001840:	0212      	lsls	r2, r2, #8
 8001842:	4311      	orrs	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001848:	0852      	lsrs	r2, r2, #1
 800184a:	3a01      	subs	r2, #1
 800184c:	0552      	lsls	r2, r2, #21
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001854:	0852      	lsrs	r2, r2, #1
 8001856:	3a01      	subs	r2, #1
 8001858:	0652      	lsls	r2, r2, #25
 800185a:	4311      	orrs	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001860:	0912      	lsrs	r2, r2, #4
 8001862:	0452      	lsls	r2, r2, #17
 8001864:	430a      	orrs	r2, r1
 8001866:	4941      	ldr	r1, [pc, #260]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 8001868:	4313      	orrs	r3, r2
 800186a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a3e      	ldr	r2, [pc, #248]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001876:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001878:	4b3c      	ldr	r3, [pc, #240]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4a3b      	ldr	r2, [pc, #236]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001884:	f7ff f932 	bl	8000aec <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f92e 	bl	8000aec <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e062      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018aa:	e05a      	b.n	8001962 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e059      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d152      	bne.n	8001962 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a2a      	ldr	r2, [pc, #168]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80018c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018d4:	f7ff f90a 	bl	8000aec <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f906 	bl	8000aec <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e03a      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x734>
 80018fa:	e032      	b.n	8001962 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d02d      	beq.n	800195e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a19      	ldr	r2, [pc, #100]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 8001908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 8001920:	f023 0303 	bic.w	r3, r3, #3
 8001924:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 800192c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001934:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff f8d9 	bl	8000aec <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff f8d5 	bl	8000aec <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e009      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_OscConfig+0x7c4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x796>
 800195c:	e001      	b.n	8001962 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	f99d808c 	.word	0xf99d808c

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0c8      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b66      	ldr	r3, [pc, #408]	; (8001b24 <HAL_RCC_ClockConfig+0x1b0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d910      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <HAL_RCC_ClockConfig+0x1b0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4961      	ldr	r1, [pc, #388]	; (8001b24 <HAL_RCC_ClockConfig+0x1b0>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <HAL_RCC_ClockConfig+0x1b0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0b0      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d04c      	beq.n	8001a5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019cc:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d121      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e09e      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d115      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e092      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019fc:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e086      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0c:	4b46      	ldr	r3, [pc, #280]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e07e      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1c:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 0203 	bic.w	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	493f      	ldr	r1, [pc, #252]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a2e:	f7ff f85d 	bl	8000aec <HAL_GetTick>
 8001a32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a36:	f7ff f859 	bl	8000aec <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e066      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 020c 	and.w	r2, r3, #12
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d1eb      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	492c      	ldr	r1, [pc, #176]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <HAL_RCC_ClockConfig+0x1b0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d210      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_RCC_ClockConfig+0x1b0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 0207 	bic.w	r2, r3, #7
 8001a92:	4924      	ldr	r1, [pc, #144]	; (8001b24 <HAL_RCC_ClockConfig+0x1b0>)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_RCC_ClockConfig+0x1b0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e036      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4918      	ldr	r1, [pc, #96]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d009      	beq.n	8001aea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4910      	ldr	r1, [pc, #64]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aea:	f000 f825 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001aee:	4602      	mov	r2, r0
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	490c      	ldr	r1, [pc, #48]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	5ccb      	ldrb	r3, [r1, r3]
 8001afe:	f003 031f 	and.w	r3, r3, #31
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe ff9c 	bl	8000a4c <HAL_InitTick>
 8001b14:	4603      	mov	r3, r0
 8001b16:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b18:	7afb      	ldrb	r3, [r7, #11]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08003528 	.word	0x08003528
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x34>
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d121      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d11e      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	e005      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b94:	4a2b      	ldr	r2, [pc, #172]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d102      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	e004      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bbc:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d134      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d003      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0xa6>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d003      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0xac>
 8001bdc:	e005      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001be0:	617b      	str	r3, [r7, #20]
      break;
 8001be2:	e005      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001be6:	617b      	str	r3, [r7, #20]
      break;
 8001be8:	e002      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	617b      	str	r3, [r7, #20]
      break;
 8001bee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	fb02 f203 	mul.w	r2, r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	0e5b      	lsrs	r3, r3, #25
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	3301      	adds	r3, #1
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c30:	69bb      	ldr	r3, [r7, #24]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08003540 	.word	0x08003540
 8001c48:	00f42400 	.word	0x00f42400
 8001c4c:	007a1200 	.word	0x007a1200

08001c50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000000 	.word	0x20000000

08001c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c6c:	f7ff fff0 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4904      	ldr	r1, [pc, #16]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	08003538 	.word	0x08003538

08001c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c98:	f7ff ffda 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0adb      	lsrs	r3, r3, #11
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4904      	ldr	r1, [pc, #16]	; (8001cbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08003538 	.word	0x08003538

08001cc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cd8:	f7ff fa02 	bl	80010e0 <HAL_PWREx_GetVoltageRange>
 8001cdc:	6178      	str	r0, [r7, #20]
 8001cde:	e014      	b.n	8001d0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6593      	str	r3, [r2, #88]	; 0x58
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cf8:	f7ff f9f2 	bl	80010e0 <HAL_PWREx_GetVoltageRange>
 8001cfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d10:	d10b      	bne.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b80      	cmp	r3, #128	; 0x80
 8001d16:	d919      	bls.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d1c:	d902      	bls.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d1e:	2302      	movs	r3, #2
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e013      	b.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d24:	2301      	movs	r3, #1
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e010      	b.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d902      	bls.n	8001d36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d30:	2303      	movs	r3, #3
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	e00a      	b.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b80      	cmp	r3, #128	; 0x80
 8001d3a:	d102      	bne.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e004      	b.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b70      	cmp	r3, #112	; 0x70
 8001d46:	d101      	bne.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d48:	2301      	movs	r3, #1
 8001d4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 0207 	bic.w	r2, r3, #7
 8001d54:	4909      	ldr	r1, [pc, #36]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40022000 	.word	0x40022000

08001d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d88:	2300      	movs	r3, #0
 8001d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d041      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001da0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001da4:	d02a      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001da6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001daa:	d824      	bhi.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001db0:	d008      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001db2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001db6:	d81e      	bhi.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00a      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc0:	d010      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dc2:	e018      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dc4:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4a85      	ldr	r2, [pc, #532]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dd0:	e015      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fabb 	bl	8002354 <RCCEx_PLLSAI1_Config>
 8001dde:	4603      	mov	r3, r0
 8001de0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001de2:	e00c      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3320      	adds	r3, #32
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fba6 	bl	800253c <RCCEx_PLLSAI2_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001df4:	e003      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	74fb      	strb	r3, [r7, #19]
      break;
 8001dfa:	e000      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dfe:	7cfb      	ldrb	r3, [r7, #19]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10b      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e04:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e12:	4973      	ldr	r1, [pc, #460]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e1a:	e001      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e1c:	7cfb      	ldrb	r3, [r7, #19]
 8001e1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d041      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e34:	d02a      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e3a:	d824      	bhi.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e40:	d008      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e46:	d81e      	bhi.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e50:	d010      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e52:	e018      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e54:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a61      	ldr	r2, [pc, #388]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e60:	e015      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fa73 	bl	8002354 <RCCEx_PLLSAI1_Config>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e72:	e00c      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3320      	adds	r3, #32
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fb5e 	bl	800253c <RCCEx_PLLSAI2_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e84:	e003      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	74fb      	strb	r3, [r7, #19]
      break;
 8001e8a:	e000      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e8e:	7cfb      	ldrb	r3, [r7, #19]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e94:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ea2:	494f      	ldr	r1, [pc, #316]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eaa:	e001      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eac:	7cfb      	ldrb	r3, [r7, #19]
 8001eae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a0 	beq.w	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	4a40      	ldr	r2, [pc, #256]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee4:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a3a      	ldr	r2, [pc, #232]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f00:	f7fe fdf4 	bl	8000aec <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f06:	e009      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f08:	f7fe fdf0 	bl	8000aec <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d902      	bls.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	74fb      	strb	r3, [r7, #19]
        break;
 8001f1a:	e005      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f1c:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ef      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d15c      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01f      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d019      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f78:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fdaf 	bl	8000aec <HAL_GetTick>
 8001f8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f90:	e00b      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7fe fdab 	bl	8000aec <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d902      	bls.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	74fb      	strb	r3, [r7, #19]
            break;
 8001fa8:	e006      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ec      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fce:	4904      	ldr	r1, [pc, #16]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fd6:	e009      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	74bb      	strb	r3, [r7, #18]
 8001fdc:	e006      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fec:	7c7b      	ldrb	r3, [r7, #17]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4b9e      	ldr	r3, [pc, #632]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	4a9d      	ldr	r2, [pc, #628]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800200a:	4b98      	ldr	r3, [pc, #608]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002010:	f023 0203 	bic.w	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	4994      	ldr	r1, [pc, #592]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800202c:	4b8f      	ldr	r3, [pc, #572]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f023 020c 	bic.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	498c      	ldr	r1, [pc, #560]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800204e:	4b87      	ldr	r3, [pc, #540]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002054:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4983      	ldr	r1, [pc, #524]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002070:	4b7e      	ldr	r3, [pc, #504]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	497b      	ldr	r1, [pc, #492]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002092:	4b76      	ldr	r3, [pc, #472]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a0:	4972      	ldr	r1, [pc, #456]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020b4:	4b6d      	ldr	r3, [pc, #436]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	496a      	ldr	r1, [pc, #424]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020d6:	4b65      	ldr	r3, [pc, #404]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	4961      	ldr	r1, [pc, #388]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020f8:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002106:	4959      	ldr	r1, [pc, #356]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800211a:	4b54      	ldr	r3, [pc, #336]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002128:	4950      	ldr	r1, [pc, #320]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800213c:	4b4b      	ldr	r3, [pc, #300]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	4948      	ldr	r1, [pc, #288]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002164:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	493f      	ldr	r1, [pc, #252]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d028      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	4937      	ldr	r1, [pc, #220]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800219e:	d106      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021a0:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a31      	ldr	r2, [pc, #196]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021aa:	60d3      	str	r3, [r2, #12]
 80021ac:	e011      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021b6:	d10c      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	2101      	movs	r1, #1
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f8c8 	bl	8002354 <RCCEx_PLLSAI1_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021ce:	7cfb      	ldrb	r3, [r7, #19]
 80021d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d028      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	491f      	ldr	r1, [pc, #124]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021fc:	d106      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	4a1a      	ldr	r2, [pc, #104]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002208:	60d3      	str	r3, [r2, #12]
 800220a:	e011      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002214:	d10c      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3304      	adds	r3, #4
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f899 	bl	8002354 <RCCEx_PLLSAI1_Config>
 8002222:	4603      	mov	r3, r0
 8002224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d02b      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800225a:	d109      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a02      	ldr	r2, [pc, #8]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002266:	60d3      	str	r3, [r2, #12]
 8002268:	e014      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002278:	d10c      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	2101      	movs	r1, #1
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f867 	bl	8002354 <RCCEx_PLLSAI1_Config>
 8002286:	4603      	mov	r3, r0
 8002288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d02f      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ae:	4928      	ldr	r1, [pc, #160]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022be:	d10d      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3304      	adds	r3, #4
 80022c4:	2102      	movs	r1, #2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f844 	bl	8002354 <RCCEx_PLLSAI1_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d014      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
 80022d8:	74bb      	strb	r3, [r7, #18]
 80022da:	e011      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3320      	adds	r3, #32
 80022ea:	2102      	movs	r1, #2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f925 	bl	800253c <RCCEx_PLLSAI2_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800231a:	490d      	ldr	r1, [pc, #52]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800233e:	4904      	ldr	r1, [pc, #16]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002346:	7cbb      	ldrb	r3, [r7, #18]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000

08002354 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002362:	4b75      	ldr	r3, [pc, #468]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d018      	beq.n	80023a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800236e:	4b72      	ldr	r3, [pc, #456]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f003 0203 	and.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d10d      	bne.n	800239a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
       ||
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002386:	4b6c      	ldr	r3, [pc, #432]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
       ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d047      	beq.n	800242a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e044      	b.n	800242a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d018      	beq.n	80023da <RCCEx_PLLSAI1_Config+0x86>
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d825      	bhi.n	80023f8 <RCCEx_PLLSAI1_Config+0xa4>
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d002      	beq.n	80023b6 <RCCEx_PLLSAI1_Config+0x62>
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d009      	beq.n	80023c8 <RCCEx_PLLSAI1_Config+0x74>
 80023b4:	e020      	b.n	80023f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023b6:	4b60      	ldr	r3, [pc, #384]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11d      	bne.n	80023fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c6:	e01a      	b.n	80023fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023c8:	4b5b      	ldr	r3, [pc, #364]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d116      	bne.n	8002402 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d8:	e013      	b.n	8002402 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023da:	4b57      	ldr	r3, [pc, #348]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023e6:	4b54      	ldr	r3, [pc, #336]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023f6:	e006      	b.n	8002406 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      break;
 80023fc:	e004      	b.n	8002408 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023fe:	bf00      	nop
 8002400:	e002      	b.n	8002408 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002402:	bf00      	nop
 8002404:	e000      	b.n	8002408 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002406:	bf00      	nop
    }

    if(status == HAL_OK)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10d      	bne.n	800242a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800240e:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	430b      	orrs	r3, r1
 8002424:	4944      	ldr	r1, [pc, #272]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d17d      	bne.n	800252c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002430:	4b41      	ldr	r3, [pc, #260]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a40      	ldr	r2, [pc, #256]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002436:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800243a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800243c:	f7fe fb56 	bl	8000aec <HAL_GetTick>
 8002440:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002442:	e009      	b.n	8002458 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002444:	f7fe fb52 	bl	8000aec <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d902      	bls.n	8002458 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	73fb      	strb	r3, [r7, #15]
        break;
 8002456:	e005      	b.n	8002464 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002458:	4b37      	ldr	r3, [pc, #220]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1ef      	bne.n	8002444 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d160      	bne.n	800252c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d111      	bne.n	8002494 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002470:	4b31      	ldr	r3, [pc, #196]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6892      	ldr	r2, [r2, #8]
 8002480:	0211      	lsls	r1, r2, #8
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68d2      	ldr	r2, [r2, #12]
 8002486:	0912      	lsrs	r2, r2, #4
 8002488:	0452      	lsls	r2, r2, #17
 800248a:	430a      	orrs	r2, r1
 800248c:	492a      	ldr	r1, [pc, #168]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	610b      	str	r3, [r1, #16]
 8002492:	e027      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d112      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800249a:	4b27      	ldr	r3, [pc, #156]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6892      	ldr	r2, [r2, #8]
 80024aa:	0211      	lsls	r1, r2, #8
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6912      	ldr	r2, [r2, #16]
 80024b0:	0852      	lsrs	r2, r2, #1
 80024b2:	3a01      	subs	r2, #1
 80024b4:	0552      	lsls	r2, r2, #21
 80024b6:	430a      	orrs	r2, r1
 80024b8:	491f      	ldr	r1, [pc, #124]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	610b      	str	r3, [r1, #16]
 80024be:	e011      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6892      	ldr	r2, [r2, #8]
 80024d0:	0211      	lsls	r1, r2, #8
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6952      	ldr	r2, [r2, #20]
 80024d6:	0852      	lsrs	r2, r2, #1
 80024d8:	3a01      	subs	r2, #1
 80024da:	0652      	lsls	r2, r2, #25
 80024dc:	430a      	orrs	r2, r1
 80024de:	4916      	ldr	r1, [pc, #88]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024e4:	4b14      	ldr	r3, [pc, #80]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7fe fafc 	bl	8000aec <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024f6:	e009      	b.n	800250c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024f8:	f7fe faf8 	bl	8000aec <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d902      	bls.n	800250c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	73fb      	strb	r3, [r7, #15]
          break;
 800250a:	e005      	b.n	8002518 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ef      	beq.n	80024f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	4904      	ldr	r1, [pc, #16]	; (8002538 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000

0800253c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800254a:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d018      	beq.n	8002588 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002556:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0203 	and.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d10d      	bne.n	8002582 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
       ||
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800256e:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
       ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d047      	beq.n	8002612 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e044      	b.n	8002612 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d018      	beq.n	80025c2 <RCCEx_PLLSAI2_Config+0x86>
 8002590:	2b03      	cmp	r3, #3
 8002592:	d825      	bhi.n	80025e0 <RCCEx_PLLSAI2_Config+0xa4>
 8002594:	2b01      	cmp	r3, #1
 8002596:	d002      	beq.n	800259e <RCCEx_PLLSAI2_Config+0x62>
 8002598:	2b02      	cmp	r3, #2
 800259a:	d009      	beq.n	80025b0 <RCCEx_PLLSAI2_Config+0x74>
 800259c:	e020      	b.n	80025e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800259e:	4b55      	ldr	r3, [pc, #340]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11d      	bne.n	80025e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ae:	e01a      	b.n	80025e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d116      	bne.n	80025ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c0:	e013      	b.n	80025ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025c2:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ce:	4b49      	ldr	r3, [pc, #292]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025de:	e006      	b.n	80025ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      break;
 80025e4:	e004      	b.n	80025f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025e6:	bf00      	nop
 80025e8:	e002      	b.n	80025f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025ea:	bf00      	nop
 80025ec:	e000      	b.n	80025f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10d      	bne.n	8002612 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025f6:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	430b      	orrs	r3, r1
 800260c:	4939      	ldr	r1, [pc, #228]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260e:	4313      	orrs	r3, r2
 8002610:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d167      	bne.n	80026e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002618:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a35      	ldr	r2, [pc, #212]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002624:	f7fe fa62 	bl	8000aec <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800262a:	e009      	b.n	8002640 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800262c:	f7fe fa5e 	bl	8000aec <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d902      	bls.n	8002640 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	73fb      	strb	r3, [r7, #15]
        break;
 800263e:	e005      	b.n	800264c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002640:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ef      	bne.n	800262c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d14a      	bne.n	80026e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6892      	ldr	r2, [r2, #8]
 8002668:	0211      	lsls	r1, r2, #8
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68d2      	ldr	r2, [r2, #12]
 800266e:	0912      	lsrs	r2, r2, #4
 8002670:	0452      	lsls	r2, r2, #17
 8002672:	430a      	orrs	r2, r1
 8002674:	491f      	ldr	r1, [pc, #124]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002676:	4313      	orrs	r3, r2
 8002678:	614b      	str	r3, [r1, #20]
 800267a:	e011      	b.n	80026a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002684:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6892      	ldr	r2, [r2, #8]
 800268c:	0211      	lsls	r1, r2, #8
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6912      	ldr	r2, [r2, #16]
 8002692:	0852      	lsrs	r2, r2, #1
 8002694:	3a01      	subs	r2, #1
 8002696:	0652      	lsls	r2, r2, #25
 8002698:	430a      	orrs	r2, r1
 800269a:	4916      	ldr	r1, [pc, #88]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	4313      	orrs	r3, r2
 800269e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe fa1e 	bl	8000aec <HAL_GetTick>
 80026b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026b2:	e009      	b.n	80026c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026b4:	f7fe fa1a 	bl	8000aec <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d902      	bls.n	80026c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	73fb      	strb	r3, [r7, #15]
          break;
 80026c6:	e005      	b.n	80026d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	4904      	ldr	r1, [pc, #16]	; (80026f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000

080026f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d06c      	beq.n	80027e4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe f84e 	bl	80007c0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	22ca      	movs	r2, #202	; 0xca
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2253      	movs	r2, #83	; 0x53
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f87c 	bl	800283a <RTC_EnterInitMode>
 8002742:	4603      	mov	r3, r0
 8002744:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d14b      	bne.n	80027e4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800275a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800275e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68d2      	ldr	r2, [r2, #12]
 8002786:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6919      	ldr	r1, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	041a      	lsls	r2, r3, #16
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f87f 	bl	80028a0 <RTC_ExitInitMode>
 80027a2:	4603      	mov	r3, r0
 80027a4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11b      	bne.n	80027e4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0203 	bic.w	r2, r2, #3
 80027ba:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002804:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002806:	f7fe f971 	bl	8000aec <HAL_GetTick>
 800280a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800280c:	e009      	b.n	8002822 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800280e:	f7fe f96d 	bl	8000aec <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800281c:	d901      	bls.n	8002822 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e007      	b.n	8002832 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ee      	beq.n	800280e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d120      	bne.n	8002896 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800285e:	f7fe f945 	bl	8000aec <HAL_GetTick>
 8002862:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002864:	e00d      	b.n	8002882 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002866:	f7fe f941 	bl	8000aec <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002874:	d905      	bls.n	8002882 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2203      	movs	r2, #3
 800287e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <RTC_EnterInitMode+0x5c>
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b03      	cmp	r3, #3
 8002894:	d1e7      	bne.n	8002866 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <RTC_ExitInitMode+0x78>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <RTC_ExitInitMode+0x78>)
 80028b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <RTC_ExitInitMode+0x78>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10c      	bne.n	80028de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff92 	bl	80027ee <HAL_RTC_WaitForSynchro>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01e      	beq.n	800290e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2203      	movs	r2, #3
 80028d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e017      	b.n	800290e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <RTC_ExitInitMode+0x78>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <RTC_ExitInitMode+0x78>)
 80028e4:	f023 0320 	bic.w	r3, r3, #32
 80028e8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff7f 	bl	80027ee <HAL_RTC_WaitForSynchro>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2203      	movs	r2, #3
 80028fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <RTC_ExitInitMode+0x78>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <RTC_ExitInitMode+0x78>)
 8002908:	f043 0320 	orr.w	r3, r3, #32
 800290c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40002800 	.word	0x40002800

0800291c <HAL_RTCEx_TamperTimeStampIRQHandler>:
}

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's Flag for RTC TimeStamp and Tamper */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RTCEx_TamperTimeStampIRQHandler+0xf0>)
 8002926:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800292a:	615a      	str	r2, [r3, #20]

  /* Get the TimeStamp interrupt source enable status and pending flag status */
  if (__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d012      	beq.n	8002960 <HAL_RTCEx_TamperTimeStampIRQHandler+0x44>
  {
    if (__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_RTCEx_TamperTimeStampIRQHandler+0x44>
    {
      /* TIMESTAMP callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f869 	bl	8002a20 <HAL_RTCEx_TimeStampEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

      /* Clear the TIMESTAMP interrupt pending bit (this will clear timestamp time and date registers) */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800295e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER1_SUPPORT)
  /* Get the Tamper1 interrupt source enable status and pending flag status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_RTCEx_TamperTimeStampIRQHandler+0xf4>)
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d012      	beq.n	8002994 <HAL_RTCEx_TamperTimeStampIRQHandler+0x78>
  {
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <HAL_RTCEx_TamperTimeStampIRQHandler+0x78>
    {
      /* Clear the Tamper1 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f462 5202 	orn	r2, r2, #8320	; 0x2080
 800298c:	60da      	str	r2, [r3, #12]

      /* Tamper1 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fd fd96 	bl	80004c0 <HAL_RTCEx_Tamper1EventCallback>
    }
  }
#endif /* RTC_TAMPER1_SUPPORT */

  /* Get the Tamper2 interrupt source enable status and pending flag status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RTCEx_TamperTimeStampIRQHandler+0xf8>)
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d012      	beq.n	80029c8 <HAL_RTCEx_TamperTimeStampIRQHandler+0xac>
  {
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <HAL_RTCEx_TamperTimeStampIRQHandler+0xac>
    {
      /* Clear the Tamper2 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f462 4281 	orn	r2, r2, #16512	; 0x4080
 80029c0:	60da      	str	r2, [r3, #12]

      /* Tamper2 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f90a 	bl	8002bdc <HAL_RTCEx_Tamper2EventCallback>
    }
  }

#if defined(RTC_TAMPER3_SUPPORT)
  /* Get the Tamper3 interrupts source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP3) != 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RTCEx_TamperTimeStampIRQHandler+0xfc>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d012      	beq.n	80029fc <HAL_RTCEx_TamperTimeStampIRQHandler+0xe0>
  {
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00b      	beq.n	80029fc <HAL_RTCEx_TamperTimeStampIRQHandler+0xe0>
    {
      /* Clear the Tamper3 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	b2d9      	uxtb	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_RTCEx_TamperTimeStampIRQHandler+0x100>)
 80029f2:	430b      	orrs	r3, r1
 80029f4:	60d3      	str	r3, [r2, #12]

      /* Tamper3 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper3EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper3EventCallback(hrtc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8fa 	bl	8002bf0 <HAL_RTCEx_Tamper3EventCallback>
    }
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40010400 	.word	0x40010400
 8002a10:	00010004 	.word	0x00010004
 8002a14:	00080004 	.word	0x00080004
 8002a18:	00400004 	.word	0x00400004
 8002a1c:	ffff7f7f 	.word	0xffff7f7f

08002a20 <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_RTCEx_SetTamper_IT>:
   * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_RTCEx_SetTamper_IT+0x18>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e0be      	b.n	8002bca <HAL_RTCEx_SetTamper_IT+0x196>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Read register */
  tmpreg = hrtc->Instance->TAMPCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	60fb      	str	r3, [r7, #12]

#if defined(RTC_TAMPER1_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_1) != 0)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d024      	beq.n	8002aba <HAL_RTCEx_SetTamper_IT+0x86>
  {
    MODIFY_REG(tmpreg,
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 1207 	bic.w	r2, r3, #458759	; 0x70007
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	6889      	ldr	r1, [r1, #8]
 8002a84:	2900      	cmp	r1, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RTCEx_SetTamper_IT+0x58>
 8002a88:	2100      	movs	r1, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_RTCEx_SetTamper_IT+0x5a>
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	68c9      	ldr	r1, [r1, #12]
 8002a94:	2900      	cmp	r1, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RTCEx_SetTamper_IT+0x68>
 8002a98:	2100      	movs	r1, #0
 8002a9a:	e001      	b.n	8002aa0 <HAL_RTCEx_SetTamper_IT+0x6c>
 8002a9c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	6909      	ldr	r1, [r1, #16]
 8002aa6:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RTCEx_SetTamper_IT+0x7e>
 8002aac:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002ab0:	e000      	b.n	8002ab4 <HAL_RTCEx_SetTamper_IT+0x80>
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER1_SUPPORT */

#if defined(RTC_TAMPER2_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_2) != 0)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d026      	beq.n	8002b14 <HAL_RTCEx_SetTamper_IT+0xe0>
  {
    MODIFY_REG(tmpreg,
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8002acc:	f023 031c 	bic.w	r3, r3, #28
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	6811      	ldr	r1, [r2, #0]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	6852      	ldr	r2, [r2, #4]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	6839      	ldr	r1, [r7, #0]
 8002adc:	6889      	ldr	r1, [r1, #8]
 8002ade:	2900      	cmp	r1, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RTCEx_SetTamper_IT+0xb2>
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_RTCEx_SetTamper_IT+0xb4>
 8002ae6:	2110      	movs	r1, #16
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	6839      	ldr	r1, [r7, #0]
 8002aec:	68c9      	ldr	r1, [r1, #12]
 8002aee:	2900      	cmp	r1, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RTCEx_SetTamper_IT+0xc2>
 8002af2:	2100      	movs	r1, #0
 8002af4:	e001      	b.n	8002afa <HAL_RTCEx_SetTamper_IT+0xc6>
 8002af6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8002afa:	430a      	orrs	r2, r1
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	6909      	ldr	r1, [r1, #16]
 8002b00:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002b04:	d102      	bne.n	8002b0c <HAL_RTCEx_SetTamper_IT+0xd8>
 8002b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b0a:	e000      	b.n	8002b0e <HAL_RTCEx_SetTamper_IT+0xda>
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER2_SUPPORT */

#if defined(RTC_TAMPER3_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_3) != 0)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d026      	beq.n	8002b6e <HAL_RTCEx_SetTamper_IT+0x13a>
  {
    MODIFY_REG(tmpreg,
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002b26:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	6811      	ldr	r1, [r2, #0]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	6852      	ldr	r2, [r2, #4]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	6839      	ldr	r1, [r7, #0]
 8002b36:	6889      	ldr	r1, [r1, #8]
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RTCEx_SetTamper_IT+0x10c>
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	e000      	b.n	8002b42 <HAL_RTCEx_SetTamper_IT+0x10e>
 8002b40:	2140      	movs	r1, #64	; 0x40
 8002b42:	430a      	orrs	r2, r1
 8002b44:	6839      	ldr	r1, [r7, #0]
 8002b46:	68c9      	ldr	r1, [r1, #12]
 8002b48:	2900      	cmp	r1, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RTCEx_SetTamper_IT+0x11c>
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	e001      	b.n	8002b54 <HAL_RTCEx_SetTamper_IT+0x120>
 8002b50:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002b54:	430a      	orrs	r2, r1
 8002b56:	6839      	ldr	r1, [r7, #0]
 8002b58:	6909      	ldr	r1, [r1, #16]
 8002b5a:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002b5e:	d102      	bne.n	8002b66 <HAL_RTCEx_SetTamper_IT+0x132>
 8002b60:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002b64:	e000      	b.n	8002b68 <HAL_RTCEx_SetTamper_IT+0x134>
 8002b66:	2100      	movs	r1, #0
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Update common parameters */
  MODIFY_REG(tmpreg,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	6951      	ldr	r1, [r2, #20]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	6992      	ldr	r2, [r2, #24]
 8002b80:	4311      	orrs	r1, r2
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	69d2      	ldr	r2, [r2, #28]
 8002b86:	4311      	orrs	r1, r2
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	6a12      	ldr	r2, [r2, #32]
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b92:	430a      	orrs	r2, r1
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
             sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | sTamper->TamperPullUp | \
             sTamper->TimeStampOnTamperDetection \
             );

  /* Set register */
  WRITE_REG (hrtc->Instance->TAMPCR, tmpreg);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* RTC Tamper Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_RTCEx_SetTamper_IT+0x1a4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <HAL_RTCEx_SetTamper_IT+0x1a4>)
 8002ba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002baa:	6013      	str	r3, [r2, #0]
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RTCEx_SetTamper_IT+0x1a4>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_RTCEx_SetTamper_IT+0x1a4>)
 8002bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bb6:	6093      	str	r3, [r2, #8]

  hrtc->State = HAL_RTC_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40010400 	.word	0x40010400

08002bdc <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3350      	adds	r3, #80	; 0x50
 8002c16:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	461a      	mov	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6013      	str	r3, [r2, #0]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e040      	b.n	8002cca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fd fdeb 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2224      	movs	r2, #36	; 0x24
 8002c62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f82d 	bl	8002cd4 <UART_SetConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e022      	b.n	8002cca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 faab 	bl	80031e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fb32 	bl	800332c <UART_CheckIdleState>
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4bad      	ldr	r3, [pc, #692]	; (8002fb4 <UART_SetConfig+0x2e0>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	69f9      	ldr	r1, [r7, #28]
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4aa2      	ldr	r2, [pc, #648]	; (8002fb8 <UART_SetConfig+0x2e4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a99      	ldr	r2, [pc, #612]	; (8002fbc <UART_SetConfig+0x2e8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d121      	bne.n	8002d9e <UART_SetConfig+0xca>
 8002d5a:	4b99      	ldr	r3, [pc, #612]	; (8002fc0 <UART_SetConfig+0x2ec>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d817      	bhi.n	8002d98 <UART_SetConfig+0xc4>
 8002d68:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <UART_SetConfig+0x9c>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d8d 	.word	0x08002d8d
 8002d78:	08002d87 	.word	0x08002d87
 8002d7c:	08002d93 	.word	0x08002d93
 8002d80:	2301      	movs	r3, #1
 8002d82:	76fb      	strb	r3, [r7, #27]
 8002d84:	e0e7      	b.n	8002f56 <UART_SetConfig+0x282>
 8002d86:	2302      	movs	r3, #2
 8002d88:	76fb      	strb	r3, [r7, #27]
 8002d8a:	e0e4      	b.n	8002f56 <UART_SetConfig+0x282>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	76fb      	strb	r3, [r7, #27]
 8002d90:	e0e1      	b.n	8002f56 <UART_SetConfig+0x282>
 8002d92:	2308      	movs	r3, #8
 8002d94:	76fb      	strb	r3, [r7, #27]
 8002d96:	e0de      	b.n	8002f56 <UART_SetConfig+0x282>
 8002d98:	2310      	movs	r3, #16
 8002d9a:	76fb      	strb	r3, [r7, #27]
 8002d9c:	e0db      	b.n	8002f56 <UART_SetConfig+0x282>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a88      	ldr	r2, [pc, #544]	; (8002fc4 <UART_SetConfig+0x2f0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d132      	bne.n	8002e0e <UART_SetConfig+0x13a>
 8002da8:	4b85      	ldr	r3, [pc, #532]	; (8002fc0 <UART_SetConfig+0x2ec>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	d828      	bhi.n	8002e08 <UART_SetConfig+0x134>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <UART_SetConfig+0xe8>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002e09 	.word	0x08002e09
 8002dc4:	08002e09 	.word	0x08002e09
 8002dc8:	08002e09 	.word	0x08002e09
 8002dcc:	08002dfd 	.word	0x08002dfd
 8002dd0:	08002e09 	.word	0x08002e09
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002e09 	.word	0x08002e09
 8002ddc:	08002df7 	.word	0x08002df7
 8002de0:	08002e09 	.word	0x08002e09
 8002de4:	08002e09 	.word	0x08002e09
 8002de8:	08002e09 	.word	0x08002e09
 8002dec:	08002e03 	.word	0x08002e03
 8002df0:	2300      	movs	r3, #0
 8002df2:	76fb      	strb	r3, [r7, #27]
 8002df4:	e0af      	b.n	8002f56 <UART_SetConfig+0x282>
 8002df6:	2302      	movs	r3, #2
 8002df8:	76fb      	strb	r3, [r7, #27]
 8002dfa:	e0ac      	b.n	8002f56 <UART_SetConfig+0x282>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	76fb      	strb	r3, [r7, #27]
 8002e00:	e0a9      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e02:	2308      	movs	r3, #8
 8002e04:	76fb      	strb	r3, [r7, #27]
 8002e06:	e0a6      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e08:	2310      	movs	r3, #16
 8002e0a:	76fb      	strb	r3, [r7, #27]
 8002e0c:	e0a3      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6d      	ldr	r2, [pc, #436]	; (8002fc8 <UART_SetConfig+0x2f4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d120      	bne.n	8002e5a <UART_SetConfig+0x186>
 8002e18:	4b69      	ldr	r3, [pc, #420]	; (8002fc0 <UART_SetConfig+0x2ec>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e22:	2b30      	cmp	r3, #48	; 0x30
 8002e24:	d013      	beq.n	8002e4e <UART_SetConfig+0x17a>
 8002e26:	2b30      	cmp	r3, #48	; 0x30
 8002e28:	d814      	bhi.n	8002e54 <UART_SetConfig+0x180>
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d009      	beq.n	8002e42 <UART_SetConfig+0x16e>
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d810      	bhi.n	8002e54 <UART_SetConfig+0x180>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <UART_SetConfig+0x168>
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d006      	beq.n	8002e48 <UART_SetConfig+0x174>
 8002e3a:	e00b      	b.n	8002e54 <UART_SetConfig+0x180>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	76fb      	strb	r3, [r7, #27]
 8002e40:	e089      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e42:	2302      	movs	r3, #2
 8002e44:	76fb      	strb	r3, [r7, #27]
 8002e46:	e086      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	76fb      	strb	r3, [r7, #27]
 8002e4c:	e083      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	76fb      	strb	r3, [r7, #27]
 8002e52:	e080      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e54:	2310      	movs	r3, #16
 8002e56:	76fb      	strb	r3, [r7, #27]
 8002e58:	e07d      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a5b      	ldr	r2, [pc, #364]	; (8002fcc <UART_SetConfig+0x2f8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d120      	bne.n	8002ea6 <UART_SetConfig+0x1d2>
 8002e64:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <UART_SetConfig+0x2ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e70:	d013      	beq.n	8002e9a <UART_SetConfig+0x1c6>
 8002e72:	2bc0      	cmp	r3, #192	; 0xc0
 8002e74:	d814      	bhi.n	8002ea0 <UART_SetConfig+0x1cc>
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	d009      	beq.n	8002e8e <UART_SetConfig+0x1ba>
 8002e7a:	2b80      	cmp	r3, #128	; 0x80
 8002e7c:	d810      	bhi.n	8002ea0 <UART_SetConfig+0x1cc>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <UART_SetConfig+0x1b4>
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d006      	beq.n	8002e94 <UART_SetConfig+0x1c0>
 8002e86:	e00b      	b.n	8002ea0 <UART_SetConfig+0x1cc>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	76fb      	strb	r3, [r7, #27]
 8002e8c:	e063      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	76fb      	strb	r3, [r7, #27]
 8002e92:	e060      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e94:	2304      	movs	r3, #4
 8002e96:	76fb      	strb	r3, [r7, #27]
 8002e98:	e05d      	b.n	8002f56 <UART_SetConfig+0x282>
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	76fb      	strb	r3, [r7, #27]
 8002e9e:	e05a      	b.n	8002f56 <UART_SetConfig+0x282>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	76fb      	strb	r3, [r7, #27]
 8002ea4:	e057      	b.n	8002f56 <UART_SetConfig+0x282>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a49      	ldr	r2, [pc, #292]	; (8002fd0 <UART_SetConfig+0x2fc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d125      	bne.n	8002efc <UART_SetConfig+0x228>
 8002eb0:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <UART_SetConfig+0x2ec>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ebe:	d017      	beq.n	8002ef0 <UART_SetConfig+0x21c>
 8002ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec4:	d817      	bhi.n	8002ef6 <UART_SetConfig+0x222>
 8002ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eca:	d00b      	beq.n	8002ee4 <UART_SetConfig+0x210>
 8002ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed0:	d811      	bhi.n	8002ef6 <UART_SetConfig+0x222>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <UART_SetConfig+0x20a>
 8002ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eda:	d006      	beq.n	8002eea <UART_SetConfig+0x216>
 8002edc:	e00b      	b.n	8002ef6 <UART_SetConfig+0x222>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	76fb      	strb	r3, [r7, #27]
 8002ee2:	e038      	b.n	8002f56 <UART_SetConfig+0x282>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	76fb      	strb	r3, [r7, #27]
 8002ee8:	e035      	b.n	8002f56 <UART_SetConfig+0x282>
 8002eea:	2304      	movs	r3, #4
 8002eec:	76fb      	strb	r3, [r7, #27]
 8002eee:	e032      	b.n	8002f56 <UART_SetConfig+0x282>
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	76fb      	strb	r3, [r7, #27]
 8002ef4:	e02f      	b.n	8002f56 <UART_SetConfig+0x282>
 8002ef6:	2310      	movs	r3, #16
 8002ef8:	76fb      	strb	r3, [r7, #27]
 8002efa:	e02c      	b.n	8002f56 <UART_SetConfig+0x282>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2d      	ldr	r2, [pc, #180]	; (8002fb8 <UART_SetConfig+0x2e4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d125      	bne.n	8002f52 <UART_SetConfig+0x27e>
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <UART_SetConfig+0x2ec>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f14:	d017      	beq.n	8002f46 <UART_SetConfig+0x272>
 8002f16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f1a:	d817      	bhi.n	8002f4c <UART_SetConfig+0x278>
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f20:	d00b      	beq.n	8002f3a <UART_SetConfig+0x266>
 8002f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f26:	d811      	bhi.n	8002f4c <UART_SetConfig+0x278>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <UART_SetConfig+0x260>
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	d006      	beq.n	8002f40 <UART_SetConfig+0x26c>
 8002f32:	e00b      	b.n	8002f4c <UART_SetConfig+0x278>
 8002f34:	2300      	movs	r3, #0
 8002f36:	76fb      	strb	r3, [r7, #27]
 8002f38:	e00d      	b.n	8002f56 <UART_SetConfig+0x282>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	76fb      	strb	r3, [r7, #27]
 8002f3e:	e00a      	b.n	8002f56 <UART_SetConfig+0x282>
 8002f40:	2304      	movs	r3, #4
 8002f42:	76fb      	strb	r3, [r7, #27]
 8002f44:	e007      	b.n	8002f56 <UART_SetConfig+0x282>
 8002f46:	2308      	movs	r3, #8
 8002f48:	76fb      	strb	r3, [r7, #27]
 8002f4a:	e004      	b.n	8002f56 <UART_SetConfig+0x282>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	76fb      	strb	r3, [r7, #27]
 8002f50:	e001      	b.n	8002f56 <UART_SetConfig+0x282>
 8002f52:	2310      	movs	r3, #16
 8002f54:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <UART_SetConfig+0x2e4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	f040 8087 	bne.w	8003070 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f62:	7efb      	ldrb	r3, [r7, #27]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d837      	bhi.n	8002fd8 <UART_SetConfig+0x304>
 8002f68:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <UART_SetConfig+0x29c>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f95 	.word	0x08002f95
 8002f74:	08002fd9 	.word	0x08002fd9
 8002f78:	08002f9d 	.word	0x08002f9d
 8002f7c:	08002fd9 	.word	0x08002fd9
 8002f80:	08002fa3 	.word	0x08002fa3
 8002f84:	08002fd9 	.word	0x08002fd9
 8002f88:	08002fd9 	.word	0x08002fd9
 8002f8c:	08002fd9 	.word	0x08002fd9
 8002f90:	08002fab 	.word	0x08002fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f94:	f7fe fe68 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002f98:	6178      	str	r0, [r7, #20]
        break;
 8002f9a:	e022      	b.n	8002fe2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <UART_SetConfig+0x300>)
 8002f9e:	617b      	str	r3, [r7, #20]
        break;
 8002fa0:	e01f      	b.n	8002fe2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa2:	f7fe fdc9 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8002fa6:	6178      	str	r0, [r7, #20]
        break;
 8002fa8:	e01b      	b.n	8002fe2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fae:	617b      	str	r3, [r7, #20]
        break;
 8002fb0:	e017      	b.n	8002fe2 <UART_SetConfig+0x30e>
 8002fb2:	bf00      	nop
 8002fb4:	efff69f3 	.word	0xefff69f3
 8002fb8:	40008000 	.word	0x40008000
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40004400 	.word	0x40004400
 8002fc8:	40004800 	.word	0x40004800
 8002fcc:	40004c00 	.word	0x40004c00
 8002fd0:	40005000 	.word	0x40005000
 8002fd4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	76bb      	strb	r3, [r7, #26]
        break;
 8002fe0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80f1 	beq.w	80031cc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d305      	bcc.n	8003006 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	429a      	cmp	r2, r3
 8003004:	d902      	bls.n	800300c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	76bb      	strb	r3, [r7, #26]
 800300a:	e0df      	b.n	80031cc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	4618      	mov	r0, r3
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	020b      	lsls	r3, r1, #8
 800301e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003022:	0202      	lsls	r2, r0, #8
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	6849      	ldr	r1, [r1, #4]
 8003028:	0849      	lsrs	r1, r1, #1
 800302a:	4608      	mov	r0, r1
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	1814      	adds	r4, r2, r0
 8003032:	eb43 0501 	adc.w	r5, r3, r1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	461a      	mov	r2, r3
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	4620      	mov	r0, r4
 8003042:	4629      	mov	r1, r5
 8003044:	f7fd f8c0 	bl	80001c8 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4613      	mov	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003056:	d308      	bcc.n	800306a <UART_SetConfig+0x396>
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800305e:	d204      	bcs.n	800306a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	60da      	str	r2, [r3, #12]
 8003068:	e0b0      	b.n	80031cc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	76bb      	strb	r3, [r7, #26]
 800306e:	e0ad      	b.n	80031cc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003078:	d15c      	bne.n	8003134 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800307a:	7efb      	ldrb	r3, [r7, #27]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d828      	bhi.n	80030d2 <UART_SetConfig+0x3fe>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0x3b4>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030b5 	.word	0x080030b5
 8003090:	080030bd 	.word	0x080030bd
 8003094:	080030d3 	.word	0x080030d3
 8003098:	080030c3 	.word	0x080030c3
 800309c:	080030d3 	.word	0x080030d3
 80030a0:	080030d3 	.word	0x080030d3
 80030a4:	080030d3 	.word	0x080030d3
 80030a8:	080030cb 	.word	0x080030cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ac:	f7fe fddc 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 80030b0:	6178      	str	r0, [r7, #20]
        break;
 80030b2:	e013      	b.n	80030dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b4:	f7fe fdee 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 80030b8:	6178      	str	r0, [r7, #20]
        break;
 80030ba:	e00f      	b.n	80030dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030bc:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <UART_SetConfig+0x510>)
 80030be:	617b      	str	r3, [r7, #20]
        break;
 80030c0:	e00c      	b.n	80030dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c2:	f7fe fd39 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80030c6:	6178      	str	r0, [r7, #20]
        break;
 80030c8:	e008      	b.n	80030dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	617b      	str	r3, [r7, #20]
        break;
 80030d0:	e004      	b.n	80030dc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	76bb      	strb	r3, [r7, #26]
        break;
 80030da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d074      	beq.n	80031cc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	005a      	lsls	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	441a      	add	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	d916      	bls.n	800312e <UART_SetConfig+0x45a>
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003106:	d212      	bcs.n	800312e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	b29b      	uxth	r3, r3
 800310c:	f023 030f 	bic.w	r3, r3, #15
 8003110:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	b29b      	uxth	r3, r3
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	b29a      	uxth	r2, r3
 800311e:	89fb      	ldrh	r3, [r7, #14]
 8003120:	4313      	orrs	r3, r2
 8003122:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	89fa      	ldrh	r2, [r7, #14]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	e04e      	b.n	80031cc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	76bb      	strb	r3, [r7, #26]
 8003132:	e04b      	b.n	80031cc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003134:	7efb      	ldrb	r3, [r7, #27]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d827      	bhi.n	800318a <UART_SetConfig+0x4b6>
 800313a:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <UART_SetConfig+0x46c>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003165 	.word	0x08003165
 8003144:	0800316d 	.word	0x0800316d
 8003148:	08003175 	.word	0x08003175
 800314c:	0800318b 	.word	0x0800318b
 8003150:	0800317b 	.word	0x0800317b
 8003154:	0800318b 	.word	0x0800318b
 8003158:	0800318b 	.word	0x0800318b
 800315c:	0800318b 	.word	0x0800318b
 8003160:	08003183 	.word	0x08003183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003164:	f7fe fd80 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8003168:	6178      	str	r0, [r7, #20]
        break;
 800316a:	e013      	b.n	8003194 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800316c:	f7fe fd92 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8003170:	6178      	str	r0, [r7, #20]
        break;
 8003172:	e00f      	b.n	8003194 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <UART_SetConfig+0x510>)
 8003176:	617b      	str	r3, [r7, #20]
        break;
 8003178:	e00c      	b.n	8003194 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317a:	f7fe fcdd 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 800317e:	6178      	str	r0, [r7, #20]
        break;
 8003180:	e008      	b.n	8003194 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003186:	617b      	str	r3, [r7, #20]
        break;
 8003188:	e004      	b.n	8003194 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	76bb      	strb	r3, [r7, #26]
        break;
 8003192:	bf00      	nop
    }

    if (pclk != 0U)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d018      	beq.n	80031cc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	085a      	lsrs	r2, r3, #1
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	441a      	add	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d908      	bls.n	80031c8 <UART_SetConfig+0x4f4>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d204      	bcs.n	80031c8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	e001      	b.n	80031cc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bdb0      	pop	{r4, r5, r7, pc}
 80031e2:	bf00      	nop
 80031e4:	00f42400 	.word	0x00f42400

080031e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01a      	beq.n	80032fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e6:	d10a      	bne.n	80032fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  }
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800333c:	f7fd fbd6 	bl	8000aec <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d10e      	bne.n	800336e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f82d 	bl	80033be <UART_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e023      	b.n	80033b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d10e      	bne.n	800339a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800337c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f817 	bl	80033be <UART_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e00d      	b.n	80033b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	4613      	mov	r3, r2
 80033cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ce:	e05e      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d05a      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d8:	f7fd fb88 	bl	8000aec <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <UART_WaitOnFlagUntilTimeout+0x30>
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11b      	bne.n	8003426 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e043      	b.n	80034ae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02c      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800343e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003442:	d124      	bne.n	800348e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800344c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800345c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e00f      	b.n	80034ae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d091      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	4d0d      	ldr	r5, [pc, #52]	; (80034f0 <__libc_init_array+0x38>)
 80034bc:	4c0d      	ldr	r4, [pc, #52]	; (80034f4 <__libc_init_array+0x3c>)
 80034be:	1b64      	subs	r4, r4, r5
 80034c0:	10a4      	asrs	r4, r4, #2
 80034c2:	2600      	movs	r6, #0
 80034c4:	42a6      	cmp	r6, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	4d0b      	ldr	r5, [pc, #44]	; (80034f8 <__libc_init_array+0x40>)
 80034ca:	4c0c      	ldr	r4, [pc, #48]	; (80034fc <__libc_init_array+0x44>)
 80034cc:	f000 f820 	bl	8003510 <_init>
 80034d0:	1b64      	subs	r4, r4, r5
 80034d2:	10a4      	asrs	r4, r4, #2
 80034d4:	2600      	movs	r6, #0
 80034d6:	42a6      	cmp	r6, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e0:	4798      	blx	r3
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ea:	4798      	blx	r3
 80034ec:	3601      	adds	r6, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	08003578 	.word	0x08003578
 80034f4:	08003578 	.word	0x08003578
 80034f8:	08003578 	.word	0x08003578
 80034fc:	0800357c 	.word	0x0800357c

08003500 <memset>:
 8003500:	4402      	add	r2, r0
 8003502:	4603      	mov	r3, r0
 8003504:	4293      	cmp	r3, r2
 8003506:	d100      	bne.n	800350a <memset+0xa>
 8003508:	4770      	bx	lr
 800350a:	f803 1b01 	strb.w	r1, [r3], #1
 800350e:	e7f9      	b.n	8003504 <memset+0x4>

08003510 <_init>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	bf00      	nop
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr

0800351c <_fini>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr
